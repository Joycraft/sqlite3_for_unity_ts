declare module "csharp" {
	export namespace System {
		export class Memory$1 {
			static get Empty(): System.Memory$1;
			get Length(): number;
			get IsEmpty(): boolean;
			get Span(): any;
			constructor(array: any);
			constructor(array: any, start: number, length: number);
			static op_Implicit(array: any): System.Memory$1;
			static op_Implicit(arraySegment: any): System.Memory$1;
			static op_Implicit(memory: System.Memory$1): any;
			Slice(start: number): System.Memory$1;
			Slice(start: number, length: number): System.Memory$1;
			Retain(pin?: boolean): any;
			TryGetArray(arraySegment: any): boolean;
			ToArray(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.Memory$1): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ReadOnlyMemory$1 {
			static get Empty(): System.ReadOnlyMemory$1;
			get Length(): number;
			get IsEmpty(): boolean;
			get Span(): any;
			constructor(array: any);
			constructor(array: any, start: number, length: number);
			static op_Implicit(array: any): System.ReadOnlyMemory$1;
			static op_Implicit(arraySegment: any): System.ReadOnlyMemory$1;
			Slice(start: number): System.ReadOnlyMemory$1;
			Slice(start: number, length: number): System.ReadOnlyMemory$1;
			Retain(pin?: boolean): any;
			DangerousTryGetArray(arraySegment: any): boolean;
			ToArray(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.ReadOnlyMemory$1): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ReadOnlySpan$1 {
			get Length(): number;
			get IsEmpty(): boolean;
			static get Empty(): System.ReadOnlySpan$1;
			constructor(array: any);
			constructor(array: any, start: number, length: number);
			constructor(pointer: any, length: number);
			static DangerousCreate(obj: any, objectData: any, length: number): System.ReadOnlySpan$1;
			static op_Equality(left: System.ReadOnlySpan$1, right: System.ReadOnlySpan$1): boolean;
			static op_Inequality(left: System.ReadOnlySpan$1, right: System.ReadOnlySpan$1): boolean;
			static op_Implicit(array: any): System.ReadOnlySpan$1;
			static op_Implicit(arraySegment: any): System.ReadOnlySpan$1;
			CopyTo(destination: any): void;
			TryCopyTo(destination: any): boolean;
			/**inherited method */
			/**[Obsolete]--"Equals() on Span will always throw an exception. Use == instead." */
			Equals(obj: any): boolean;
			/**inherited method */
			/**[Obsolete]--"GetHashCode() on Span will always throw an exception." */
			GetHashCode(): number;
			Slice(start: number): System.ReadOnlySpan$1;
			Slice(start: number, length: number): System.ReadOnlySpan$1;
			ToArray(): any;
			DangerousGetPinnableReference(): any;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Span$1 {
			get Length(): number;
			get IsEmpty(): boolean;
			static get Empty(): System.Span$1;
			constructor(array: any);
			constructor(array: any, start: number, length: number);
			constructor(pointer: any, length: number);
			static DangerousCreate(obj: any, objectData: any, length: number): System.Span$1;
			static op_Equality(left: System.Span$1, right: System.Span$1): boolean;
			static op_Inequality(left: System.Span$1, right: System.Span$1): boolean;
			static op_Implicit(array: any): System.Span$1;
			static op_Implicit(arraySegment: any): System.Span$1;
			static op_Implicit(span: System.Span$1): any;
			Clear(): void;
			Fill(value: any): void;
			CopyTo(destination: System.Span$1): void;
			TryCopyTo(destination: System.Span$1): boolean;
			/**inherited method */
			/**[Obsolete]--"Equals() on Span will always throw an exception. Use == instead." */
			Equals(obj: any): boolean;
			/**inherited method */
			/**[Obsolete]--"GetHashCode() on Span will always throw an exception." */
			GetHashCode(): number;
			Slice(start: number): System.Span$1;
			Slice(start: number, length: number): System.Span$1;
			ToArray(): any;
			DangerousGetPinnableReference(): any;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SpanExtensions extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TupleExtensions extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ValueTuple {
			static Create(): System.ValueTuple;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.ValueTuple): boolean;
			CompareTo(other: System.ValueTuple): number;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ValueTuple$1 {
			Item1: any;
			constructor(item1: any);
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.ValueTuple$1): boolean;
			CompareTo(other: System.ValueTuple$1): number;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ValueTuple$2 {
			Item1: any;
			Item2: any;
			constructor(item1: any, item2: any);
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.ValueTuple$2): boolean;
			CompareTo(other: System.ValueTuple$2): number;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ValueTuple$3 {
			Item1: any;
			Item2: any;
			Item3: any;
			constructor(item1: any, item2: any, item3: any);
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.ValueTuple$3): boolean;
			CompareTo(other: System.ValueTuple$3): number;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ValueTuple$4 {
			Item1: any;
			Item2: any;
			Item3: any;
			Item4: any;
			constructor(item1: any, item2: any, item3: any, item4: any);
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.ValueTuple$4): boolean;
			CompareTo(other: System.ValueTuple$4): number;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ValueTuple$5 {
			Item1: any;
			Item2: any;
			Item3: any;
			Item4: any;
			Item5: any;
			constructor(item1: any, item2: any, item3: any, item4: any, item5: any);
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.ValueTuple$5): boolean;
			CompareTo(other: System.ValueTuple$5): number;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ValueTuple$6 {
			Item1: any;
			Item2: any;
			Item3: any;
			Item4: any;
			Item5: any;
			Item6: any;
			constructor(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any);
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.ValueTuple$6): boolean;
			CompareTo(other: System.ValueTuple$6): number;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ValueTuple$7 {
			Item1: any;
			Item2: any;
			Item3: any;
			Item4: any;
			Item5: any;
			Item6: any;
			Item7: any;
			constructor(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any, item7: any);
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.ValueTuple$7): boolean;
			CompareTo(other: System.ValueTuple$7): number;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ValueTuple$8 {
			Item1: any;
			Item2: any;
			Item3: any;
			Item4: any;
			Item5: any;
			Item6: any;
			Item7: any;
			Rest: any;
			constructor(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any, item7: any, rest: any);
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.ValueTuple$8): boolean;
			CompareTo(other: System.ValueTuple$8): number;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Array extends System.Object {
			get LongLength(): number;
			get IsFixedSize(): boolean;
			get IsReadOnly(): boolean;
			get IsSynchronized(): boolean;
			get SyncRoot(): any;
			get Length(): number;
			get Rank(): number;
			static CreateInstance(elementType: System.Type, lengths: number[]): System.Array;
			static CreateInstance(elementType: System.Type, length: number): System.Array;
			static CreateInstance(elementType: System.Type, length1: number, length2: number): System.Array;
			static CreateInstance(elementType: System.Type, length1: number, length2: number, length3: number): System.Array;
			static CreateInstance(elementType: System.Type, lengths: number[]): System.Array;
			static CreateInstance(elementType: System.Type, lengths: number[], lowerBounds: number[]): System.Array;
			static BinarySearch(array: System.Array, value: any): number;
			static BinarySearch(array: System.Array, index: number, length: number, value: any): number;
			static BinarySearch(array: System.Array, value: any, comparer: any): number;
			static BinarySearch(array: System.Array, index: number, length: number, value: any, comparer: any): number;
			static Copy(sourceArray: System.Array, destinationArray: System.Array, length: number): void;
			static Copy(sourceArray: System.Array, sourceIndex: number, destinationArray: System.Array, destinationIndex: number, length: number): void;
			static Copy(sourceArray: System.Array, destinationArray: System.Array, length: number): void;
			static Copy(sourceArray: System.Array, sourceIndex: number, destinationArray: System.Array, destinationIndex: number, length: number): void;
			static IndexOf(array: System.Array, value: any): number;
			static IndexOf(array: System.Array, value: any, startIndex: number): number;
			static IndexOf(array: System.Array, value: any, startIndex: number, count: number): number;
			static LastIndexOf(array: System.Array, value: any): number;
			static LastIndexOf(array: System.Array, value: any, startIndex: number): number;
			static LastIndexOf(array: System.Array, value: any, startIndex: number, count: number): number;
			static Reverse(array: System.Array): void;
			static Reverse(array: System.Array, index: number, length: number): void;
			static Sort(array: System.Array): void;
			static Sort(array: System.Array, index: number, length: number): void;
			static Sort(array: System.Array, comparer: any): void;
			static Sort(array: System.Array, index: number, length: number, comparer: any): void;
			static Sort(keys: System.Array, items: System.Array): void;
			static Sort(keys: System.Array, items: System.Array, comparer: any): void;
			static Sort(keys: System.Array, items: System.Array, index: number, length: number): void;
			static Sort(keys: System.Array, items: System.Array, index: number, length: number, comparer: any): void;
			static Clear(array: System.Array, index: number, length: number): void;
			static ConstrainedCopy(sourceArray: System.Array, sourceIndex: number, destinationArray: System.Array, destinationIndex: number, length: number): void;
			CopyTo(array: System.Array, index: number): void;
			CopyTo(array: System.Array, index: number): void;
			Clone(): any;
			GetLongLength(dimension: number): number;
			GetValue(index: number): any;
			GetValue(index1: number, index2: number): any;
			GetValue(index1: number, index2: number, index3: number): any;
			GetValue(indices: number[]): any;
			GetValue(indices: number[]): any;
			GetValue(index: number): any;
			GetValue(index1: number, index2: number): any;
			GetValue(index1: number, index2: number, index3: number): any;
			SetValue(value: any, index: number): void;
			SetValue(value: any, index1: number, index2: number): void;
			SetValue(value: any, index1: number, index2: number, index3: number): void;
			SetValue(value: any, indices: number[]): void;
			SetValue(value: any, indices: number[]): void;
			SetValue(value: any, index: number): void;
			SetValue(value: any, index1: number, index2: number): void;
			SetValue(value: any, index1: number, index2: number, index3: number): void;
			GetEnumerator(): any;
			GetLength(dimension: number): number;
			GetLowerBound(dimension: number): number;
			GetUpperBound(dimension: number): number;
			Initialize(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Tuple extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Tuple$1 extends System.Object {
			get Item1(): any;
			constructor(item1: any);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Tuple$2 extends System.Object {
			get Item1(): any;
			get Item2(): any;
			constructor(item1: any, item2: any);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Tuple$3 extends System.Object {
			get Item1(): any;
			get Item2(): any;
			get Item3(): any;
			constructor(item1: any, item2: any, item3: any);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Tuple$4 extends System.Object {
			get Item1(): any;
			get Item2(): any;
			get Item3(): any;
			get Item4(): any;
			constructor(item1: any, item2: any, item3: any, item4: any);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Tuple$5 extends System.Object {
			get Item1(): any;
			get Item2(): any;
			get Item3(): any;
			get Item4(): any;
			get Item5(): any;
			constructor(item1: any, item2: any, item3: any, item4: any, item5: any);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Tuple$6 extends System.Object {
			get Item1(): any;
			get Item2(): any;
			get Item3(): any;
			get Item4(): any;
			get Item5(): any;
			get Item6(): any;
			constructor(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Tuple$7 extends System.Object {
			get Item1(): any;
			get Item2(): any;
			get Item3(): any;
			get Item4(): any;
			get Item5(): any;
			get Item6(): any;
			get Item7(): any;
			constructor(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any, item7: any);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Tuple$8 extends System.Object {
			get Item1(): any;
			get Item2(): any;
			get Item3(): any;
			get Item4(): any;
			get Item5(): any;
			get Item6(): any;
			get Item7(): any;
			get Rest(): any;
			constructor(item1: any, item2: any, item3: any, item4: any, item5: any, item6: any, item7: any, rest: any);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AppContext extends System.Object {
			static get BaseDirectory(): string;
			static get TargetFrameworkName(): string;
			static GetData(name: string): any;
			static TryGetSwitch(switchName: string, isEnabled: any): boolean;
			static SetSwitch(switchName: string, isEnabled: boolean): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FormattableString extends System.Object {
			get Format(): string;
			get ArgumentCount(): number;
			static Invariant(formattable: System.FormattableString): string;
			GetArguments(): any;
			GetArgument(index: number): any;
			ToString(formatProvider: System.IFormatProvider): string;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Lazy$1 extends System.Object {
			get IsValueCreated(): boolean;
			get Value(): any;
			constructor();
			constructor(valueFactory: System.Func$1);
			constructor(isThreadSafe: boolean);
			constructor(mode: any);
			constructor(valueFactory: System.Func$1, isThreadSafe: boolean);
			constructor(valueFactory: System.Func$1, mode: any);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LocalDataStoreSlot extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Action$1 extends Function {
		}
		export class Action extends Function {
		}
		export class Action$2 extends Function {
		}
		export class Action$3 extends Function {
		}
		export class Action$4 extends Function {
		}
		export class Func$1 extends Function {
		}
		export class Func$2 extends Function {
		}
		export class Func$3 extends Function {
		}
		export class Func$4 extends Function {
		}
		export class Func$5 extends Function {
		}
		export class Action$5 extends Function {
		}
		export class Action$6 extends Function {
		}
		export class Action$7 extends Function {
		}
		export class Action$8 extends Function {
		}
		export class Func$6 extends Function {
		}
		export class Func$7 extends Function {
		}
		export class Func$8 extends Function {
		}
		export class Func$9 extends Function {
		}
		export class Comparison$1 extends Function {
		}
		export class Converter$2 extends Function {
		}
		export class Predicate$1 extends Function {
		}
		export class Activator extends System.Object {
			static CreateInstance(type: System.Type, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, args: any, culture: any): any;
			static CreateInstance(type: System.Type, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, args: any, culture: any, activationAttributes: any): any;
			static CreateInstance(type: System.Type, args: any): any;
			static CreateInstance(type: System.Type, args: any, activationAttributes: any): any;
			static CreateInstance(type: System.Type): any;
			static CreateInstance(assemblyName: string, typeName: string): any;
			static CreateInstance(assemblyName: string, typeName: string, activationAttributes: any): any;
			static CreateInstance(type: System.Type, nonPublic: boolean): any;
			/**[Obsolete]--"Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstance which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information." */
			static CreateInstance(assemblyName: string, typeName: string, ignoreCase: boolean, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, args: any, culture: any, activationAttributes: any, securityInfo: any): any;
			static CreateInstance(assemblyName: string, typeName: string, ignoreCase: boolean, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, args: any, culture: any, activationAttributes: any): any;
			static CreateInstance(domain: any, assemblyName: string, typeName: string): any;
			/**[Obsolete]--"Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstance which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information." */
			static CreateInstance(domain: any, assemblyName: string, typeName: string, ignoreCase: boolean, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, args: any, culture: any, activationAttributes: any, securityAttributes: any): any;
			static CreateInstance(domain: any, assemblyName: string, typeName: string, ignoreCase: boolean, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, args: any, culture: any, activationAttributes: any): any;
			static CreateInstanceFrom(assemblyFile: string, typeName: string): any;
			static CreateInstanceFrom(assemblyFile: string, typeName: string, activationAttributes: any): any;
			/**[Obsolete]--"Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information." */
			static CreateInstanceFrom(assemblyFile: string, typeName: string, ignoreCase: boolean, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, args: any, culture: any, activationAttributes: any, securityInfo: any): any;
			static CreateInstanceFrom(assemblyFile: string, typeName: string, ignoreCase: boolean, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, args: any, culture: any, activationAttributes: any): any;
			static CreateInstanceFrom(domain: any, assemblyFile: string, typeName: string): any;
			/**[Obsolete]--"Methods which use Evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information." */
			static CreateInstanceFrom(domain: any, assemblyFile: string, typeName: string, ignoreCase: boolean, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, args: any, culture: any, activationAttributes: any, securityAttributes: any): any;
			static CreateInstanceFrom(domain: any, assemblyFile: string, typeName: string, ignoreCase: boolean, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, args: any, culture: any, activationAttributes: any): any;
			static CreateComInstanceFrom(assemblyName: string, typeName: string): any;
			static CreateComInstanceFrom(assemblyName: string, typeName: string, hashValue: Uint8Array, hashAlgorithm: any): any;
			static GetObject(type: System.Type, url: string): any;
			static GetObject(type: System.Type, url: string, state: any): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum LoaderOptimization { NotSpecified = 0, SingleDomain = 1, MultiDomain = 2, MultiDomainHost = 3, DomainMask = 3, DisallowBindings = 4, }
		export class LoaderOptimizationAttribute extends System.Attribute {
			get Value(): System.LoaderOptimization;
			constructor(value: number);
			constructor(value: System.LoaderOptimization);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ApplicationId extends System.Object {
			get PublicKeyToken(): Uint8Array;
			get Name(): string;
			get Version(): System.Version;
			get ProcessorArchitecture(): string;
			get Culture(): string;
			constructor(publicKeyToken: Uint8Array, name: string, version: System.Version, processorArchitecture: string, culture: string);
			Copy(): System.ApplicationId;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ArraySegment$1 {
			get Array(): any;
			get Offset(): number;
			get Count(): number;
			constructor(array: any);
			constructor(array: any, offset: number, count: number);
			static op_Equality(a: System.ArraySegment$1, b: System.ArraySegment$1): boolean;
			static op_Inequality(a: System.ArraySegment$1, b: System.ArraySegment$1): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: System.ArraySegment$1): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AsyncCallback extends Function {
		}
		export class Attribute extends System.Object {
			get TypeId(): any;
			static GetCustomAttributes(element: System.Reflection.MemberInfo, type: System.Type): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.MemberInfo, type: System.Type, inherit: boolean): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.MemberInfo): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.MemberInfo, inherit: boolean): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.ParameterInfo): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.ParameterInfo, attributeType: System.Type): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.ParameterInfo, attributeType: System.Type, inherit: boolean): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.ParameterInfo, inherit: boolean): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.Module, attributeType: System.Type): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.Module): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.Module, inherit: boolean): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.Module, attributeType: System.Type, inherit: boolean): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.Assembly, attributeType: System.Type): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.Assembly, attributeType: System.Type, inherit: boolean): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.Assembly): System.Attribute[];
			static GetCustomAttributes(element: System.Reflection.Assembly, inherit: boolean): System.Attribute[];
			static IsDefined(element: System.Reflection.MemberInfo, attributeType: System.Type): boolean;
			static IsDefined(element: System.Reflection.MemberInfo, attributeType: System.Type, inherit: boolean): boolean;
			static IsDefined(element: System.Reflection.ParameterInfo, attributeType: System.Type): boolean;
			static IsDefined(element: System.Reflection.ParameterInfo, attributeType: System.Type, inherit: boolean): boolean;
			static IsDefined(element: System.Reflection.Module, attributeType: System.Type): boolean;
			static IsDefined(element: System.Reflection.Module, attributeType: System.Type, inherit: boolean): boolean;
			static IsDefined(element: System.Reflection.Assembly, attributeType: System.Type): boolean;
			static IsDefined(element: System.Reflection.Assembly, attributeType: System.Type, inherit: boolean): boolean;
			static GetCustomAttribute(element: System.Reflection.MemberInfo, attributeType: System.Type): System.Attribute;
			static GetCustomAttribute(element: System.Reflection.MemberInfo, attributeType: System.Type, inherit: boolean): System.Attribute;
			static GetCustomAttribute(element: System.Reflection.ParameterInfo, attributeType: System.Type): System.Attribute;
			static GetCustomAttribute(element: System.Reflection.ParameterInfo, attributeType: System.Type, inherit: boolean): System.Attribute;
			static GetCustomAttribute(element: System.Reflection.Module, attributeType: System.Type): System.Attribute;
			static GetCustomAttribute(element: System.Reflection.Module, attributeType: System.Type, inherit: boolean): System.Attribute;
			static GetCustomAttribute(element: System.Reflection.Assembly, attributeType: System.Type): System.Attribute;
			static GetCustomAttribute(element: System.Reflection.Assembly, attributeType: System.Type, inherit: boolean): System.Attribute;
			Match(obj: any): boolean;
			IsDefaultAttribute(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum AttributeTargets { Assembly = 1, Module = 2, Class = 4, Struct = 8, Enum = 16, Constructor = 32, Method = 64, Property = 128, Field = 256, Event = 512, Interface = 1024, Parameter = 2048, Delegate = 4096, ReturnValue = 8192, GenericParameter = 16384, All = 32767, }
		export class AttributeUsageAttribute extends System.Attribute {
			get ValidOn(): System.AttributeTargets;
			get AllowMultiple(): boolean;
			set AllowMultiple(value: boolean);
			get Inherited(): boolean;
			set Inherited(value: boolean);
			constructor(validOn: System.AttributeTargets);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BitConverter extends System.Object {
			static IsLittleEndian: boolean;
			static GetBytes(value: boolean): Uint8Array;
			static GetBytes(value: string): Uint8Array;
			static GetBytes(value: number): Uint8Array;
			static GetBytes(value: number): Uint8Array;
			static GetBytes(value: number): Uint8Array;
			static GetBytes(value: number): Uint8Array;
			static GetBytes(value: number): Uint8Array;
			static GetBytes(value: number): Uint8Array;
			static GetBytes(value: number): Uint8Array;
			static GetBytes(value: number): Uint8Array;
			static ToChar(value: Uint8Array, startIndex: number): string;
			static ToInt16(value: Uint8Array, startIndex: number): number;
			static ToInt32(value: Uint8Array, startIndex: number): number;
			static ToInt64(value: Uint8Array, startIndex: number): number;
			static ToUInt16(value: Uint8Array, startIndex: number): number;
			static ToUInt32(value: Uint8Array, startIndex: number): number;
			static ToUInt64(value: Uint8Array, startIndex: number): number;
			static ToSingle(value: Uint8Array, startIndex: number): number;
			static ToDouble(value: Uint8Array, startIndex: number): number;
			static ToString(value: Uint8Array, startIndex: number, length: number): string;
			static ToString(value: Uint8Array): string;
			static ToString(value: Uint8Array, startIndex: number): string;
			/**inherited method */
			ToString(): string;
			static ToBoolean(value: Uint8Array, startIndex: number): boolean;
			static DoubleToInt64Bits(value: number): number;
			static Int64BitsToDouble(value: number): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Boolean {
			static TrueString: string;
			static FalseString: string;
			static Parse(value: string): boolean;
			static TryParse(value: string, result: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			ToString(provider: System.IFormatProvider): string;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: boolean): boolean;
			CompareTo(obj: any): number;
			CompareTo(value: boolean): number;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Buffer extends System.Object {
			static ByteLength(array: System.Array): number;
			static GetByte(array: System.Array, index: number): number;
			static SetByte(array: System.Array, index: number, value: number): void;
			static BlockCopy(src: System.Array, srcOffset: number, dst: System.Array, dstOffset: number, count: number): void;
			static MemoryCopy(source: any, destination: any, destinationSizeInBytes: number, sourceBytesToCopy: number): void;
			static MemoryCopy(source: any, destination: any, destinationSizeInBytes: number, sourceBytesToCopy: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Byte {
			static MaxValue: number;
			static MinValue: number;
			static Parse(s: string): number;
			static Parse(s: string, style: any): number;
			static Parse(s: string, provider: System.IFormatProvider): number;
			static Parse(s: string, style: any, provider: System.IFormatProvider): number;
			static TryParse(s: string, result: any): boolean;
			static TryParse(s: string, style: any, provider: System.IFormatProvider, result: any): boolean;
			CompareTo(value: any): number;
			CompareTo(value: number): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: number): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			ToString(provider: System.IFormatProvider): string;
			ToString(format: string, provider: System.IFormatProvider): string;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Char {
			static MaxValue: string;
			static MinValue: string;
			static Parse(s: string): string;
			static TryParse(s: string, result: any): boolean;
			static IsDigit(c: string): boolean;
			static IsDigit(s: string, index: number): boolean;
			static IsLetter(c: string): boolean;
			static IsLetter(s: string, index: number): boolean;
			static IsWhiteSpace(c: string): boolean;
			static IsWhiteSpace(s: string, index: number): boolean;
			static IsUpper(c: string): boolean;
			static IsUpper(s: string, index: number): boolean;
			static IsLower(c: string): boolean;
			static IsLower(s: string, index: number): boolean;
			static IsPunctuation(c: string): boolean;
			static IsPunctuation(s: string, index: number): boolean;
			static IsLetterOrDigit(c: string): boolean;
			static IsLetterOrDigit(s: string, index: number): boolean;
			static ToUpper(c: string, culture: any): string;
			static ToUpper(c: string): string;
			static ToUpperInvariant(c: string): string;
			static ToLower(c: string, culture: any): string;
			static ToLower(c: string): string;
			static ToLowerInvariant(c: string): string;
			static IsControl(c: string): boolean;
			static IsControl(s: string, index: number): boolean;
			static IsNumber(c: string): boolean;
			static IsNumber(s: string, index: number): boolean;
			static IsSeparator(c: string): boolean;
			static IsSeparator(s: string, index: number): boolean;
			static IsSurrogate(c: string): boolean;
			static IsSurrogate(s: string, index: number): boolean;
			static IsSymbol(c: string): boolean;
			static IsSymbol(s: string, index: number): boolean;
			static GetUnicodeCategory(c: string): any;
			static GetUnicodeCategory(s: string, index: number): any;
			static GetNumericValue(c: string): number;
			static GetNumericValue(s: string, index: number): number;
			static IsHighSurrogate(c: string): boolean;
			static IsHighSurrogate(s: string, index: number): boolean;
			static IsLowSurrogate(c: string): boolean;
			static IsLowSurrogate(s: string, index: number): boolean;
			static IsSurrogatePair(s: string, index: number): boolean;
			static IsSurrogatePair(highSurrogate: string, lowSurrogate: string): boolean;
			static ConvertFromUtf32(utf32: number): string;
			static ConvertToUtf32(highSurrogate: string, lowSurrogate: string): number;
			static ConvertToUtf32(s: string, index: number): number;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: string): boolean;
			CompareTo(value: any): number;
			CompareTo(value: string): number;
			/**inherited method */
			ToString(): string;
			ToString(provider: System.IFormatProvider): string;
			static ToString(c: string): string;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CharEnumerator extends System.Object {
			get Current(): string;
			Clone(): any;
			MoveNext(): boolean;
			Dispose(): void;
			Reset(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CLSCompliantAttribute extends System.Attribute {
			get IsCompliant(): boolean;
			constructor(isCompliant: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ConsoleCancelEventHandler extends Function {
		}
		export class ConsoleCancelEventArgs extends System.EventArgs {
			get Cancel(): boolean;
			set Cancel(value: boolean);
			get SpecialKey(): System.ConsoleSpecialKey;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ConsoleColor { Black = 0, DarkBlue = 1, DarkGreen = 2, DarkCyan = 3, DarkRed = 4, DarkMagenta = 5, DarkYellow = 6, Gray = 7, DarkGray = 8, Blue = 9, Green = 10, Cyan = 11, Red = 12, Magenta = 13, Yellow = 14, White = 15, }
		export enum ConsoleKey { Backspace = 8, Tab = 9, Clear = 12, Enter = 13, Pause = 19, Escape = 27, Spacebar = 32, PageUp = 33, PageDown = 34, End = 35, Home = 36, LeftArrow = 37, UpArrow = 38, RightArrow = 39, DownArrow = 40, Select = 41, Print = 42, Execute = 43, PrintScreen = 44, Insert = 45, Delete = 46, Help = 47, D0 = 48, D1 = 49, D2 = 50, D3 = 51, D4 = 52, D5 = 53, D6 = 54, D7 = 55, D8 = 56, D9 = 57, A = 65, B = 66, C = 67, D = 68, E = 69, F = 70, G = 71, H = 72, I = 73, J = 74, K = 75, L = 76, M = 77, N = 78, O = 79, P = 80, Q = 81, R = 82, S = 83, T = 84, U = 85, V = 86, W = 87, X = 88, Y = 89, Z = 90, LeftWindows = 91, RightWindows = 92, Applications = 93, Sleep = 95, NumPad0 = 96, NumPad1 = 97, NumPad2 = 98, NumPad3 = 99, NumPad4 = 100, NumPad5 = 101, NumPad6 = 102, NumPad7 = 103, NumPad8 = 104, NumPad9 = 105, Multiply = 106, Add = 107, Separator = 108, Subtract = 109, Decimal = 110, Divide = 111, F1 = 112, F2 = 113, F3 = 114, F4 = 115, F5 = 116, F6 = 117, F7 = 118, F8 = 119, F9 = 120, F10 = 121, F11 = 122, F12 = 123, F13 = 124, F14 = 125, F15 = 126, F16 = 127, F17 = 128, F18 = 129, F19 = 130, F20 = 131, F21 = 132, F22 = 133, F23 = 134, F24 = 135, BrowserBack = 166, BrowserForward = 167, BrowserRefresh = 168, BrowserStop = 169, BrowserSearch = 170, BrowserFavorites = 171, BrowserHome = 172, VolumeMute = 173, VolumeDown = 174, VolumeUp = 175, MediaNext = 176, MediaPrevious = 177, MediaStop = 178, MediaPlay = 179, LaunchMail = 180, LaunchMediaSelect = 181, LaunchApp1 = 182, LaunchApp2 = 183, Oem1 = 186, OemPlus = 187, OemComma = 188, OemMinus = 189, OemPeriod = 190, Oem2 = 191, Oem3 = 192, Oem4 = 219, Oem5 = 220, Oem6 = 221, Oem7 = 222, Oem8 = 223, Oem102 = 226, Process = 229, Packet = 231, Attention = 246, CrSel = 247, ExSel = 248, EraseEndOfFile = 249, Play = 250, Zoom = 251, NoName = 252, Pa1 = 253, OemClear = 254, }
		export class ConsoleKeyInfo {
			get KeyChar(): string;
			get Key(): System.ConsoleKey;
			get Modifiers(): System.ConsoleModifiers;
			constructor(keyChar: string, key: System.ConsoleKey, shift: boolean, alt: boolean, control: boolean);
			static op_Equality(a: System.ConsoleKeyInfo, b: System.ConsoleKeyInfo): boolean;
			static op_Inequality(a: System.ConsoleKeyInfo, b: System.ConsoleKeyInfo): boolean;
			/**inherited method */
			Equals(value: any): boolean;
			Equals(obj: System.ConsoleKeyInfo): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ConsoleModifiers { Alt = 1, Shift = 2, Control = 4, }
		export enum ConsoleSpecialKey { ControlC = 0, ControlBreak = 1, }
		export class ContextBoundObject extends System.MarshalByRefObject {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ContextStaticAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum Base64FormattingOptions { None = 0, InsertLineBreaks = 1, }
		export class Convert extends System.Object {
			static DBNull: any;
			static GetTypeCode(value: any): System.TypeCode;
			static IsDBNull(value: any): boolean;
			static ChangeType(value: any, typeCode: System.TypeCode): any;
			static ChangeType(value: any, typeCode: System.TypeCode, provider: System.IFormatProvider): any;
			static ChangeType(value: any, conversionType: System.Type): any;
			static ChangeType(value: any, conversionType: System.Type, provider: System.IFormatProvider): any;
			static ToBoolean(value: any): boolean;
			static ToBoolean(value: any, provider: System.IFormatProvider): boolean;
			static ToBoolean(value: boolean): boolean;
			static ToBoolean(value: System.SByte): boolean;
			static ToBoolean(value: string): boolean;
			static ToBoolean(value: number): boolean;
			static ToBoolean(value: number): boolean;
			static ToBoolean(value: number): boolean;
			static ToBoolean(value: number): boolean;
			static ToBoolean(value: number): boolean;
			static ToBoolean(value: number): boolean;
			static ToBoolean(value: number): boolean;
			static ToBoolean(value: string): boolean;
			static ToBoolean(value: string, provider: System.IFormatProvider): boolean;
			static ToBoolean(value: number): boolean;
			static ToBoolean(value: number): boolean;
			static ToBoolean(value: System.Decimal): boolean;
			static ToBoolean(value: System.DateTime): boolean;
			static ToChar(value: any): string;
			static ToChar(value: any, provider: System.IFormatProvider): string;
			static ToChar(value: boolean): string;
			static ToChar(value: string): string;
			static ToChar(value: System.SByte): string;
			static ToChar(value: number): string;
			static ToChar(value: number): string;
			static ToChar(value: number): string;
			static ToChar(value: number): string;
			static ToChar(value: number): string;
			static ToChar(value: number): string;
			static ToChar(value: number): string;
			static ToChar(value: string): string;
			static ToChar(value: string, provider: System.IFormatProvider): string;
			static ToChar(value: number): string;
			static ToChar(value: number): string;
			static ToChar(value: System.Decimal): string;
			static ToChar(value: System.DateTime): string;
			static ToSByte(value: any): System.SByte;
			static ToSByte(value: any, provider: System.IFormatProvider): System.SByte;
			static ToSByte(value: boolean): System.SByte;
			static ToSByte(value: System.SByte): System.SByte;
			static ToSByte(value: string): System.SByte;
			static ToSByte(value: number): System.SByte;
			static ToSByte(value: number): System.SByte;
			static ToSByte(value: number): System.SByte;
			static ToSByte(value: number): System.SByte;
			static ToSByte(value: number): System.SByte;
			static ToSByte(value: number): System.SByte;
			static ToSByte(value: number): System.SByte;
			static ToSByte(value: number): System.SByte;
			static ToSByte(value: number): System.SByte;
			static ToSByte(value: System.Decimal): System.SByte;
			static ToSByte(value: string): System.SByte;
			static ToSByte(value: string, provider: System.IFormatProvider): System.SByte;
			static ToSByte(value: System.DateTime): System.SByte;
			static ToSByte(value: string, fromBase: number): System.SByte;
			static ToByte(value: any): number;
			static ToByte(value: any, provider: System.IFormatProvider): number;
			static ToByte(value: boolean): number;
			static ToByte(value: number): number;
			static ToByte(value: string): number;
			static ToByte(value: System.SByte): number;
			static ToByte(value: number): number;
			static ToByte(value: number): number;
			static ToByte(value: number): number;
			static ToByte(value: number): number;
			static ToByte(value: number): number;
			static ToByte(value: number): number;
			static ToByte(value: number): number;
			static ToByte(value: number): number;
			static ToByte(value: System.Decimal): number;
			static ToByte(value: string): number;
			static ToByte(value: string, provider: System.IFormatProvider): number;
			static ToByte(value: System.DateTime): number;
			static ToByte(value: string, fromBase: number): number;
			static ToInt16(value: any): number;
			static ToInt16(value: any, provider: System.IFormatProvider): number;
			static ToInt16(value: boolean): number;
			static ToInt16(value: string): number;
			static ToInt16(value: System.SByte): number;
			static ToInt16(value: number): number;
			static ToInt16(value: number): number;
			static ToInt16(value: number): number;
			static ToInt16(value: number): number;
			static ToInt16(value: number): number;
			static ToInt16(value: number): number;
			static ToInt16(value: number): number;
			static ToInt16(value: number): number;
			static ToInt16(value: number): number;
			static ToInt16(value: System.Decimal): number;
			static ToInt16(value: string): number;
			static ToInt16(value: string, provider: System.IFormatProvider): number;
			static ToInt16(value: System.DateTime): number;
			static ToInt16(value: string, fromBase: number): number;
			static ToUInt16(value: any): number;
			static ToUInt16(value: any, provider: System.IFormatProvider): number;
			static ToUInt16(value: boolean): number;
			static ToUInt16(value: string): number;
			static ToUInt16(value: System.SByte): number;
			static ToUInt16(value: number): number;
			static ToUInt16(value: number): number;
			static ToUInt16(value: number): number;
			static ToUInt16(value: number): number;
			static ToUInt16(value: number): number;
			static ToUInt16(value: number): number;
			static ToUInt16(value: number): number;
			static ToUInt16(value: number): number;
			static ToUInt16(value: number): number;
			static ToUInt16(value: System.Decimal): number;
			static ToUInt16(value: string): number;
			static ToUInt16(value: string, provider: System.IFormatProvider): number;
			static ToUInt16(value: System.DateTime): number;
			static ToUInt16(value: string, fromBase: number): number;
			static ToInt32(value: any): number;
			static ToInt32(value: any, provider: System.IFormatProvider): number;
			static ToInt32(value: boolean): number;
			static ToInt32(value: string): number;
			static ToInt32(value: System.SByte): number;
			static ToInt32(value: number): number;
			static ToInt32(value: number): number;
			static ToInt32(value: number): number;
			static ToInt32(value: number): number;
			static ToInt32(value: number): number;
			static ToInt32(value: number): number;
			static ToInt32(value: number): number;
			static ToInt32(value: number): number;
			static ToInt32(value: number): number;
			static ToInt32(value: System.Decimal): number;
			static ToInt32(value: string): number;
			static ToInt32(value: string, provider: System.IFormatProvider): number;
			static ToInt32(value: System.DateTime): number;
			static ToInt32(value: string, fromBase: number): number;
			static ToUInt32(value: any): number;
			static ToUInt32(value: any, provider: System.IFormatProvider): number;
			static ToUInt32(value: boolean): number;
			static ToUInt32(value: string): number;
			static ToUInt32(value: System.SByte): number;
			static ToUInt32(value: number): number;
			static ToUInt32(value: number): number;
			static ToUInt32(value: number): number;
			static ToUInt32(value: number): number;
			static ToUInt32(value: number): number;
			static ToUInt32(value: number): number;
			static ToUInt32(value: number): number;
			static ToUInt32(value: number): number;
			static ToUInt32(value: number): number;
			static ToUInt32(value: System.Decimal): number;
			static ToUInt32(value: string): number;
			static ToUInt32(value: string, provider: System.IFormatProvider): number;
			static ToUInt32(value: System.DateTime): number;
			static ToUInt32(value: string, fromBase: number): number;
			static ToInt64(value: any): number;
			static ToInt64(value: any, provider: System.IFormatProvider): number;
			static ToInt64(value: boolean): number;
			static ToInt64(value: string): number;
			static ToInt64(value: System.SByte): number;
			static ToInt64(value: number): number;
			static ToInt64(value: number): number;
			static ToInt64(value: number): number;
			static ToInt64(value: number): number;
			static ToInt64(value: number): number;
			static ToInt64(value: number): number;
			static ToInt64(value: number): number;
			static ToInt64(value: number): number;
			static ToInt64(value: number): number;
			static ToInt64(value: System.Decimal): number;
			static ToInt64(value: string): number;
			static ToInt64(value: string, provider: System.IFormatProvider): number;
			static ToInt64(value: System.DateTime): number;
			static ToInt64(value: string, fromBase: number): number;
			static ToUInt64(value: any): number;
			static ToUInt64(value: any, provider: System.IFormatProvider): number;
			static ToUInt64(value: boolean): number;
			static ToUInt64(value: string): number;
			static ToUInt64(value: System.SByte): number;
			static ToUInt64(value: number): number;
			static ToUInt64(value: number): number;
			static ToUInt64(value: number): number;
			static ToUInt64(value: number): number;
			static ToUInt64(value: number): number;
			static ToUInt64(value: number): number;
			static ToUInt64(value: number): number;
			static ToUInt64(value: number): number;
			static ToUInt64(value: number): number;
			static ToUInt64(value: System.Decimal): number;
			static ToUInt64(value: string): number;
			static ToUInt64(value: string, provider: System.IFormatProvider): number;
			static ToUInt64(value: System.DateTime): number;
			static ToUInt64(value: string, fromBase: number): number;
			static ToSingle(value: any): number;
			static ToSingle(value: any, provider: System.IFormatProvider): number;
			static ToSingle(value: System.SByte): number;
			static ToSingle(value: number): number;
			static ToSingle(value: string): number;
			static ToSingle(value: number): number;
			static ToSingle(value: number): number;
			static ToSingle(value: number): number;
			static ToSingle(value: number): number;
			static ToSingle(value: number): number;
			static ToSingle(value: number): number;
			static ToSingle(value: number): number;
			static ToSingle(value: number): number;
			static ToSingle(value: System.Decimal): number;
			static ToSingle(value: string): number;
			static ToSingle(value: string, provider: System.IFormatProvider): number;
			static ToSingle(value: boolean): number;
			static ToSingle(value: System.DateTime): number;
			static ToDouble(value: any): number;
			static ToDouble(value: any, provider: System.IFormatProvider): number;
			static ToDouble(value: System.SByte): number;
			static ToDouble(value: number): number;
			static ToDouble(value: number): number;
			static ToDouble(value: string): number;
			static ToDouble(value: number): number;
			static ToDouble(value: number): number;
			static ToDouble(value: number): number;
			static ToDouble(value: number): number;
			static ToDouble(value: number): number;
			static ToDouble(value: number): number;
			static ToDouble(value: number): number;
			static ToDouble(value: System.Decimal): number;
			static ToDouble(value: string): number;
			static ToDouble(value: string, provider: System.IFormatProvider): number;
			static ToDouble(value: boolean): number;
			static ToDouble(value: System.DateTime): number;
			static ToDecimal(value: any): System.Decimal;
			static ToDecimal(value: any, provider: System.IFormatProvider): System.Decimal;
			static ToDecimal(value: System.SByte): System.Decimal;
			static ToDecimal(value: number): System.Decimal;
			static ToDecimal(value: string): System.Decimal;
			static ToDecimal(value: number): System.Decimal;
			static ToDecimal(value: number): System.Decimal;
			static ToDecimal(value: number): System.Decimal;
			static ToDecimal(value: number): System.Decimal;
			static ToDecimal(value: number): System.Decimal;
			static ToDecimal(value: number): System.Decimal;
			static ToDecimal(value: number): System.Decimal;
			static ToDecimal(value: number): System.Decimal;
			static ToDecimal(value: string): System.Decimal;
			static ToDecimal(value: string, provider: System.IFormatProvider): System.Decimal;
			static ToDecimal(value: System.Decimal): System.Decimal;
			static ToDecimal(value: boolean): System.Decimal;
			static ToDecimal(value: System.DateTime): System.Decimal;
			static ToDateTime(value: System.DateTime): System.DateTime;
			static ToDateTime(value: any): System.DateTime;
			static ToDateTime(value: any, provider: System.IFormatProvider): System.DateTime;
			static ToDateTime(value: string): System.DateTime;
			static ToDateTime(value: string, provider: System.IFormatProvider): System.DateTime;
			static ToDateTime(value: System.SByte): System.DateTime;
			static ToDateTime(value: number): System.DateTime;
			static ToDateTime(value: number): System.DateTime;
			static ToDateTime(value: number): System.DateTime;
			static ToDateTime(value: number): System.DateTime;
			static ToDateTime(value: number): System.DateTime;
			static ToDateTime(value: number): System.DateTime;
			static ToDateTime(value: number): System.DateTime;
			static ToDateTime(value: boolean): System.DateTime;
			static ToDateTime(value: string): System.DateTime;
			static ToDateTime(value: number): System.DateTime;
			static ToDateTime(value: number): System.DateTime;
			static ToDateTime(value: System.Decimal): System.DateTime;
			static ToString(value: any): string;
			static ToString(value: any, provider: System.IFormatProvider): string;
			static ToString(value: boolean): string;
			static ToString(value: boolean, provider: System.IFormatProvider): string;
			static ToString(value: string): string;
			static ToString(value: string, provider: System.IFormatProvider): string;
			static ToString(value: System.SByte): string;
			static ToString(value: System.SByte, provider: System.IFormatProvider): string;
			static ToString(value: number): string;
			static ToString(value: number, provider: System.IFormatProvider): string;
			static ToString(value: number): string;
			static ToString(value: number, provider: System.IFormatProvider): string;
			static ToString(value: number): string;
			static ToString(value: number, provider: System.IFormatProvider): string;
			static ToString(value: number): string;
			static ToString(value: number, provider: System.IFormatProvider): string;
			static ToString(value: number): string;
			static ToString(value: number, provider: System.IFormatProvider): string;
			static ToString(value: number): string;
			static ToString(value: number, provider: System.IFormatProvider): string;
			static ToString(value: number): string;
			static ToString(value: number, provider: System.IFormatProvider): string;
			static ToString(value: number): string;
			static ToString(value: number, provider: System.IFormatProvider): string;
			static ToString(value: number): string;
			static ToString(value: number, provider: System.IFormatProvider): string;
			static ToString(value: System.Decimal): string;
			static ToString(value: System.Decimal, provider: System.IFormatProvider): string;
			static ToString(value: System.DateTime): string;
			static ToString(value: System.DateTime, provider: System.IFormatProvider): string;
			static ToString(value: string): string;
			static ToString(value: string, provider: System.IFormatProvider): string;
			static ToString(value: number, toBase: number): string;
			static ToString(value: number, toBase: number): string;
			static ToString(value: number, toBase: number): string;
			static ToString(value: number, toBase: number): string;
			/**inherited method */
			ToString(): string;
			static ToBase64String(inArray: Uint8Array): string;
			static ToBase64String(inArray: Uint8Array, options: System.Base64FormattingOptions): string;
			static ToBase64String(inArray: Uint8Array, offset: number, length: number): string;
			static ToBase64String(inArray: Uint8Array, offset: number, length: number, options: System.Base64FormattingOptions): string;
			static ToBase64CharArray(inArray: Uint8Array, offsetIn: number, length: number, outArray: string[], offsetOut: number): number;
			static ToBase64CharArray(inArray: Uint8Array, offsetIn: number, length: number, outArray: string[], offsetOut: number, options: System.Base64FormattingOptions): number;
			static FromBase64String(s: string): Uint8Array;
			static FromBase64CharArray(inArray: string[], offset: number, length: number): Uint8Array;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DateTime {
			static MinValue: System.DateTime;
			static MaxValue: System.DateTime;
			get Date(): System.DateTime;
			get Day(): number;
			get DayOfWeek(): System.DayOfWeek;
			get DayOfYear(): number;
			get Hour(): number;
			get Kind(): System.DateTimeKind;
			get Millisecond(): number;
			get Minute(): number;
			get Month(): number;
			static get Now(): System.DateTime;
			static get UtcNow(): System.DateTime;
			get Second(): number;
			get Ticks(): number;
			get TimeOfDay(): System.TimeSpan;
			static get Today(): System.DateTime;
			get Year(): number;
			constructor(ticks: number);
			constructor(ticks: number, kind: System.DateTimeKind);
			constructor(year: number, month: number, day: number);
			constructor(year: number, month: number, day: number, calendar: any);
			constructor(year: number, month: number, day: number, hour: number, minute: number, second: number);
			constructor(year: number, month: number, day: number, hour: number, minute: number, second: number, kind: System.DateTimeKind);
			constructor(year: number, month: number, day: number, hour: number, minute: number, second: number, calendar: any);
			constructor(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number);
			constructor(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number, kind: System.DateTimeKind);
			constructor(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number, calendar: any);
			constructor(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number, calendar: any, kind: System.DateTimeKind);
			static Compare(t1: System.DateTime, t2: System.DateTime): number;
			static DaysInMonth(year: number, month: number): number;
			static FromBinary(dateData: number): System.DateTime;
			static FromFileTime(fileTime: number): System.DateTime;
			static FromFileTimeUtc(fileTime: number): System.DateTime;
			static FromOADate(d: number): System.DateTime;
			static SpecifyKind(value: System.DateTime, kind: System.DateTimeKind): System.DateTime;
			static IsLeapYear(year: number): boolean;
			static Parse(s: string): System.DateTime;
			static Parse(s: string, provider: System.IFormatProvider): System.DateTime;
			static Parse(s: string, provider: System.IFormatProvider, styles: any): System.DateTime;
			static ParseExact(s: string, format: string, provider: System.IFormatProvider): System.DateTime;
			static ParseExact(s: string, format: string, provider: System.IFormatProvider, style: any): System.DateTime;
			static ParseExact(s: string, formats: string[], provider: System.IFormatProvider, style: any): System.DateTime;
			static TryParse(s: string, result: any): boolean;
			static TryParse(s: string, provider: System.IFormatProvider, styles: any, result: any): boolean;
			static TryParseExact(s: string, format: string, provider: System.IFormatProvider, style: any, result: any): boolean;
			static TryParseExact(s: string, formats: string[], provider: System.IFormatProvider, style: any, result: any): boolean;
			static op_Addition(d: System.DateTime, t: System.TimeSpan): System.DateTime;
			static op_Subtraction(d: System.DateTime, t: System.TimeSpan): System.DateTime;
			static op_Subtraction(d1: System.DateTime, d2: System.DateTime): System.TimeSpan;
			static op_Equality(d1: System.DateTime, d2: System.DateTime): boolean;
			static op_Inequality(d1: System.DateTime, d2: System.DateTime): boolean;
			static op_LessThan(t1: System.DateTime, t2: System.DateTime): boolean;
			static op_LessThanOrEqual(t1: System.DateTime, t2: System.DateTime): boolean;
			static op_GreaterThan(t1: System.DateTime, t2: System.DateTime): boolean;
			static op_GreaterThanOrEqual(t1: System.DateTime, t2: System.DateTime): boolean;
			Add(value: System.TimeSpan): System.DateTime;
			AddDays(value: number): System.DateTime;
			AddHours(value: number): System.DateTime;
			AddMilliseconds(value: number): System.DateTime;
			AddMinutes(value: number): System.DateTime;
			AddMonths(months: number): System.DateTime;
			AddSeconds(value: number): System.DateTime;
			AddTicks(value: number): System.DateTime;
			AddYears(value: number): System.DateTime;
			CompareTo(value: any): number;
			CompareTo(value: System.DateTime): number;
			/**inherited method */
			Equals(value: any): boolean;
			Equals(value: System.DateTime): boolean;
			static Equals(t1: System.DateTime, t2: System.DateTime): boolean;
			IsDaylightSavingTime(): boolean;
			ToBinary(): number;
			/**inherited method */
			GetHashCode(): number;
			Subtract(value: System.DateTime): System.TimeSpan;
			Subtract(value: System.TimeSpan): System.DateTime;
			ToOADate(): number;
			ToFileTime(): number;
			ToFileTimeUtc(): number;
			ToLocalTime(): System.DateTime;
			ToLongDateString(): string;
			ToLongTimeString(): string;
			ToShortDateString(): string;
			ToShortTimeString(): string;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			ToString(provider: System.IFormatProvider): string;
			ToString(format: string, provider: System.IFormatProvider): string;
			ToUniversalTime(): System.DateTime;
			GetDateTimeFormats(): string[];
			GetDateTimeFormats(provider: System.IFormatProvider): string[];
			GetDateTimeFormats(format: string): string[];
			GetDateTimeFormats(format: string, provider: System.IFormatProvider): string[];
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum DateTimeKind { Unspecified = 0, Utc = 1, Local = 2, }
		export class DateTimeOffset {
			static MinValue: System.DateTimeOffset;
			static MaxValue: System.DateTimeOffset;
			static get Now(): System.DateTimeOffset;
			static get UtcNow(): System.DateTimeOffset;
			get DateTime(): System.DateTime;
			get UtcDateTime(): System.DateTime;
			get LocalDateTime(): System.DateTime;
			get Date(): System.DateTime;
			get Day(): number;
			get DayOfWeek(): System.DayOfWeek;
			get DayOfYear(): number;
			get Hour(): number;
			get Millisecond(): number;
			get Minute(): number;
			get Month(): number;
			get Offset(): System.TimeSpan;
			get Second(): number;
			get Ticks(): number;
			get UtcTicks(): number;
			get TimeOfDay(): System.TimeSpan;
			get Year(): number;
			constructor(ticks: number, offset: System.TimeSpan);
			constructor(dateTime: System.DateTime);
			constructor(dateTime: System.DateTime, offset: System.TimeSpan);
			constructor(year: number, month: number, day: number, hour: number, minute: number, second: number, offset: System.TimeSpan);
			constructor(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number, offset: System.TimeSpan);
			constructor(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number, calendar: any, offset: System.TimeSpan);
			static Compare(first: System.DateTimeOffset, second: System.DateTimeOffset): number;
			static FromFileTime(fileTime: number): System.DateTimeOffset;
			static FromUnixTimeSeconds(seconds: number): System.DateTimeOffset;
			static FromUnixTimeMilliseconds(milliseconds: number): System.DateTimeOffset;
			static Parse(input: string): System.DateTimeOffset;
			static Parse(input: string, formatProvider: System.IFormatProvider): System.DateTimeOffset;
			static Parse(input: string, formatProvider: System.IFormatProvider, styles: any): System.DateTimeOffset;
			static ParseExact(input: string, format: string, formatProvider: System.IFormatProvider): System.DateTimeOffset;
			static ParseExact(input: string, format: string, formatProvider: System.IFormatProvider, styles: any): System.DateTimeOffset;
			static ParseExact(input: string, formats: string[], formatProvider: System.IFormatProvider, styles: any): System.DateTimeOffset;
			static TryParse(input: string, result: any): boolean;
			static TryParse(input: string, formatProvider: System.IFormatProvider, styles: any, result: any): boolean;
			static TryParseExact(input: string, format: string, formatProvider: System.IFormatProvider, styles: any, result: any): boolean;
			static TryParseExact(input: string, formats: string[], formatProvider: System.IFormatProvider, styles: any, result: any): boolean;
			static op_Implicit(dateTime: System.DateTime): System.DateTimeOffset;
			static op_Addition(dateTimeOffset: System.DateTimeOffset, timeSpan: System.TimeSpan): System.DateTimeOffset;
			static op_Subtraction(dateTimeOffset: System.DateTimeOffset, timeSpan: System.TimeSpan): System.DateTimeOffset;
			static op_Subtraction(left: System.DateTimeOffset, right: System.DateTimeOffset): System.TimeSpan;
			static op_Equality(left: System.DateTimeOffset, right: System.DateTimeOffset): boolean;
			static op_Inequality(left: System.DateTimeOffset, right: System.DateTimeOffset): boolean;
			static op_LessThan(left: System.DateTimeOffset, right: System.DateTimeOffset): boolean;
			static op_LessThanOrEqual(left: System.DateTimeOffset, right: System.DateTimeOffset): boolean;
			static op_GreaterThan(left: System.DateTimeOffset, right: System.DateTimeOffset): boolean;
			static op_GreaterThanOrEqual(left: System.DateTimeOffset, right: System.DateTimeOffset): boolean;
			ToOffset(offset: System.TimeSpan): System.DateTimeOffset;
			Add(timeSpan: System.TimeSpan): System.DateTimeOffset;
			AddDays(days: number): System.DateTimeOffset;
			AddHours(hours: number): System.DateTimeOffset;
			AddMilliseconds(milliseconds: number): System.DateTimeOffset;
			AddMinutes(minutes: number): System.DateTimeOffset;
			AddMonths(months: number): System.DateTimeOffset;
			AddSeconds(seconds: number): System.DateTimeOffset;
			AddTicks(ticks: number): System.DateTimeOffset;
			AddYears(years: number): System.DateTimeOffset;
			CompareTo(other: System.DateTimeOffset): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.DateTimeOffset): boolean;
			static Equals(first: System.DateTimeOffset, second: System.DateTimeOffset): boolean;
			EqualsExact(other: System.DateTimeOffset): boolean;
			/**inherited method */
			GetHashCode(): number;
			Subtract(value: System.DateTimeOffset): System.TimeSpan;
			Subtract(value: System.TimeSpan): System.DateTimeOffset;
			ToFileTime(): number;
			ToUnixTimeSeconds(): number;
			ToUnixTimeMilliseconds(): number;
			ToLocalTime(): System.DateTimeOffset;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			ToString(formatProvider: System.IFormatProvider): string;
			ToString(format: string, formatProvider: System.IFormatProvider): string;
			ToUniversalTime(): System.DateTimeOffset;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum DayOfWeek { Sunday = 0, Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5, Saturday = 6, }
		export class DBNull extends System.Object {
			static Value: System.DBNull;
			GetObjectData(info: any, context: any): void;
			/**inherited method */
			ToString(): string;
			ToString(provider: System.IFormatProvider): string;
			GetTypeCode(): System.TypeCode;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Decimal {
			static Zero: System.Decimal;
			static One: System.Decimal;
			static MinusOne: System.Decimal;
			static MaxValue: System.Decimal;
			static MinValue: System.Decimal;
			constructor(value: number);
			constructor(value: number);
			constructor(value: number);
			constructor(value: number);
			constructor(value: number);
			constructor(value: number);
			constructor(bits: number[]);
			constructor(lo: number, mid: number, hi: number, isNegative: boolean, scale: number);
			static ToOACurrency(value: System.Decimal): number;
			static FromOACurrency(cy: number): System.Decimal;
			static Add(d1: System.Decimal, d2: System.Decimal): System.Decimal;
			static Ceiling(d: System.Decimal): System.Decimal;
			static Compare(d1: System.Decimal, d2: System.Decimal): number;
			static Divide(d1: System.Decimal, d2: System.Decimal): System.Decimal;
			static Floor(d: System.Decimal): System.Decimal;
			static Parse(s: string): System.Decimal;
			static Parse(s: string, style: any): System.Decimal;
			static Parse(s: string, provider: System.IFormatProvider): System.Decimal;
			static Parse(s: string, style: any, provider: System.IFormatProvider): System.Decimal;
			static TryParse(s: string, result: any): boolean;
			static TryParse(s: string, style: any, provider: System.IFormatProvider, result: any): boolean;
			static GetBits(d: System.Decimal): number[];
			static Remainder(d1: System.Decimal, d2: System.Decimal): System.Decimal;
			static Multiply(d1: System.Decimal, d2: System.Decimal): System.Decimal;
			static Negate(d: System.Decimal): System.Decimal;
			static Round(d: System.Decimal): System.Decimal;
			static Round(d: System.Decimal, decimals: number): System.Decimal;
			static Round(d: System.Decimal, mode: System.MidpointRounding): System.Decimal;
			static Round(d: System.Decimal, decimals: number, mode: System.MidpointRounding): System.Decimal;
			static Subtract(d1: System.Decimal, d2: System.Decimal): System.Decimal;
			static ToByte(value: System.Decimal): number;
			static ToSByte(value: System.Decimal): System.SByte;
			static ToInt16(value: System.Decimal): number;
			static ToDouble(d: System.Decimal): number;
			static ToInt32(d: System.Decimal): number;
			static ToInt64(d: System.Decimal): number;
			static ToUInt16(value: System.Decimal): number;
			static ToUInt32(d: System.Decimal): number;
			static ToUInt64(d: System.Decimal): number;
			static ToSingle(d: System.Decimal): number;
			static Truncate(d: System.Decimal): System.Decimal;
			static op_Implicit(value: number): System.Decimal;
			static op_Implicit(value: System.SByte): System.Decimal;
			static op_Implicit(value: number): System.Decimal;
			static op_Implicit(value: number): System.Decimal;
			static op_Implicit(value: string): System.Decimal;
			static op_Implicit(value: number): System.Decimal;
			static op_Implicit(value: number): System.Decimal;
			static op_Implicit(value: number): System.Decimal;
			static op_Implicit(value: number): System.Decimal;
			static op_Explicit(value: number): System.Decimal;
			static op_Explicit(value: number): System.Decimal;
			static op_Explicit(value: System.Decimal): number;
			static op_Explicit(value: System.Decimal): System.SByte;
			static op_Explicit(value: System.Decimal): string;
			static op_Explicit(value: System.Decimal): number;
			static op_Explicit(value: System.Decimal): number;
			static op_Explicit(value: System.Decimal): number;
			static op_Explicit(value: System.Decimal): number;
			static op_Explicit(value: System.Decimal): number;
			static op_Explicit(value: System.Decimal): number;
			static op_Explicit(value: System.Decimal): number;
			static op_Explicit(value: System.Decimal): number;
			static op_UnaryPlus(d: System.Decimal): System.Decimal;
			static op_UnaryNegation(d: System.Decimal): System.Decimal;
			static op_Increment(d: System.Decimal): System.Decimal;
			static op_Decrement(d: System.Decimal): System.Decimal;
			static op_Addition(d1: System.Decimal, d2: System.Decimal): System.Decimal;
			static op_Subtraction(d1: System.Decimal, d2: System.Decimal): System.Decimal;
			static op_Multiply(d1: System.Decimal, d2: System.Decimal): System.Decimal;
			static op_Division(d1: System.Decimal, d2: System.Decimal): System.Decimal;
			static op_Modulus(d1: System.Decimal, d2: System.Decimal): System.Decimal;
			static op_Equality(d1: System.Decimal, d2: System.Decimal): boolean;
			static op_Inequality(d1: System.Decimal, d2: System.Decimal): boolean;
			static op_LessThan(d1: System.Decimal, d2: System.Decimal): boolean;
			static op_LessThanOrEqual(d1: System.Decimal, d2: System.Decimal): boolean;
			static op_GreaterThan(d1: System.Decimal, d2: System.Decimal): boolean;
			static op_GreaterThanOrEqual(d1: System.Decimal, d2: System.Decimal): boolean;
			CompareTo(value: any): number;
			CompareTo(value: System.Decimal): number;
			/**inherited method */
			Equals(value: any): boolean;
			Equals(value: System.Decimal): boolean;
			static Equals(d1: System.Decimal, d2: System.Decimal): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			ToString(provider: System.IFormatProvider): string;
			ToString(format: string, provider: System.IFormatProvider): string;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Double {
			static MinValue: number;
			static MaxValue: number;
			static Epsilon: number;
			static NegativeInfinity: number;
			static PositiveInfinity: number;
			static NaN: number;
			static IsInfinity(d: number): boolean;
			static IsPositiveInfinity(d: number): boolean;
			static IsNegativeInfinity(d: number): boolean;
			static IsNaN(d: number): boolean;
			static IsFinite(d: number): boolean;
			static op_Equality(left: number, right: number): boolean;
			static op_Inequality(left: number, right: number): boolean;
			static op_LessThan(left: number, right: number): boolean;
			static op_GreaterThan(left: number, right: number): boolean;
			static op_LessThanOrEqual(left: number, right: number): boolean;
			static op_GreaterThanOrEqual(left: number, right: number): boolean;
			static Parse(s: string): number;
			static Parse(s: string, style: any): number;
			static Parse(s: string, provider: System.IFormatProvider): number;
			static Parse(s: string, style: any, provider: System.IFormatProvider): number;
			static TryParse(s: string, result: any): boolean;
			static TryParse(s: string, style: any, provider: System.IFormatProvider, result: any): boolean;
			CompareTo(value: any): number;
			CompareTo(value: number): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: number): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			ToString(provider: System.IFormatProvider): string;
			ToString(format: string, provider: System.IFormatProvider): string;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Enum {
			static Parse(enumType: System.Type, value: string): any;
			static Parse(enumType: System.Type, value: string, ignoreCase: boolean): any;
			static GetUnderlyingType(enumType: System.Type): System.Type;
			static GetValues(enumType: System.Type): System.Array;
			static GetName(enumType: System.Type, value: any): string;
			static GetNames(enumType: System.Type): string[];
			static ToObject(enumType: System.Type, value: any): any;
			static ToObject(enumType: System.Type, value: System.SByte): any;
			static ToObject(enumType: System.Type, value: number): any;
			static ToObject(enumType: System.Type, value: number): any;
			static ToObject(enumType: System.Type, value: number): any;
			static ToObject(enumType: System.Type, value: number): any;
			static ToObject(enumType: System.Type, value: number): any;
			static ToObject(enumType: System.Type, value: number): any;
			static ToObject(enumType: System.Type, value: number): any;
			static IsDefined(enumType: System.Type, value: any): boolean;
			static Format(enumType: System.Type, value: any, format: string): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**[Obsolete]--"The provider argument is not used. Please use ToString(String)." */
			ToString(format: string, provider: System.IFormatProvider): string;
			ToString(format: string): string;
			/**[Obsolete]--"The provider argument is not used. Please use ToString()." */
			ToString(provider: System.IFormatProvider): string;
			CompareTo(target: any): number;
			HasFlag(flag: System.Enum): boolean;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EventArgs extends System.Object {
			static Empty: System.EventArgs;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EventHandler extends Function {
		}
		export class EventHandler$1 extends Function {
		}
		export class FlagsAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum GCCollectionMode { Default = 0, Forced = 1, Optimized = 2, }
		export enum GCNotificationStatus { Succeeded = 0, Failed = 1, Canceled = 2, Timeout = 3, NotApplicable = 4, }
		export class GC extends System.Object {
			static get MaxGeneration(): number;
			static AddMemoryPressure(bytesAllocated: number): void;
			static RemoveMemoryPressure(bytesAllocated: number): void;
			static GetGeneration(obj: any): number;
			static GetGeneration(wo: System.WeakReference): number;
			static Collect(generation: number): void;
			static Collect(): void;
			static Collect(generation: number, mode: System.GCCollectionMode): void;
			static Collect(generation: number, mode: System.GCCollectionMode, blocking: boolean): void;
			static Collect(generation: number, mode: System.GCCollectionMode, blocking: boolean, compacting: boolean): void;
			static CollectionCount(generation: number): number;
			static KeepAlive(obj: any): void;
			static WaitForPendingFinalizers(): void;
			static SuppressFinalize(obj: any): void;
			static ReRegisterForFinalize(obj: any): void;
			static GetTotalMemory(forceFullCollection: boolean): number;
			static RegisterForFullGCNotification(maxGenerationThreshold: number, largeObjectHeapThreshold: number): void;
			static CancelFullGCNotification(): void;
			static WaitForFullGCApproach(): System.GCNotificationStatus;
			static WaitForFullGCApproach(millisecondsTimeout: number): System.GCNotificationStatus;
			static WaitForFullGCComplete(): System.GCNotificationStatus;
			static WaitForFullGCComplete(millisecondsTimeout: number): System.GCNotificationStatus;
			static TryStartNoGCRegion(totalSize: number): boolean;
			static TryStartNoGCRegion(totalSize: number, lohSize: number): boolean;
			static TryStartNoGCRegion(totalSize: number, disallowFullBlockingGC: boolean): boolean;
			static TryStartNoGCRegion(totalSize: number, lohSize: number, disallowFullBlockingGC: boolean): boolean;
			static EndNoGCRegion(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Guid {
			static Empty: System.Guid;
			constructor(b: Uint8Array);
			constructor(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number);
			constructor(a: number, b: number, c: number, d: Uint8Array);
			constructor(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number);
			constructor(g: string);
			static Parse(input: string): System.Guid;
			static TryParse(input: string, result: any): boolean;
			static ParseExact(input: string, format: string): System.Guid;
			static TryParseExact(input: string, format: string, result: any): boolean;
			static op_Equality(a: System.Guid, b: System.Guid): boolean;
			static op_Inequality(a: System.Guid, b: System.Guid): boolean;
			static NewGuid(): System.Guid;
			ToByteArray(): Uint8Array;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			ToString(format: string, provider: System.IFormatProvider): string;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(o: any): boolean;
			Equals(g: System.Guid): boolean;
			CompareTo(value: any): number;
			CompareTo(value: System.Guid): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface IAsyncResult {
		}
		export interface ICloneable {
			Clone(): any;
		}
		export interface IComparable {
			CompareTo(obj: any): number;
		}
		export interface IComparable$1 {
			CompareTo(other: any): number;
		}
		export interface IConvertible {
			GetTypeCode(): System.TypeCode;
			ToBoolean(provider: System.IFormatProvider): boolean;
			ToChar(provider: System.IFormatProvider): string;
			ToSByte(provider: System.IFormatProvider): System.SByte;
			ToByte(provider: System.IFormatProvider): number;
			ToInt16(provider: System.IFormatProvider): number;
			ToUInt16(provider: System.IFormatProvider): number;
			ToInt32(provider: System.IFormatProvider): number;
			ToUInt32(provider: System.IFormatProvider): number;
			ToInt64(provider: System.IFormatProvider): number;
			ToUInt64(provider: System.IFormatProvider): number;
			ToSingle(provider: System.IFormatProvider): number;
			ToDouble(provider: System.IFormatProvider): number;
			ToDecimal(provider: System.IFormatProvider): System.Decimal;
			ToDateTime(provider: System.IFormatProvider): System.DateTime;
			ToString(provider: System.IFormatProvider): string;
			ToType(conversionType: System.Type, provider: System.IFormatProvider): any;
			ToString(): string;
		}
		export interface ICustomFormatter {
			Format(format: string, arg: any, formatProvider: System.IFormatProvider): string;
		}
		export interface IDisposable {
			Dispose(): void;
		}
		export interface IEquatable$1 {
			Equals(other: any): boolean;
			Equals(x: any): boolean;
		}
		export interface IFormatProvider {
			GetFormat(formatType: System.Type): any;
		}
		export interface IFormattable {
			ToString(format: string, formatProvider: System.IFormatProvider): string;
			ToString(): string;
		}
		export class Int16 {
			static MaxValue: number;
			static MinValue: number;
			static Parse(s: string): number;
			static Parse(s: string, style: any): number;
			static Parse(s: string, provider: System.IFormatProvider): number;
			static Parse(s: string, style: any, provider: System.IFormatProvider): number;
			static TryParse(s: string, result: any): boolean;
			static TryParse(s: string, style: any, provider: System.IFormatProvider, result: any): boolean;
			CompareTo(value: any): number;
			CompareTo(value: number): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: number): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			ToString(provider: System.IFormatProvider): string;
			ToString(format: string): string;
			ToString(format: string, provider: System.IFormatProvider): string;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Int32 {
			static MaxValue: number;
			static MinValue: number;
			static Parse(s: string): number;
			static Parse(s: string, style: any): number;
			static Parse(s: string, provider: System.IFormatProvider): number;
			static Parse(s: string, style: any, provider: System.IFormatProvider): number;
			static TryParse(s: string, result: any): boolean;
			static TryParse(s: string, style: any, provider: System.IFormatProvider, result: any): boolean;
			CompareTo(value: any): number;
			CompareTo(value: number): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: number): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			ToString(provider: System.IFormatProvider): string;
			ToString(format: string, provider: System.IFormatProvider): string;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Int64 {
			static MaxValue: number;
			static MinValue: number;
			static Parse(s: string): number;
			static Parse(s: string, style: any): number;
			static Parse(s: string, provider: System.IFormatProvider): number;
			static Parse(s: string, style: any, provider: System.IFormatProvider): number;
			static TryParse(s: string, result: any): boolean;
			static TryParse(s: string, style: any, provider: System.IFormatProvider, result: any): boolean;
			CompareTo(value: any): number;
			CompareTo(value: number): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: number): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			ToString(provider: System.IFormatProvider): string;
			ToString(format: string): string;
			ToString(format: string, provider: System.IFormatProvider): string;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface IObservable$1 {
			Subscribe(observer: any): System.IDisposable;
		}
		export interface IObserver$1 {
			OnNext(value: any): void;
			OnError(error: any): void;
			OnCompleted(): void;
		}
		export interface IProgress$1 {
			Report(value: any): void;
		}
		export interface IServiceProvider {
			GetService(serviceType: System.Type): any;
		}
		export class Math extends System.Object {
			static PI: number;
			static E: number;
			static Acos(d: number): number;
			static Asin(d: number): number;
			static Atan(d: number): number;
			static Atan2(y: number, x: number): number;
			static Ceiling(d: System.Decimal): System.Decimal;
			static Ceiling(a: number): number;
			static Cos(d: number): number;
			static Cosh(value: number): number;
			static Floor(d: System.Decimal): System.Decimal;
			static Floor(d: number): number;
			static Sin(a: number): number;
			static Tan(a: number): number;
			static Sinh(value: number): number;
			static Tanh(value: number): number;
			static Round(a: number): number;
			static Round(value: number, digits: number): number;
			static Round(value: number, mode: System.MidpointRounding): number;
			static Round(value: number, digits: number, mode: System.MidpointRounding): number;
			static Round(d: System.Decimal): System.Decimal;
			static Round(d: System.Decimal, decimals: number): System.Decimal;
			static Round(d: System.Decimal, mode: System.MidpointRounding): System.Decimal;
			static Round(d: System.Decimal, decimals: number, mode: System.MidpointRounding): System.Decimal;
			static Truncate(d: System.Decimal): System.Decimal;
			static Truncate(d: number): number;
			static Sqrt(d: number): number;
			static Log(d: number): number;
			static Log(a: number, newBase: number): number;
			static Log10(d: number): number;
			static Exp(d: number): number;
			static Pow(x: number, y: number): number;
			static IEEERemainder(x: number, y: number): number;
			static Abs(value: System.SByte): System.SByte;
			static Abs(value: number): number;
			static Abs(value: number): number;
			static Abs(value: number): number;
			static Abs(value: number): number;
			static Abs(value: number): number;
			static Abs(value: System.Decimal): System.Decimal;
			static Max(val1: System.SByte, val2: System.SByte): System.SByte;
			static Max(val1: number, val2: number): number;
			static Max(val1: number, val2: number): number;
			static Max(val1: number, val2: number): number;
			static Max(val1: number, val2: number): number;
			static Max(val1: number, val2: number): number;
			static Max(val1: number, val2: number): number;
			static Max(val1: number, val2: number): number;
			static Max(val1: number, val2: number): number;
			static Max(val1: number, val2: number): number;
			static Max(val1: System.Decimal, val2: System.Decimal): System.Decimal;
			static Min(val1: System.SByte, val2: System.SByte): System.SByte;
			static Min(val1: number, val2: number): number;
			static Min(val1: number, val2: number): number;
			static Min(val1: number, val2: number): number;
			static Min(val1: number, val2: number): number;
			static Min(val1: number, val2: number): number;
			static Min(val1: number, val2: number): number;
			static Min(val1: number, val2: number): number;
			static Min(val1: number, val2: number): number;
			static Min(val1: number, val2: number): number;
			static Min(val1: System.Decimal, val2: System.Decimal): System.Decimal;
			static Sign(value: System.SByte): number;
			static Sign(value: number): number;
			static Sign(value: number): number;
			static Sign(value: number): number;
			static Sign(value: number): number;
			static Sign(value: number): number;
			static Sign(value: System.Decimal): number;
			static BigMul(a: number, b: number): number;
			static DivRem(a: number, b: number, result: any): number;
			static DivRem(a: number, b: number, result: any): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum MidpointRounding { ToEven = 0, AwayFromZero = 1, }
		export class NonSerializedAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ObsoleteAttribute extends System.Attribute {
			get Message(): string;
			get IsError(): boolean;
			constructor();
			constructor(message: string);
			constructor(message: string, error: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ParamArrayAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Progress$1 extends System.Object {
			constructor();
			constructor(handler: System.Action$1);
			add_ProgressChanged(value: System.EventHandler$1): void;
			remove_ProgressChanged(value: System.EventHandler$1): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Random extends System.Object {
			constructor();
			constructor(Seed: number);
			Next(): number;
			Next(minValue: number, maxValue: number): number;
			Next(maxValue: number): number;
			NextDouble(): number;
			NextBytes(buffer: Uint8Array): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SByte {
			static MaxValue: System.SByte;
			static MinValue: System.SByte;
			static Parse(s: string): System.SByte;
			static Parse(s: string, style: any): System.SByte;
			static Parse(s: string, provider: System.IFormatProvider): System.SByte;
			static Parse(s: string, style: any, provider: System.IFormatProvider): System.SByte;
			static TryParse(s: string, result: any): boolean;
			static TryParse(s: string, style: any, provider: System.IFormatProvider, result: any): boolean;
			CompareTo(obj: any): number;
			CompareTo(value: System.SByte): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: System.SByte): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			ToString(provider: System.IFormatProvider): string;
			ToString(format: string): string;
			ToString(format: string, provider: System.IFormatProvider): string;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SerializableAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Single {
			static MinValue: number;
			static Epsilon: number;
			static MaxValue: number;
			static PositiveInfinity: number;
			static NegativeInfinity: number;
			static NaN: number;
			static IsInfinity(f: number): boolean;
			static IsPositiveInfinity(f: number): boolean;
			static IsNegativeInfinity(f: number): boolean;
			static IsNaN(f: number): boolean;
			static IsFinite(f: number): boolean;
			static op_Equality(left: number, right: number): boolean;
			static op_Inequality(left: number, right: number): boolean;
			static op_LessThan(left: number, right: number): boolean;
			static op_GreaterThan(left: number, right: number): boolean;
			static op_LessThanOrEqual(left: number, right: number): boolean;
			static op_GreaterThanOrEqual(left: number, right: number): boolean;
			static Parse(s: string): number;
			static Parse(s: string, style: any): number;
			static Parse(s: string, provider: System.IFormatProvider): number;
			static Parse(s: string, style: any, provider: System.IFormatProvider): number;
			static TryParse(s: string, result: any): boolean;
			static TryParse(s: string, style: any, provider: System.IFormatProvider, result: any): boolean;
			CompareTo(value: any): number;
			CompareTo(value: number): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: number): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			ToString(provider: System.IFormatProvider): string;
			ToString(format: string): string;
			ToString(format: string, provider: System.IFormatProvider): string;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class String extends System.Object {
			static Empty: string;
			get Chars(): string;
			get Length(): number;
			constructor(value: any);
			constructor(value: any, startIndex: number, length: number);
			constructor(value: any);
			constructor(value: any, startIndex: number, length: number);
			constructor(value: any, startIndex: number, length: number, enc: System.Text.Encoding);
			constructor(value: string[], startIndex: number, length: number);
			constructor(value: string[]);
			constructor(c: string, count: number);
			static Join(separator: string, value: string[]): string;
			static Join(separator: string, values: any): string;
			static Join(separator: string, values: any): string;
			static Join(separator: string, value: string[], startIndex: number, count: number): string;
			static op_Equality(a: string, b: string): boolean;
			static op_Inequality(a: string, b: string): boolean;
			static IsNullOrEmpty(value: string): boolean;
			static IsNullOrWhiteSpace(value: string): boolean;
			static Compare(strA: string, strB: string): number;
			static Compare(strA: string, strB: string, ignoreCase: boolean): number;
			static Compare(strA: string, strB: string, comparisonType: System.StringComparison): number;
			static Compare(strA: string, strB: string, culture: any, options: any): number;
			static Compare(strA: string, strB: string, ignoreCase: boolean, culture: any): number;
			static Compare(strA: string, indexA: number, strB: string, indexB: number, length: number): number;
			static Compare(strA: string, indexA: number, strB: string, indexB: number, length: number, ignoreCase: boolean): number;
			static Compare(strA: string, indexA: number, strB: string, indexB: number, length: number, ignoreCase: boolean, culture: any): number;
			static Compare(strA: string, indexA: number, strB: string, indexB: number, length: number, culture: any, options: any): number;
			static Compare(strA: string, indexA: number, strB: string, indexB: number, length: number, comparisonType: System.StringComparison): number;
			static CompareOrdinal(strA: string, strB: string): number;
			static CompareOrdinal(strA: string, indexA: number, strB: string, indexB: number, length: number): number;
			static Format(format: string, arg0: any): string;
			static Format(format: string, arg0: any, arg1: any): string;
			static Format(format: string, arg0: any, arg1: any, arg2: any): string;
			static Format(format: string, args: any): string;
			static Format(provider: System.IFormatProvider, format: string, arg0: any): string;
			static Format(provider: System.IFormatProvider, format: string, arg0: any, arg1: any): string;
			static Format(provider: System.IFormatProvider, format: string, arg0: any, arg1: any, arg2: any): string;
			static Format(provider: System.IFormatProvider, format: string, args: any): string;
			static Copy(str: string): string;
			static Concat(arg0: any): string;
			static Concat(arg0: any, arg1: any): string;
			static Concat(arg0: any, arg1: any, arg2: any): string;
			static Concat(arg0: any, arg1: any, arg2: any, arg3: any): string;
			static Concat(args: any): string;
			static Concat(values: any): string;
			static Concat(str0: string, str1: string): string;
			static Concat(str0: string, str1: string, str2: string): string;
			static Concat(str0: string, str1: string, str2: string, str3: string): string;
			static Concat(values: string[]): string;
			static Intern(str: string): string;
			static IsInterned(str: string): string;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(value: string): boolean;
			Equals(value: string, comparisonType: System.StringComparison): boolean;
			static Equals(a: string, b: string): boolean;
			static Equals(a: string, b: string, comparisonType: System.StringComparison): boolean;
			CopyTo(sourceIndex: number, destination: string[], destinationIndex: number, count: number): void;
			ToCharArray(): string[];
			ToCharArray(startIndex: number, length: number): string[];
			Split(separator: string[]): string[];
			Split(separator: string[], count: number): string[];
			Split(separator: string[], options: System.StringSplitOptions): string[];
			Split(separator: string[], count: number, options: System.StringSplitOptions): string[];
			Split(separator: string[], options: System.StringSplitOptions): string[];
			Split(separator: string[], count: number, options: System.StringSplitOptions): string[];
			Substring(startIndex: number): string;
			Substring(startIndex: number, length: number): string;
			Trim(trimChars: string[]): string;
			Trim(): string;
			TrimStart(trimChars: string[]): string;
			TrimEnd(trimChars: string[]): string;
			IsNormalized(): boolean;
			IsNormalized(normalizationForm: System.Text.NormalizationForm): boolean;
			Normalize(): string;
			Normalize(normalizationForm: System.Text.NormalizationForm): string;
			CompareTo(value: any): number;
			CompareTo(strB: string): number;
			Contains(value: string): boolean;
			EndsWith(value: string): boolean;
			EndsWith(value: string, comparisonType: System.StringComparison): boolean;
			EndsWith(value: string, ignoreCase: boolean, culture: any): boolean;
			IndexOf(value: string): number;
			IndexOf(value: string, startIndex: number): number;
			IndexOf(value: string): number;
			IndexOf(value: string, startIndex: number): number;
			IndexOf(value: string, startIndex: number, count: number): number;
			IndexOf(value: string, comparisonType: System.StringComparison): number;
			IndexOf(value: string, startIndex: number, comparisonType: System.StringComparison): number;
			IndexOf(value: string, startIndex: number, count: number, comparisonType: System.StringComparison): number;
			IndexOf(value: string, startIndex: number, count: number): number;
			IndexOfAny(anyOf: string[]): number;
			IndexOfAny(anyOf: string[], startIndex: number): number;
			IndexOfAny(anyOf: string[], startIndex: number, count: number): number;
			LastIndexOf(value: string): number;
			LastIndexOf(value: string, startIndex: number): number;
			LastIndexOf(value: string): number;
			LastIndexOf(value: string, startIndex: number): number;
			LastIndexOf(value: string, startIndex: number, count: number): number;
			LastIndexOf(value: string, comparisonType: System.StringComparison): number;
			LastIndexOf(value: string, startIndex: number, comparisonType: System.StringComparison): number;
			LastIndexOf(value: string, startIndex: number, count: number, comparisonType: System.StringComparison): number;
			LastIndexOf(value: string, startIndex: number, count: number): number;
			LastIndexOfAny(anyOf: string[]): number;
			LastIndexOfAny(anyOf: string[], startIndex: number): number;
			LastIndexOfAny(anyOf: string[], startIndex: number, count: number): number;
			PadLeft(totalWidth: number): string;
			PadLeft(totalWidth: number, paddingChar: string): string;
			PadRight(totalWidth: number): string;
			PadRight(totalWidth: number, paddingChar: string): string;
			StartsWith(value: string): boolean;
			StartsWith(value: string, comparisonType: System.StringComparison): boolean;
			StartsWith(value: string, ignoreCase: boolean, culture: any): boolean;
			ToLower(): string;
			ToLower(culture: any): string;
			ToLowerInvariant(): string;
			ToUpper(): string;
			ToUpper(culture: any): string;
			ToUpperInvariant(): string;
			/**inherited method */
			ToString(): string;
			ToString(provider: System.IFormatProvider): string;
			Clone(): any;
			Insert(startIndex: number, value: string): string;
			Replace(oldChar: string, newChar: string): string;
			Replace(oldValue: string, newValue: string): string;
			Remove(startIndex: number, count: number): string;
			Remove(startIndex: number): string;
			GetTypeCode(): System.TypeCode;
			GetEnumerator(): System.CharEnumerator;
			/**extension method */
			AsReadOnlySpan(): any;
			/**extension method */
			IsNormalized(): boolean;
			/**extension method */
			IsNormalized(normalizationForm: System.Text.NormalizationForm): boolean;
			/**extension method */
			Normalize(): string;
			/**extension method */
			Normalize(normalizationForm: System.Text.NormalizationForm): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum StringSplitOptions { None = 0, RemoveEmptyEntries = 1, }
		export class StringComparer extends System.Object {
			static get InvariantCulture(): System.StringComparer;
			static get InvariantCultureIgnoreCase(): System.StringComparer;
			static get CurrentCulture(): System.StringComparer;
			static get CurrentCultureIgnoreCase(): System.StringComparer;
			static get Ordinal(): System.StringComparer;
			static get OrdinalIgnoreCase(): System.StringComparer;
			static Create(culture: any, ignoreCase: boolean): System.StringComparer;
			Compare(x: any, y: any): number;
			Compare(x: string, y: string): number;
			Equals(x: any, y: any): boolean;
			Equals(x: string, y: string): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			GetHashCode(obj: any): number;
			GetHashCode(obj: string): number;
			/**inherited method */
			GetHashCode(): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class STAThreadAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MTAThreadAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ThreadStaticAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TimeSpan {
			static TicksPerMillisecond: number;
			static TicksPerSecond: number;
			static TicksPerMinute: number;
			static TicksPerHour: number;
			static TicksPerDay: number;
			static Zero: System.TimeSpan;
			static MaxValue: System.TimeSpan;
			static MinValue: System.TimeSpan;
			get Ticks(): number;
			get Days(): number;
			get Hours(): number;
			get Milliseconds(): number;
			get Minutes(): number;
			get Seconds(): number;
			get TotalDays(): number;
			get TotalHours(): number;
			get TotalMilliseconds(): number;
			get TotalMinutes(): number;
			get TotalSeconds(): number;
			constructor(ticks: number);
			constructor(hours: number, minutes: number, seconds: number);
			constructor(days: number, hours: number, minutes: number, seconds: number);
			constructor(days: number, hours: number, minutes: number, seconds: number, milliseconds: number);
			static Compare(t1: System.TimeSpan, t2: System.TimeSpan): number;
			static FromDays(value: number): System.TimeSpan;
			static FromHours(value: number): System.TimeSpan;
			static FromMilliseconds(value: number): System.TimeSpan;
			static FromMinutes(value: number): System.TimeSpan;
			static FromSeconds(value: number): System.TimeSpan;
			static FromTicks(value: number): System.TimeSpan;
			static Parse(s: string): System.TimeSpan;
			static Parse(input: string, formatProvider: System.IFormatProvider): System.TimeSpan;
			static ParseExact(input: string, format: string, formatProvider: System.IFormatProvider): System.TimeSpan;
			static ParseExact(input: string, formats: string[], formatProvider: System.IFormatProvider): System.TimeSpan;
			static ParseExact(input: string, format: string, formatProvider: System.IFormatProvider, styles: any): System.TimeSpan;
			static ParseExact(input: string, formats: string[], formatProvider: System.IFormatProvider, styles: any): System.TimeSpan;
			static TryParse(s: string, result: any): boolean;
			static TryParse(input: string, formatProvider: System.IFormatProvider, result: any): boolean;
			static TryParseExact(input: string, format: string, formatProvider: System.IFormatProvider, result: any): boolean;
			static TryParseExact(input: string, formats: string[], formatProvider: System.IFormatProvider, result: any): boolean;
			static TryParseExact(input: string, format: string, formatProvider: System.IFormatProvider, styles: any, result: any): boolean;
			static TryParseExact(input: string, formats: string[], formatProvider: System.IFormatProvider, styles: any, result: any): boolean;
			static op_UnaryNegation(t: System.TimeSpan): System.TimeSpan;
			static op_Subtraction(t1: System.TimeSpan, t2: System.TimeSpan): System.TimeSpan;
			static op_UnaryPlus(t: System.TimeSpan): System.TimeSpan;
			static op_Addition(t1: System.TimeSpan, t2: System.TimeSpan): System.TimeSpan;
			static op_Equality(t1: System.TimeSpan, t2: System.TimeSpan): boolean;
			static op_Inequality(t1: System.TimeSpan, t2: System.TimeSpan): boolean;
			static op_LessThan(t1: System.TimeSpan, t2: System.TimeSpan): boolean;
			static op_LessThanOrEqual(t1: System.TimeSpan, t2: System.TimeSpan): boolean;
			static op_GreaterThan(t1: System.TimeSpan, t2: System.TimeSpan): boolean;
			static op_GreaterThanOrEqual(t1: System.TimeSpan, t2: System.TimeSpan): boolean;
			Add(ts: System.TimeSpan): System.TimeSpan;
			CompareTo(value: any): number;
			CompareTo(value: System.TimeSpan): number;
			Duration(): System.TimeSpan;
			/**inherited method */
			Equals(value: any): boolean;
			Equals(obj: System.TimeSpan): boolean;
			static Equals(t1: System.TimeSpan, t2: System.TimeSpan): boolean;
			/**inherited method */
			GetHashCode(): number;
			Negate(): System.TimeSpan;
			Subtract(ts: System.TimeSpan): System.TimeSpan;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			ToString(format: string, formatProvider: System.IFormatProvider): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TimeZoneInfo extends System.Object {
			get BaseUtcOffset(): System.TimeSpan;
			get DaylightName(): string;
			get DisplayName(): string;
			get Id(): string;
			static get Local(): System.TimeZoneInfo;
			get StandardName(): string;
			get SupportsDaylightSavingTime(): boolean;
			static get Utc(): System.TimeZoneInfo;
			static FromSerializedString(source: string): System.TimeZoneInfo;
			static ClearCachedData(): void;
			static ConvertTime(dateTime: System.DateTime, destinationTimeZone: System.TimeZoneInfo): System.DateTime;
			static ConvertTime(dateTime: System.DateTime, sourceTimeZone: System.TimeZoneInfo, destinationTimeZone: System.TimeZoneInfo): System.DateTime;
			static ConvertTime(dateTimeOffset: System.DateTimeOffset, destinationTimeZone: System.TimeZoneInfo): System.DateTimeOffset;
			static ConvertTimeBySystemTimeZoneId(dateTime: System.DateTime, destinationTimeZoneId: string): System.DateTime;
			static ConvertTimeBySystemTimeZoneId(dateTime: System.DateTime, sourceTimeZoneId: string, destinationTimeZoneId: string): System.DateTime;
			static ConvertTimeBySystemTimeZoneId(dateTimeOffset: System.DateTimeOffset, destinationTimeZoneId: string): System.DateTimeOffset;
			static ConvertTimeFromUtc(dateTime: System.DateTime, destinationTimeZone: System.TimeZoneInfo): System.DateTime;
			static ConvertTimeToUtc(dateTime: System.DateTime): System.DateTime;
			static ConvertTimeToUtc(dateTime: System.DateTime, sourceTimeZone: System.TimeZoneInfo): System.DateTime;
			static CreateCustomTimeZone(id: string, baseUtcOffset: System.TimeSpan, displayName: string, standardDisplayName: string): System.TimeZoneInfo;
			static CreateCustomTimeZone(id: string, baseUtcOffset: System.TimeSpan, displayName: string, standardDisplayName: string, daylightDisplayName: string, adjustmentRules: System.TimeZoneInfo.AdjustmentRule[]): System.TimeZoneInfo;
			static CreateCustomTimeZone(id: string, baseUtcOffset: System.TimeSpan, displayName: string, standardDisplayName: string, daylightDisplayName: string, adjustmentRules: System.TimeZoneInfo.AdjustmentRule[], disableDaylightSavingTime: boolean): System.TimeZoneInfo;
			static FindSystemTimeZoneById(id: string): System.TimeZoneInfo;
			static GetSystemTimeZones(): any;
			ToSerializedString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.TimeZoneInfo): boolean;
			GetAdjustmentRules(): System.TimeZoneInfo.AdjustmentRule[];
			GetAmbiguousTimeOffsets(dateTime: System.DateTime): System.TimeSpan[];
			GetAmbiguousTimeOffsets(dateTimeOffset: System.DateTimeOffset): System.TimeSpan[];
			GetUtcOffset(dateTime: System.DateTime): System.TimeSpan;
			GetUtcOffset(dateTimeOffset: System.DateTimeOffset): System.TimeSpan;
			HasSameRules(other: System.TimeZoneInfo): boolean;
			IsAmbiguousTime(dateTime: System.DateTime): boolean;
			IsAmbiguousTime(dateTimeOffset: System.DateTimeOffset): boolean;
			IsDaylightSavingTime(dateTime: System.DateTime): boolean;
			IsDaylightSavingTime(dateTimeOffset: System.DateTimeOffset): boolean;
			IsInvalidTime(dateTime: System.DateTime): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Type extends System.Reflection.MemberInfo {
			static FilterAttribute: System.Reflection.MemberFilter;
			static FilterName: System.Reflection.MemberFilter;
			static FilterNameIgnoreCase: System.Reflection.MemberFilter;
			static Missing: any;
			static Delimiter: string;
			static EmptyTypes: System.Type[];
			get MemberType(): System.Reflection.MemberTypes;
			get DeclaringType(): System.Type;
			get DeclaringMethod(): System.Reflection.MethodBase;
			get ReflectedType(): System.Type;
			get StructLayoutAttribute(): any;
			get GUID(): System.Guid;
			static get DefaultBinder(): System.Reflection.Binder;
			get Module(): System.Reflection.Module;
			get Assembly(): System.Reflection.Assembly;
			get TypeHandle(): System.RuntimeTypeHandle;
			get FullName(): string;
			get Namespace(): string;
			get AssemblyQualifiedName(): string;
			get BaseType(): System.Type;
			get TypeInitializer(): System.Reflection.ConstructorInfo;
			get IsNested(): boolean;
			get Attributes(): System.Reflection.TypeAttributes;
			get GenericParameterAttributes(): System.Reflection.GenericParameterAttributes;
			get IsVisible(): boolean;
			get IsNotPublic(): boolean;
			get IsPublic(): boolean;
			get IsNestedPublic(): boolean;
			get IsNestedPrivate(): boolean;
			get IsNestedFamily(): boolean;
			get IsNestedAssembly(): boolean;
			get IsNestedFamANDAssem(): boolean;
			get IsNestedFamORAssem(): boolean;
			get IsAutoLayout(): boolean;
			get IsLayoutSequential(): boolean;
			get IsExplicitLayout(): boolean;
			get IsClass(): boolean;
			get IsInterface(): boolean;
			get IsValueType(): boolean;
			get IsAbstract(): boolean;
			get IsSealed(): boolean;
			get IsEnum(): boolean;
			get IsSpecialName(): boolean;
			get IsImport(): boolean;
			get IsSerializable(): boolean;
			get IsAnsiClass(): boolean;
			get IsUnicodeClass(): boolean;
			get IsAutoClass(): boolean;
			get IsArray(): boolean;
			get IsGenericType(): boolean;
			get IsGenericTypeDefinition(): boolean;
			get IsConstructedGenericType(): boolean;
			get IsGenericParameter(): boolean;
			get GenericParameterPosition(): number;
			get ContainsGenericParameters(): boolean;
			get IsByRef(): boolean;
			get IsPointer(): boolean;
			get IsPrimitive(): boolean;
			get IsCOMObject(): boolean;
			get HasElementType(): boolean;
			get IsContextful(): boolean;
			get IsMarshalByRef(): boolean;
			get GenericTypeArguments(): System.Type[];
			get IsSecurityCritical(): boolean;
			get IsSecuritySafeCritical(): boolean;
			get IsSecurityTransparent(): boolean;
			get UnderlyingSystemType(): System.Type;
			get IsSZArray(): boolean;
			static GetType(typeName: string, assemblyResolver: System.Func$2, typeResolver: System.Func$4): System.Type;
			static GetType(typeName: string, assemblyResolver: System.Func$2, typeResolver: System.Func$4, throwOnError: boolean): System.Type;
			static GetType(typeName: string, assemblyResolver: System.Func$2, typeResolver: System.Func$4, throwOnError: boolean, ignoreCase: boolean): System.Type;
			GetType(): System.Type;
			static GetType(typeName: string): System.Type;
			static GetType(typeName: string, throwOnError: boolean): System.Type;
			static GetType(typeName: string, throwOnError: boolean, ignoreCase: boolean): System.Type;
			/**inherited method */
			GetType(): System.Type;
			static GetTypeFromProgID(progID: string): System.Type;
			static GetTypeFromProgID(progID: string, throwOnError: boolean): System.Type;
			static GetTypeFromProgID(progID: string, server: string): System.Type;
			static GetTypeFromProgID(progID: string, server: string, throwOnError: boolean): System.Type;
			static GetTypeFromCLSID(clsid: System.Guid): System.Type;
			static GetTypeFromCLSID(clsid: System.Guid, throwOnError: boolean): System.Type;
			static GetTypeFromCLSID(clsid: System.Guid, server: string): System.Type;
			static GetTypeFromCLSID(clsid: System.Guid, server: string, throwOnError: boolean): System.Type;
			static GetTypeCode(type: System.Type): System.TypeCode;
			static GetTypeHandle(o: any): System.RuntimeTypeHandle;
			static GetTypeArray(args: any): System.Type[];
			static op_Equality(left: System.Type, right: System.Type): boolean;
			static op_Inequality(left: System.Type, right: System.Type): boolean;
			static ReflectionOnlyGetType(typeName: string, throwIfNotFound: boolean, ignoreCase: boolean): System.Type;
			static GetTypeFromHandle(handle: System.RuntimeTypeHandle): System.Type;
			MakePointerType(): System.Type;
			MakeByRefType(): System.Type;
			MakeArrayType(): System.Type;
			MakeArrayType(rank: number): System.Type;
			InvokeMember(name: string, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, target: any, args: any, modifiers: System.Reflection.ParameterModifier[], culture: any, namedParameters: string[]): any;
			InvokeMember(name: string, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, target: any, args: any, culture: any): any;
			InvokeMember(name: string, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, target: any, args: any): any;
			GetArrayRank(): number;
			GetConstructor(bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, callConvention: System.Reflection.CallingConventions, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.ConstructorInfo;
			GetConstructor(bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.ConstructorInfo;
			GetConstructor(types: System.Type[]): System.Reflection.ConstructorInfo;
			GetConstructors(): System.Reflection.ConstructorInfo[];
			GetConstructors(bindingAttr: System.Reflection.BindingFlags): System.Reflection.ConstructorInfo[];
			GetMethod(name: string, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, callConvention: System.Reflection.CallingConventions, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.MethodInfo;
			GetMethod(name: string, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.MethodInfo;
			GetMethod(name: string, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.MethodInfo;
			GetMethod(name: string, types: System.Type[]): System.Reflection.MethodInfo;
			GetMethod(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.MethodInfo;
			GetMethod(name: string): System.Reflection.MethodInfo;
			GetMethods(): System.Reflection.MethodInfo[];
			GetMethods(bindingAttr: System.Reflection.BindingFlags): System.Reflection.MethodInfo[];
			GetField(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.FieldInfo;
			GetField(name: string): System.Reflection.FieldInfo;
			GetFields(): System.Reflection.FieldInfo[];
			GetFields(bindingAttr: System.Reflection.BindingFlags): System.Reflection.FieldInfo[];
			GetInterface(name: string): System.Type;
			GetInterface(name: string, ignoreCase: boolean): System.Type;
			GetInterfaces(): System.Type[];
			FindInterfaces(filter: System.Reflection.TypeFilter, filterCriteria: any): System.Type[];
			GetEvent(name: string): System.Reflection.EventInfo;
			GetEvent(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.EventInfo;
			GetEvents(): System.Reflection.EventInfo[];
			GetEvents(bindingAttr: System.Reflection.BindingFlags): System.Reflection.EventInfo[];
			GetProperty(name: string, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, returnType: System.Type, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.PropertyInfo;
			GetProperty(name: string, returnType: System.Type, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.PropertyInfo;
			GetProperty(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.PropertyInfo;
			GetProperty(name: string, returnType: System.Type, types: System.Type[]): System.Reflection.PropertyInfo;
			GetProperty(name: string, types: System.Type[]): System.Reflection.PropertyInfo;
			GetProperty(name: string, returnType: System.Type): System.Reflection.PropertyInfo;
			GetProperty(name: string): System.Reflection.PropertyInfo;
			GetProperties(bindingAttr: System.Reflection.BindingFlags): System.Reflection.PropertyInfo[];
			GetProperties(): System.Reflection.PropertyInfo[];
			GetNestedTypes(): System.Type[];
			GetNestedTypes(bindingAttr: System.Reflection.BindingFlags): System.Type[];
			GetNestedType(name: string): System.Type;
			GetNestedType(name: string, bindingAttr: System.Reflection.BindingFlags): System.Type;
			GetMember(name: string): System.Reflection.MemberInfo[];
			GetMember(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.MemberInfo[];
			GetMember(name: string, type: System.Reflection.MemberTypes, bindingAttr: System.Reflection.BindingFlags): System.Reflection.MemberInfo[];
			GetMembers(): System.Reflection.MemberInfo[];
			GetMembers(bindingAttr: System.Reflection.BindingFlags): System.Reflection.MemberInfo[];
			GetDefaultMembers(): System.Reflection.MemberInfo[];
			FindMembers(memberType: System.Reflection.MemberTypes, bindingAttr: System.Reflection.BindingFlags, filter: System.Reflection.MemberFilter, filterCriteria: any): System.Reflection.MemberInfo[];
			GetGenericParameterConstraints(): System.Type[];
			MakeGenericType(typeArguments: System.Type[]): System.Type;
			GetElementType(): System.Type;
			GetGenericArguments(): System.Type[];
			GetGenericTypeDefinition(): System.Type;
			GetEnumNames(): string[];
			GetEnumValues(): System.Array;
			GetEnumUnderlyingType(): System.Type;
			IsEnumDefined(value: any): boolean;
			GetEnumName(value: any): string;
			IsSubclassOf(c: System.Type): boolean;
			IsInstanceOfType(o: any): boolean;
			IsAssignableFrom(c: System.Type): boolean;
			IsEquivalentTo(other: System.Type): boolean;
			/**inherited method */
			Equals(o: any): boolean;
			Equals(o: System.Type): boolean;
			GetInterfaceMap(interfaceType: System.Type): System.Reflection.InterfaceMapping;
			/**extension method */
			GetRuntimeProperties(): any;
			/**extension method */
			GetRuntimeEvents(): any;
			/**extension method */
			GetRuntimeMethods(): any;
			/**extension method */
			GetRuntimeFields(): any;
			/**extension method */
			GetRuntimeProperty(name: string): System.Reflection.PropertyInfo;
			/**extension method */
			GetRuntimeEvent(name: string): System.Reflection.EventInfo;
			/**extension method */
			GetRuntimeMethod(name: string, parameters: System.Type[]): System.Reflection.MethodInfo;
			/**extension method */
			GetRuntimeField(name: string): System.Reflection.FieldInfo;
			/**extension method */
			GetTypeInfo(): System.Reflection.TypeInfo;
			/**extension method */
			GetFriendlyName(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TypedReference {
			static MakeTypedReference(target: any, flds: System.Reflection.FieldInfo[]): System.TypedReference;
			static ToObject(value: System.TypedReference): any;
			static GetTargetType(value: System.TypedReference): System.Type;
			static TargetTypeToken(value: System.TypedReference): System.RuntimeTypeHandle;
			static SetTypedReference(target: System.TypedReference, value: any): void;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(o: any): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UInt16 {
			static MaxValue: number;
			static MinValue: number;
			static Parse(s: string): number;
			static Parse(s: string, style: any): number;
			static Parse(s: string, provider: System.IFormatProvider): number;
			static Parse(s: string, style: any, provider: System.IFormatProvider): number;
			static TryParse(s: string, result: any): boolean;
			static TryParse(s: string, style: any, provider: System.IFormatProvider, result: any): boolean;
			CompareTo(value: any): number;
			CompareTo(value: number): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: number): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			ToString(provider: System.IFormatProvider): string;
			ToString(format: string): string;
			ToString(format: string, provider: System.IFormatProvider): string;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UInt32 {
			static MaxValue: number;
			static MinValue: number;
			static Parse(s: string): number;
			static Parse(s: string, style: any): number;
			static Parse(s: string, provider: System.IFormatProvider): number;
			static Parse(s: string, style: any, provider: System.IFormatProvider): number;
			static TryParse(s: string, result: any): boolean;
			static TryParse(s: string, style: any, provider: System.IFormatProvider, result: any): boolean;
			CompareTo(value: any): number;
			CompareTo(value: number): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: number): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			ToString(provider: System.IFormatProvider): string;
			ToString(format: string): string;
			ToString(format: string, provider: System.IFormatProvider): string;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UInt64 {
			static MaxValue: number;
			static MinValue: number;
			static Parse(s: string): number;
			static Parse(s: string, style: any): number;
			static Parse(s: string, provider: System.IFormatProvider): number;
			static Parse(s: string, style: any, provider: System.IFormatProvider): number;
			static TryParse(s: string, result: any): boolean;
			static TryParse(s: string, style: any, provider: System.IFormatProvider, result: any): boolean;
			CompareTo(value: any): number;
			CompareTo(value: number): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: number): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			ToString(provider: System.IFormatProvider): string;
			ToString(format: string): string;
			ToString(format: string, provider: System.IFormatProvider): string;
			GetTypeCode(): System.TypeCode;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnhandledExceptionEventArgs extends System.EventArgs {
			get ExceptionObject(): any;
			get IsTerminating(): boolean;
			constructor(exception: any, isTerminating: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnhandledExceptionEventHandler extends Function {
		}
		export class Version extends System.Object {
			get Major(): number;
			get Minor(): number;
			get Build(): number;
			get Revision(): number;
			get MajorRevision(): number;
			get MinorRevision(): number;
			constructor(major: number, minor: number, build: number, revision: number);
			constructor(major: number, minor: number, build: number);
			constructor(major: number, minor: number);
			constructor(version: string);
			constructor();
			static Parse(input: string): System.Version;
			static TryParse(input: string, result: any): boolean;
			static op_Equality(v1: System.Version, v2: System.Version): boolean;
			static op_Inequality(v1: System.Version, v2: System.Version): boolean;
			static op_LessThan(v1: System.Version, v2: System.Version): boolean;
			static op_LessThanOrEqual(v1: System.Version, v2: System.Version): boolean;
			static op_GreaterThan(v1: System.Version, v2: System.Version): boolean;
			static op_GreaterThanOrEqual(v1: System.Version, v2: System.Version): boolean;
			Clone(): any;
			CompareTo(version: any): number;
			CompareTo(value: System.Version): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: System.Version): boolean;
			/**inherited method */
			ToString(): string;
			ToString(fieldCount: number): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Environment extends System.Object {
			static get CommandLine(): string;
			static get CurrentDirectory(): string;
			static set CurrentDirectory(value: string);
			static get CurrentManagedThreadId(): number;
			static get ExitCode(): number;
			static set ExitCode(value: number);
			static get HasShutdownStarted(): boolean;
			static get MachineName(): string;
			static get NewLine(): string;
			static get OSVersion(): System.OperatingSystem;
			static get StackTrace(): string;
			static get SystemDirectory(): string;
			static get TickCount(): number;
			static get UserDomainName(): string;
			static get UserInteractive(): boolean;
			static get UserName(): string;
			static get Version(): System.Version;
			static get WorkingSet(): number;
			static get Is64BitOperatingSystem(): boolean;
			static get SystemPageSize(): number;
			static get Is64BitProcess(): boolean;
			static get ProcessorCount(): number;
			static Exit(exitCode: number): void;
			static ExpandEnvironmentVariables(name: string): string;
			static GetCommandLineArgs(): string[];
			static GetEnvironmentVariable(variable: string): string;
			static GetEnvironmentVariable(variable: string, target: System.EnvironmentVariableTarget): string;
			static GetEnvironmentVariables(): any;
			static GetEnvironmentVariables(target: System.EnvironmentVariableTarget): any;
			static GetFolderPath(folder: System.Environment.SpecialFolder): string;
			static GetFolderPath(folder: System.Environment.SpecialFolder, option: System.Environment.SpecialFolderOption): string;
			static GetLogicalDrives(): string[];
			static SetEnvironmentVariable(variable: string, value: string): void;
			static SetEnvironmentVariable(variable: string, value: string, target: System.EnvironmentVariableTarget): void;
			static FailFast(message: string): void;
			static FailFast(message: string, exception: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ActivationContext extends System.Object {
			get Form(): System.ActivationContext.ContextForm;
			get Identity(): System.ApplicationIdentity;
			get ApplicationManifestBytes(): Uint8Array;
			get DeploymentManifestBytes(): Uint8Array;
			static CreatePartialActivationContext(identity: System.ApplicationIdentity): System.ActivationContext;
			static CreatePartialActivationContext(identity: System.ApplicationIdentity, manifestPaths: string[]): System.ActivationContext;
			Dispose(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ApplicationIdentity extends System.Object {
			get CodeBase(): string;
			get FullName(): string;
			constructor(applicationIdentityFullName: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ArgIterator {
			constructor(arglist: System.RuntimeArgumentHandle);
			constructor(arglist: System.RuntimeArgumentHandle, ptr: any);
			End(): void;
			/**inherited method */
			Equals(o: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			GetNextArg(): System.TypedReference;
			GetNextArg(rth: System.RuntimeTypeHandle): System.TypedReference;
			GetNextArgType(): System.RuntimeTypeHandle;
			GetRemainingCount(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyLoadEventArgs extends System.EventArgs {
			get LoadedAssembly(): System.Reflection.Assembly;
			constructor(loadedAssembly: System.Reflection.Assembly);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyLoadEventHandler extends Function {
		}
		export class Console extends System.Object {
			static get Error(): System.IO.TextWriter;
			static get Out(): System.IO.TextWriter;
			static get In(): System.IO.TextReader;
			static get InputEncoding(): System.Text.Encoding;
			static set InputEncoding(value: System.Text.Encoding);
			static get OutputEncoding(): System.Text.Encoding;
			static set OutputEncoding(value: System.Text.Encoding);
			static get BackgroundColor(): System.ConsoleColor;
			static set BackgroundColor(value: System.ConsoleColor);
			static get BufferHeight(): number;
			static set BufferHeight(value: number);
			static get BufferWidth(): number;
			static set BufferWidth(value: number);
			static get CapsLock(): boolean;
			static get CursorLeft(): number;
			static set CursorLeft(value: number);
			static get CursorTop(): number;
			static set CursorTop(value: number);
			static get CursorSize(): number;
			static set CursorSize(value: number);
			static get CursorVisible(): boolean;
			static set CursorVisible(value: boolean);
			static get ForegroundColor(): System.ConsoleColor;
			static set ForegroundColor(value: System.ConsoleColor);
			static get KeyAvailable(): boolean;
			static get LargestWindowHeight(): number;
			static get LargestWindowWidth(): number;
			static get NumberLock(): boolean;
			static get Title(): string;
			static set Title(value: string);
			static get TreatControlCAsInput(): boolean;
			static set TreatControlCAsInput(value: boolean);
			static get WindowHeight(): number;
			static set WindowHeight(value: number);
			static get WindowLeft(): number;
			static set WindowLeft(value: number);
			static get WindowTop(): number;
			static set WindowTop(value: number);
			static get WindowWidth(): number;
			static set WindowWidth(value: number);
			static get IsErrorRedirected(): boolean;
			static get IsOutputRedirected(): boolean;
			static get IsInputRedirected(): boolean;
			static OpenStandardError(): System.IO.Stream;
			static OpenStandardError(bufferSize: number): System.IO.Stream;
			static OpenStandardInput(): System.IO.Stream;
			static OpenStandardInput(bufferSize: number): System.IO.Stream;
			static OpenStandardOutput(): System.IO.Stream;
			static OpenStandardOutput(bufferSize: number): System.IO.Stream;
			static SetError(newError: System.IO.TextWriter): void;
			static SetIn(newIn: System.IO.TextReader): void;
			static SetOut(newOut: System.IO.TextWriter): void;
			static Write(value: boolean): void;
			static Write(value: string): void;
			static Write(buffer: string[]): void;
			static Write(value: System.Decimal): void;
			static Write(value: number): void;
			static Write(value: number): void;
			static Write(value: number): void;
			static Write(value: any): void;
			static Write(value: number): void;
			static Write(value: string): void;
			static Write(value: number): void;
			static Write(value: number): void;
			static Write(format: string, arg0: any): void;
			static Write(format: string, arg: any): void;
			static Write(buffer: string[], index: number, count: number): void;
			static Write(format: string, arg0: any, arg1: any): void;
			static Write(format: string, arg0: any, arg1: any, arg2: any): void;
			static Write(format: string, arg0: any, arg1: any, arg2: any, arg3: any): void;
			static WriteLine(): void;
			static WriteLine(value: boolean): void;
			static WriteLine(value: string): void;
			static WriteLine(buffer: string[]): void;
			static WriteLine(value: System.Decimal): void;
			static WriteLine(value: number): void;
			static WriteLine(value: number): void;
			static WriteLine(value: number): void;
			static WriteLine(value: any): void;
			static WriteLine(value: number): void;
			static WriteLine(value: string): void;
			static WriteLine(value: number): void;
			static WriteLine(value: number): void;
			static WriteLine(format: string, arg0: any): void;
			static WriteLine(format: string, arg: any): void;
			static WriteLine(buffer: string[], index: number, count: number): void;
			static WriteLine(format: string, arg0: any, arg1: any): void;
			static WriteLine(format: string, arg0: any, arg1: any, arg2: any): void;
			static WriteLine(format: string, arg0: any, arg1: any, arg2: any, arg3: any): void;
			static Read(): number;
			static ReadLine(): string;
			static Beep(): void;
			static Beep(frequency: number, duration: number): void;
			static Clear(): void;
			static MoveBufferArea(sourceLeft: number, sourceTop: number, sourceWidth: number, sourceHeight: number, targetLeft: number, targetTop: number): void;
			static MoveBufferArea(sourceLeft: number, sourceTop: number, sourceWidth: number, sourceHeight: number, targetLeft: number, targetTop: number, sourceChar: string, sourceForeColor: System.ConsoleColor, sourceBackColor: System.ConsoleColor): void;
			static ReadKey(): System.ConsoleKeyInfo;
			static ReadKey(intercept: boolean): System.ConsoleKeyInfo;
			static ResetColor(): void;
			static SetBufferSize(width: number, height: number): void;
			static SetCursorPosition(left: number, top: number): void;
			static SetWindowPosition(left: number, top: number): void;
			static SetWindowSize(width: number, height: number): void;
			static add_CancelKeyPress(value: System.ConsoleCancelEventHandler): void;
			static remove_CancelKeyPress(value: System.ConsoleCancelEventHandler): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Delegate extends System.Object {
			get Method(): System.Reflection.MethodInfo;
			get Target(): any;
			static CreateDelegate(type: System.Type, firstArgument: any, method: System.Reflection.MethodInfo, throwOnBindFailure: boolean): System.Delegate;
			static CreateDelegate(type: System.Type, firstArgument: any, method: System.Reflection.MethodInfo): System.Delegate;
			static CreateDelegate(type: System.Type, method: System.Reflection.MethodInfo, throwOnBindFailure: boolean): System.Delegate;
			static CreateDelegate(type: System.Type, method: System.Reflection.MethodInfo): System.Delegate;
			static CreateDelegate(type: System.Type, target: any, method: string): System.Delegate;
			static CreateDelegate(type: System.Type, target: System.Type, method: string, ignoreCase: boolean, throwOnBindFailure: boolean): System.Delegate;
			static CreateDelegate(type: System.Type, target: System.Type, method: string): System.Delegate;
			static CreateDelegate(type: System.Type, target: System.Type, method: string, ignoreCase: boolean): System.Delegate;
			static CreateDelegate(type: System.Type, target: any, method: string, ignoreCase: boolean, throwOnBindFailure: boolean): System.Delegate;
			static CreateDelegate(type: System.Type, target: any, method: string, ignoreCase: boolean): System.Delegate;
			static Combine(a: System.Delegate, b: System.Delegate): System.Delegate;
			static Combine(delegates: System.Delegate[]): System.Delegate;
			static Remove(source: System.Delegate, value: System.Delegate): System.Delegate;
			static RemoveAll(source: System.Delegate, value: System.Delegate): System.Delegate;
			static op_Equality(d1: System.Delegate, d2: System.Delegate): boolean;
			static op_Inequality(d1: System.Delegate, d2: System.Delegate): boolean;
			DynamicInvoke(args: any): any;
			Clone(): any;
			GetObjectData(info: any, context: any): void;
			GetInvocationList(): System.Delegate[];
			/**extension method */
			GetMethodInfo(): System.Reflection.MethodInfo;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum EnvironmentVariableTarget { Process = 0, User = 1, Machine = 2, }
		export class IntPtr {
			static Zero: System.IntPtr;
			static get Size(): number;
			constructor(value: number);
			constructor(value: number);
			constructor(value: any);
			static op_Equality(value1: System.IntPtr, value2: System.IntPtr): boolean;
			static op_Inequality(value1: System.IntPtr, value2: System.IntPtr): boolean;
			static op_Explicit(value: number): System.IntPtr;
			static op_Explicit(value: number): System.IntPtr;
			static op_Explicit(value: any): System.IntPtr;
			static op_Explicit(value: System.IntPtr): number;
			static op_Explicit(value: System.IntPtr): number;
			static op_Explicit(value: System.IntPtr): any;
			static Add(pointer: System.IntPtr, offset: number): System.IntPtr;
			static Subtract(pointer: System.IntPtr, offset: number): System.IntPtr;
			static op_Addition(pointer: System.IntPtr, offset: number): System.IntPtr;
			static op_Subtraction(pointer: System.IntPtr, offset: number): System.IntPtr;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			ToInt32(): number;
			ToInt64(): number;
			ToPointer(): any;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MarshalByRefObject extends System.Object {
			CreateObjRef(requestedType: System.Type): any;
			GetLifetimeService(): any;
			InitializeLifetimeService(): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ModuleHandle {
			static EmptyHandle: System.ModuleHandle;
			get MDStreamVersion(): number;
			static op_Equality(left: System.ModuleHandle, right: System.ModuleHandle): boolean;
			static op_Inequality(left: System.ModuleHandle, right: System.ModuleHandle): boolean;
			ResolveFieldHandle(fieldToken: number): System.RuntimeFieldHandle;
			ResolveFieldHandle(fieldToken: number, typeInstantiationContext: System.RuntimeTypeHandle[], methodInstantiationContext: System.RuntimeTypeHandle[]): System.RuntimeFieldHandle;
			ResolveMethodHandle(methodToken: number): System.RuntimeMethodHandle;
			ResolveMethodHandle(methodToken: number, typeInstantiationContext: System.RuntimeTypeHandle[], methodInstantiationContext: System.RuntimeTypeHandle[]): System.RuntimeMethodHandle;
			ResolveTypeHandle(typeToken: number): System.RuntimeTypeHandle;
			ResolveTypeHandle(typeToken: number, typeInstantiationContext: System.RuntimeTypeHandle[], methodInstantiationContext: System.RuntimeTypeHandle[]): System.RuntimeTypeHandle;
			GetRuntimeFieldHandleFromMetadataToken(fieldToken: number): System.RuntimeFieldHandle;
			GetRuntimeMethodHandleFromMetadataToken(methodToken: number): System.RuntimeMethodHandle;
			GetRuntimeTypeHandleFromMetadataToken(typeToken: number): System.RuntimeTypeHandle;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(handle: System.ModuleHandle): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MulticastDelegate extends System.Delegate {
			static op_Equality(d1: System.MulticastDelegate, d2: System.MulticastDelegate): boolean;
			static op_Inequality(d1: System.MulticastDelegate, d2: System.MulticastDelegate): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Nullable extends System.Object {
			/**inherited method */
			Equals(obj: any): boolean;
			static GetUnderlyingType(nullableType: System.Type): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Nullable$1 {
			get HasValue(): boolean;
			get Value(): any;
			constructor(value: any);
			static op_Implicit(value: any): System.Nullable$1;
			static op_Explicit(value: System.Nullable$1): any;
			/**inherited method */
			Equals(other: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			GetValueOrDefault(): any;
			GetValueOrDefault(defaultValue: any): any;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Object {
			constructor();
			static ReferenceEquals(objA: any, objB: any): boolean;
			Equals(obj: any): boolean;
			static Equals(objA: any, objB: any): boolean;
			GetHashCode(): number;
			GetType(): System.Type;
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class OperatingSystem extends System.Object {
			get Platform(): System.PlatformID;
			get Version(): System.Version;
			get ServicePack(): string;
			get VersionString(): string;
			constructor(platform: System.PlatformID, version: System.Version);
			Clone(): any;
			GetObjectData(info: any, context: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum PlatformID { Win32S = 0, Win32Windows = 1, Win32NT = 2, WinCE = 3, Unix = 4, Xbox = 5, MacOSX = 6, }
		export class ResolveEventArgs extends System.EventArgs {
			get Name(): string;
			get RequestingAssembly(): System.Reflection.Assembly;
			constructor(name: string);
			constructor(name: string, requestingAssembly: System.Reflection.Assembly);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ResolveEventHandler extends Function {
		}
		export class RuntimeArgumentHandle {
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RuntimeFieldHandle {
			get Value(): System.IntPtr;
			static op_Equality(left: System.RuntimeFieldHandle, right: System.RuntimeFieldHandle): boolean;
			static op_Inequality(left: System.RuntimeFieldHandle, right: System.RuntimeFieldHandle): boolean;
			GetObjectData(info: any, context: any): void;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(handle: System.RuntimeFieldHandle): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RuntimeMethodHandle {
			get Value(): System.IntPtr;
			static op_Equality(left: System.RuntimeMethodHandle, right: System.RuntimeMethodHandle): boolean;
			static op_Inequality(left: System.RuntimeMethodHandle, right: System.RuntimeMethodHandle): boolean;
			GetObjectData(info: any, context: any): void;
			GetFunctionPointer(): System.IntPtr;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(handle: System.RuntimeMethodHandle): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RuntimeTypeHandle {
			get Value(): System.IntPtr;
			static op_Equality(left: System.RuntimeTypeHandle, right: any): boolean;
			static op_Equality(left: any, right: System.RuntimeTypeHandle): boolean;
			static op_Inequality(left: System.RuntimeTypeHandle, right: any): boolean;
			static op_Inequality(left: any, right: System.RuntimeTypeHandle): boolean;
			GetObjectData(info: any, context: any): void;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(handle: System.RuntimeTypeHandle): boolean;
			/**inherited method */
			GetHashCode(): number;
			GetModuleHandle(): System.ModuleHandle;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum StringComparison { CurrentCulture = 0, CurrentCultureIgnoreCase = 1, InvariantCulture = 2, InvariantCultureIgnoreCase = 3, Ordinal = 4, OrdinalIgnoreCase = 5, }
		export class TimeZone extends System.Object {
			static get CurrentTimeZone(): System.TimeZone;
			get DaylightName(): string;
			get StandardName(): string;
			GetDaylightChanges(year: number): any;
			GetUtcOffset(time: System.DateTime): System.TimeSpan;
			IsDaylightSavingTime(time: System.DateTime): boolean;
			static IsDaylightSavingTime(time: System.DateTime, daylightTimes: any): boolean;
			ToLocalTime(time: System.DateTime): System.DateTime;
			ToUniversalTime(time: System.DateTime): System.DateTime;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum TypeCode { Empty = 0, Object = 1, DBNull = 2, Boolean = 3, Char = 4, SByte = 5, Byte = 6, Int16 = 7, UInt16 = 8, Int32 = 9, UInt32 = 10, Int64 = 11, UInt64 = 12, Single = 13, Double = 14, Decimal = 15, DateTime = 16, String = 18, }
		export class UIntPtr {
			static Zero: System.UIntPtr;
			static get Size(): number;
			constructor(value: number);
			constructor(value: number);
			constructor(value: any);
			static op_Equality(value1: System.UIntPtr, value2: System.UIntPtr): boolean;
			static op_Inequality(value1: System.UIntPtr, value2: System.UIntPtr): boolean;
			static op_Explicit(value: System.UIntPtr): number;
			static op_Explicit(value: System.UIntPtr): number;
			static op_Explicit(value: number): System.UIntPtr;
			static op_Explicit(value: any): System.UIntPtr;
			static op_Explicit(value: System.UIntPtr): any;
			static op_Explicit(value: number): System.UIntPtr;
			static Add(pointer: System.UIntPtr, offset: number): System.UIntPtr;
			static Subtract(pointer: System.UIntPtr, offset: number): System.UIntPtr;
			static op_Addition(pointer: System.UIntPtr, offset: number): System.UIntPtr;
			static op_Subtraction(pointer: System.UIntPtr, offset: number): System.UIntPtr;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			ToUInt32(): number;
			ToUInt64(): number;
			ToPointer(): any;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Void {
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WeakReference extends System.Object {
			get IsAlive(): boolean;
			get Target(): any;
			set Target(value: any);
			get TrackResurrection(): boolean;
			constructor(target: any);
			constructor(target: any, trackResurrection: boolean);
			GetObjectData(info: any, context: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WeakReference$1 extends System.Object {
			constructor(target: any);
			constructor(target: any, trackResurrection: boolean);
			GetObjectData(info: any, context: any): void;
			SetTarget(target: any): void;
			TryGetTarget(target: any): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Action$9 extends Function {
		}
		export class Action$10 extends Function {
		}
		export class Action$11 extends Function {
		}
		export class Action$12 extends Function {
		}
		export class Action$13 extends Function {
		}
		export class Action$14 extends Function {
		}
		export class Action$15 extends Function {
		}
		export class Action$16 extends Function {
		}
		export class Func$10 extends Function {
		}
		export class Func$11 extends Function {
		}
		export class Func$12 extends Function {
		}
		export class Func$13 extends Function {
		}
		export class Func$14 extends Function {
		}
		export class Func$15 extends Function {
		}
		export class Func$16 extends Function {
		}
		export class Func$17 extends Function {
		}
		export class UriBuilder extends System.Object {
			get Fragment(): string;
			set Fragment(value: string);
			get Host(): string;
			set Host(value: string);
			get Password(): string;
			set Password(value: string);
			get Path(): string;
			set Path(value: string);
			get Port(): number;
			set Port(value: number);
			get Query(): string;
			set Query(value: string);
			get Scheme(): string;
			set Scheme(value: string);
			get Uri(): System.Uri;
			get UserName(): string;
			set UserName(value: string);
			constructor();
			constructor(uri: string);
			constructor(uri: System.Uri);
			constructor(schemeName: string, hostName: string);
			constructor(scheme: string, host: string, portNumber: number);
			constructor(scheme: string, host: string, port: number, pathValue: string);
			constructor(scheme: string, host: string, port: number, path: string, extraValue: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum GenericUriParserOptions { Default = 0, GenericAuthority = 1, AllowEmptyAuthority = 2, NoUserInfo = 4, NoPort = 8, NoQuery = 16, NoFragment = 32, DontConvertPathBackslashes = 64, DontCompressPath = 128, DontUnescapePathDotsAndSlashes = 256, Idn = 512, IriParsing = 1024, }
		export class GenericUriParser extends System.UriParser {
			constructor(options: System.GenericUriParserOptions);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Uri extends System.Object {
			static UriSchemeFile: string;
			static UriSchemeFtp: string;
			static UriSchemeGopher: string;
			static UriSchemeHttp: string;
			static UriSchemeHttps: string;
			static UriSchemeMailto: string;
			static UriSchemeNews: string;
			static UriSchemeNntp: string;
			static UriSchemeNetTcp: string;
			static UriSchemeNetPipe: string;
			static SchemeDelimiter: string;
			get AbsolutePath(): string;
			get AbsoluteUri(): string;
			get LocalPath(): string;
			get Authority(): string;
			get HostNameType(): System.UriHostNameType;
			get IsDefaultPort(): boolean;
			get IsFile(): boolean;
			get IsLoopback(): boolean;
			get PathAndQuery(): string;
			get Segments(): string[];
			get IsUnc(): boolean;
			get Host(): string;
			get Port(): number;
			get Query(): string;
			get Fragment(): string;
			get Scheme(): string;
			get OriginalString(): string;
			get DnsSafeHost(): string;
			get IdnHost(): string;
			get IsAbsoluteUri(): boolean;
			get UserEscaped(): boolean;
			get UserInfo(): string;
			constructor(uriString: string);
			constructor(uriString: string, dontEscape: boolean);
			constructor(baseUri: System.Uri, relativeUri: string, dontEscape: boolean);
			constructor(uriString: string, uriKind: System.UriKind);
			constructor(baseUri: System.Uri, relativeUri: string);
			constructor(baseUri: System.Uri, relativeUri: System.Uri);
			static CheckHostName(name: string): System.UriHostNameType;
			static HexEscape(character: string): string;
			static HexUnescape(pattern: string, index: any): string;
			static IsHexEncoding(pattern: string, index: number): boolean;
			static CheckSchemeName(schemeName: string): boolean;
			static IsHexDigit(character: string): boolean;
			static FromHex(digit: string): number;
			static op_Equality(uri1: System.Uri, uri2: System.Uri): boolean;
			static op_Inequality(uri1: System.Uri, uri2: System.Uri): boolean;
			static TryCreate(uriString: string, uriKind: System.UriKind, result: any): boolean;
			static TryCreate(baseUri: System.Uri, relativeUri: string, result: any): boolean;
			static TryCreate(baseUri: System.Uri, relativeUri: System.Uri, result: any): boolean;
			static Compare(uri1: System.Uri, uri2: System.Uri, partsToCompare: System.UriComponents, compareFormat: System.UriFormat, comparisonType: System.StringComparison): number;
			static IsWellFormedUriString(uriString: string, uriKind: System.UriKind): boolean;
			static UnescapeDataString(stringToUnescape: string): string;
			static EscapeUriString(stringToEscape: string): string;
			static EscapeDataString(stringToEscape: string): string;
			GetLeftPart(part: System.UriPartial): string;
			MakeRelativeUri(uri: System.Uri): System.Uri;
			/**[Obsolete]--"The method has been deprecated. Please use MakeRelativeUri(Uri uri). http://go.microsoft.com/fwlink/?linkid=14202" */
			MakeRelative(toUri: System.Uri): string;
			GetComponents(components: System.UriComponents, format: System.UriFormat): string;
			IsWellFormedOriginalString(): boolean;
			IsBaseOf(uri: System.Uri): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum UriPartial { Scheme = 0, Authority = 1, Path = 2, Query = 3, }
		export enum UriKind { RelativeOrAbsolute = 0, Absolute = 1, Relative = 2, }
		export enum UriComponents { Scheme = 1, UserInfo = 2, Host = 4, Port = 8, Path = 16, Query = 32, Fragment = 64, StrongPort = 128, NormalizedHost = 256, KeepDelimiter = 1073741824, SerializationInfoString = -2147483648, AbsoluteUri = 127, HostAndPort = 132, StrongAuthority = 134, SchemeAndServer = 13, HttpRequestUrl = 61, PathAndQuery = 48, }
		export enum UriFormat { UriEscaped = 1, Unescaped = 2, SafeUnescaped = 3, }
		export enum UriIdnScope { None = 0, AllExceptIntranet = 1, All = 2, }
		export enum UriHostNameType { Unknown = 0, Basic = 1, Dns = 2, IPv4 = 3, IPv6 = 4, }
		export class HttpStyleUriParser extends System.UriParser {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FtpStyleUriParser extends System.UriParser {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FileStyleUriParser extends System.UriParser {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NewsStyleUriParser extends System.UriParser {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GopherStyleUriParser extends System.UriParser {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LdapStyleUriParser extends System.UriParser {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetPipeStyleUriParser extends System.UriParser {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetTcpStyleUriParser extends System.UriParser {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UriParser extends System.Object {
			static Register(uriParser: System.UriParser, schemeName: string, defaultPort: number): void;
			static IsKnownScheme(schemeName: string): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UriTypeConverter {
			constructor();
			/**inherited method */
			CanConvertFrom(context: any, sourceType: System.Type): boolean;
			/**inherited method */
			CanConvertFrom(sourceType: System.Type): boolean;
			/**inherited method */
			CanConvertTo(context: any, destinationType: System.Type): boolean;
			/**inherited method */
			CanConvertTo(destinationType: System.Type): boolean;
			/**inherited method */
			ConvertFrom(context: any, culture: any, value: any): any;
			/**inherited method */
			ConvertFrom(value: any): any;
			/**inherited method */
			ConvertTo(context: any, culture: any, value: any, destinationType: System.Type): any;
			/**inherited method */
			ConvertTo(value: any, destinationType: System.Type): any;
			/**inherited method */
			IsValid(context: any, value: any): boolean;
			/**inherited method */
			IsValid(value: any): boolean;
			/**inherited method */
			ConvertFromInvariantString(text: string): any;
			/**inherited method */
			ConvertFromInvariantString(context: any, text: string): any;
			/**inherited method */
			ConvertFromString(text: string): any;
			/**inherited method */
			ConvertFromString(context: any, text: string): any;
			/**inherited method */
			ConvertFromString(context: any, culture: any, text: string): any;
			/**inherited method */
			ConvertToInvariantString(value: any): string;
			/**inherited method */
			ConvertToInvariantString(context: any, value: any): string;
			/**inherited method */
			ConvertToString(value: any): string;
			/**inherited method */
			ConvertToString(context: any, value: any): string;
			/**inherited method */
			ConvertToString(context: any, culture: any, value: any): string;
			/**inherited method */
			CreateInstance(propertyValues: any): any;
			/**inherited method */
			CreateInstance(context: any, propertyValues: any): any;
			/**inherited method */
			GetCreateInstanceSupported(): boolean;
			/**inherited method */
			GetCreateInstanceSupported(context: any): boolean;
			/**inherited method */
			GetProperties(value: any): any;
			/**inherited method */
			GetProperties(context: any, value: any): any;
			/**inherited method */
			GetProperties(context: any, value: any, attributes: System.Attribute[]): any;
			/**inherited method */
			GetPropertiesSupported(): boolean;
			/**inherited method */
			GetPropertiesSupported(context: any): boolean;
			/**inherited method */
			GetStandardValues(): any;
			/**inherited method */
			GetStandardValues(context: any): any;
			/**inherited method */
			GetStandardValuesExclusive(): boolean;
			/**inherited method */
			GetStandardValuesExclusive(context: any): boolean;
			/**inherited method */
			GetStandardValuesSupported(): boolean;
			/**inherited method */
			GetStandardValuesSupported(context: any): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StringNormalizationExtensions extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StringBuilderExt extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.TimeZoneInfo {
		export class AdjustmentRule extends System.Object {
			get DateStart(): System.DateTime;
			get DateEnd(): System.DateTime;
			get DaylightDelta(): System.TimeSpan;
			get DaylightTransitionStart(): System.TimeZoneInfo.TransitionTime;
			get DaylightTransitionEnd(): System.TimeZoneInfo.TransitionTime;
			static CreateAdjustmentRule(dateStart: System.DateTime, dateEnd: System.DateTime, daylightDelta: System.TimeSpan, daylightTransitionStart: System.TimeZoneInfo.TransitionTime, daylightTransitionEnd: System.TimeZoneInfo.TransitionTime): System.TimeZoneInfo.AdjustmentRule;
			Equals(other: System.TimeZoneInfo.AdjustmentRule): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TransitionTime {
			get TimeOfDay(): System.DateTime;
			get Month(): number;
			get Week(): number;
			get Day(): number;
			get DayOfWeek(): System.DayOfWeek;
			get IsFixedDateRule(): boolean;
			static op_Equality(t1: System.TimeZoneInfo.TransitionTime, t2: System.TimeZoneInfo.TransitionTime): boolean;
			static op_Inequality(t1: System.TimeZoneInfo.TransitionTime, t2: System.TimeZoneInfo.TransitionTime): boolean;
			static CreateFixedDateRule(timeOfDay: System.DateTime, month: number, day: number): System.TimeZoneInfo.TransitionTime;
			static CreateFloatingDateRule(timeOfDay: System.DateTime, month: number, week: number, dayOfWeek: System.DayOfWeek): System.TimeZoneInfo.TransitionTime;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: System.TimeZoneInfo.TransitionTime): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.Environment {
		export enum SpecialFolder { MyDocuments = 5, Desktop = 0, MyComputer = 17, Programs = 2, Personal = 5, Favorites = 6, Startup = 7, Recent = 8, SendTo = 9, StartMenu = 11, MyMusic = 13, DesktopDirectory = 16, Templates = 21, ApplicationData = 26, LocalApplicationData = 28, InternetCache = 32, Cookies = 33, History = 34, CommonApplicationData = 35, System = 37, ProgramFiles = 38, MyPictures = 39, CommonProgramFiles = 43, MyVideos = 14, NetworkShortcuts = 19, Fonts = 20, CommonStartMenu = 22, CommonPrograms = 23, CommonStartup = 24, CommonDesktopDirectory = 25, PrinterShortcuts = 27, Windows = 36, UserProfile = 40, SystemX86 = 41, ProgramFilesX86 = 42, CommonProgramFilesX86 = 44, CommonTemplates = 45, CommonDocuments = 46, CommonAdminTools = 47, AdminTools = 48, CommonMusic = 53, CommonPictures = 54, CommonVideos = 55, Resources = 56, LocalizedResources = 57, CommonOemLinks = 58, CDBurning = 59, }
		export enum SpecialFolderOption { None = 0, DoNotVerify = 16384, Create = 32768, }

	}
	export namespace System.ActivationContext {
		export enum ContextForm { Loose = 0, StoreBounded = 1, }

	}
	export namespace System.Text {
		export class ASCIIEncoding extends System.Text.Encoding {
			get IsSingleByte(): boolean;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Decoder extends System.Object {
			get Fallback(): System.Text.DecoderFallback;
			set Fallback(value: System.Text.DecoderFallback);
			get FallbackBuffer(): System.Text.DecoderFallbackBuffer;
			Reset(): void;
			GetCharCount(bytes: Uint8Array, index: number, count: number): number;
			GetCharCount(bytes: Uint8Array, index: number, count: number, flush: boolean): number;
			GetCharCount(bytes: any, count: number, flush: boolean): number;
			GetChars(bytes: Uint8Array, byteIndex: number, byteCount: number, chars: string[], charIndex: number): number;
			GetChars(bytes: Uint8Array, byteIndex: number, byteCount: number, chars: string[], charIndex: number, flush: boolean): number;
			GetChars(bytes: any, byteCount: number, chars: any, charCount: number, flush: boolean): number;
			Convert(bytes: Uint8Array, byteIndex: number, byteCount: number, chars: string[], charIndex: number, charCount: number, flush: boolean, bytesUsed: any, charsUsed: any, completed: any): void;
			Convert(bytes: any, byteCount: number, chars: any, charCount: number, flush: boolean, bytesUsed: any, charsUsed: any, completed: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DecoderExceptionFallback extends System.Text.DecoderFallback {
			get MaxCharCount(): number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DecoderExceptionFallbackBuffer extends System.Text.DecoderFallbackBuffer {
			get Remaining(): number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DecoderFallback extends System.Object {
			static get ReplacementFallback(): System.Text.DecoderFallback;
			static get ExceptionFallback(): System.Text.DecoderFallback;
			get MaxCharCount(): number;
			CreateFallbackBuffer(): System.Text.DecoderFallbackBuffer;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DecoderFallbackBuffer extends System.Object {
			get Remaining(): number;
			Fallback(bytesUnknown: Uint8Array, index: number): boolean;
			GetNextChar(): string;
			MovePrevious(): boolean;
			Reset(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DecoderReplacementFallback extends System.Text.DecoderFallback {
			get DefaultString(): string;
			get MaxCharCount(): number;
			constructor();
			constructor(replacement: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DecoderReplacementFallbackBuffer extends System.Text.DecoderFallbackBuffer {
			get Remaining(): number;
			constructor(fallback: System.Text.DecoderReplacementFallback);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Encoder extends System.Object {
			get Fallback(): System.Text.EncoderFallback;
			set Fallback(value: System.Text.EncoderFallback);
			get FallbackBuffer(): System.Text.EncoderFallbackBuffer;
			Reset(): void;
			GetByteCount(chars: string[], index: number, count: number, flush: boolean): number;
			GetByteCount(chars: any, count: number, flush: boolean): number;
			GetBytes(chars: string[], charIndex: number, charCount: number, bytes: Uint8Array, byteIndex: number, flush: boolean): number;
			GetBytes(chars: any, charCount: number, bytes: any, byteCount: number, flush: boolean): number;
			Convert(chars: string[], charIndex: number, charCount: number, bytes: Uint8Array, byteIndex: number, byteCount: number, flush: boolean, charsUsed: any, bytesUsed: any, completed: any): void;
			Convert(chars: any, charCount: number, bytes: any, byteCount: number, flush: boolean, charsUsed: any, bytesUsed: any, completed: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EncoderExceptionFallback extends System.Text.EncoderFallback {
			get MaxCharCount(): number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EncoderExceptionFallbackBuffer extends System.Text.EncoderFallbackBuffer {
			get Remaining(): number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EncoderFallback extends System.Object {
			static get ReplacementFallback(): System.Text.EncoderFallback;
			static get ExceptionFallback(): System.Text.EncoderFallback;
			get MaxCharCount(): number;
			CreateFallbackBuffer(): System.Text.EncoderFallbackBuffer;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EncoderFallbackBuffer extends System.Object {
			get Remaining(): number;
			Fallback(charUnknown: string, index: number): boolean;
			Fallback(charUnknownHigh: string, charUnknownLow: string, index: number): boolean;
			GetNextChar(): string;
			MovePrevious(): boolean;
			Reset(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EncoderReplacementFallback extends System.Text.EncoderFallback {
			get DefaultString(): string;
			get MaxCharCount(): number;
			constructor();
			constructor(replacement: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EncoderReplacementFallbackBuffer extends System.Text.EncoderFallbackBuffer {
			get Remaining(): number;
			constructor(fallback: System.Text.EncoderReplacementFallback);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Encoding extends System.Object {
			get BodyName(): string;
			get EncodingName(): string;
			get HeaderName(): string;
			get WebName(): string;
			get WindowsCodePage(): number;
			get IsBrowserDisplay(): boolean;
			get IsBrowserSave(): boolean;
			get IsMailNewsDisplay(): boolean;
			get IsMailNewsSave(): boolean;
			get IsSingleByte(): boolean;
			get EncoderFallback(): System.Text.EncoderFallback;
			set EncoderFallback(value: System.Text.EncoderFallback);
			get DecoderFallback(): System.Text.DecoderFallback;
			set DecoderFallback(value: System.Text.DecoderFallback);
			get IsReadOnly(): boolean;
			static get ASCII(): System.Text.Encoding;
			get CodePage(): number;
			static get Default(): System.Text.Encoding;
			static get Unicode(): System.Text.Encoding;
			static get BigEndianUnicode(): System.Text.Encoding;
			static get UTF7(): System.Text.Encoding;
			static get UTF8(): System.Text.Encoding;
			static get UTF32(): System.Text.Encoding;
			static Convert(srcEncoding: System.Text.Encoding, dstEncoding: System.Text.Encoding, bytes: Uint8Array): Uint8Array;
			static Convert(srcEncoding: System.Text.Encoding, dstEncoding: System.Text.Encoding, bytes: Uint8Array, index: number, count: number): Uint8Array;
			static RegisterProvider(provider: System.Text.EncodingProvider): void;
			static GetEncoding(codepage: number): System.Text.Encoding;
			static GetEncoding(codepage: number, encoderFallback: System.Text.EncoderFallback, decoderFallback: System.Text.DecoderFallback): System.Text.Encoding;
			static GetEncoding(name: string): System.Text.Encoding;
			static GetEncoding(name: string, encoderFallback: System.Text.EncoderFallback, decoderFallback: System.Text.DecoderFallback): System.Text.Encoding;
			static GetEncodings(): System.Text.EncodingInfo[];
			GetPreamble(): Uint8Array;
			Clone(): any;
			GetByteCount(chars: string[]): number;
			GetByteCount(s: string): number;
			GetByteCount(chars: string[], index: number, count: number): number;
			GetByteCount(chars: any, count: number): number;
			GetBytes(chars: string[]): Uint8Array;
			GetBytes(chars: string[], index: number, count: number): Uint8Array;
			GetBytes(chars: string[], charIndex: number, charCount: number, bytes: Uint8Array, byteIndex: number): number;
			GetBytes(s: string): Uint8Array;
			GetBytes(s: string, charIndex: number, charCount: number, bytes: Uint8Array, byteIndex: number): number;
			GetBytes(chars: any, charCount: number, bytes: any, byteCount: number): number;
			GetCharCount(bytes: Uint8Array): number;
			GetCharCount(bytes: Uint8Array, index: number, count: number): number;
			GetCharCount(bytes: any, count: number): number;
			GetChars(bytes: Uint8Array): string[];
			GetChars(bytes: Uint8Array, index: number, count: number): string[];
			GetChars(bytes: Uint8Array, byteIndex: number, byteCount: number, chars: string[], charIndex: number): number;
			GetChars(bytes: any, byteCount: number, chars: any, charCount: number): number;
			GetString(bytes: any, byteCount: number): string;
			GetString(bytes: Uint8Array): string;
			GetString(bytes: Uint8Array, index: number, count: number): string;
			IsAlwaysNormalized(): boolean;
			IsAlwaysNormalized(form: System.Text.NormalizationForm): boolean;
			GetDecoder(): System.Text.Decoder;
			GetEncoder(): System.Text.Encoder;
			GetMaxByteCount(charCount: number): number;
			GetMaxCharCount(byteCount: number): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EncodingInfo extends System.Object {
			get CodePage(): number;
			get Name(): string;
			get DisplayName(): string;
			GetEncoding(): System.Text.Encoding;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EncodingProvider extends System.Object {
			constructor();
			GetEncoding(name: string): System.Text.Encoding;
			GetEncoding(codepage: number): System.Text.Encoding;
			GetEncoding(name: string, encoderFallback: System.Text.EncoderFallback, decoderFallback: System.Text.DecoderFallback): System.Text.Encoding;
			GetEncoding(codepage: number, encoderFallback: System.Text.EncoderFallback, decoderFallback: System.Text.DecoderFallback): System.Text.Encoding;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StringBuilder extends System.Object {
			get Capacity(): number;
			set Capacity(value: number);
			get MaxCapacity(): number;
			get Length(): number;
			set Length(value: number);
			get Chars(): string;
			set Chars(value: string);
			constructor();
			constructor(capacity: number);
			constructor(value: string);
			constructor(value: string, capacity: number);
			constructor(value: string, startIndex: number, length: number, capacity: number);
			constructor(capacity: number, maxCapacity: number);
			EnsureCapacity(capacity: number): number;
			/**inherited method */
			ToString(): string;
			ToString(startIndex: number, length: number): string;
			Clear(): System.Text.StringBuilder;
			Append(value: string, repeatCount: number): System.Text.StringBuilder;
			Append(value: string[], startIndex: number, charCount: number): System.Text.StringBuilder;
			Append(value: string): System.Text.StringBuilder;
			Append(value: string, startIndex: number, count: number): System.Text.StringBuilder;
			Append(value: boolean): System.Text.StringBuilder;
			Append(value: System.SByte): System.Text.StringBuilder;
			Append(value: number): System.Text.StringBuilder;
			Append(value: string): System.Text.StringBuilder;
			Append(value: number): System.Text.StringBuilder;
			Append(value: number): System.Text.StringBuilder;
			Append(value: number): System.Text.StringBuilder;
			Append(value: number): System.Text.StringBuilder;
			Append(value: number): System.Text.StringBuilder;
			Append(value: System.Decimal): System.Text.StringBuilder;
			Append(value: number): System.Text.StringBuilder;
			Append(value: number): System.Text.StringBuilder;
			Append(value: number): System.Text.StringBuilder;
			Append(value: any): System.Text.StringBuilder;
			Append(value: string[]): System.Text.StringBuilder;
			Append(value: any, valueCount: number): System.Text.StringBuilder;
			AppendLine(): System.Text.StringBuilder;
			AppendLine(value: string): System.Text.StringBuilder;
			CopyTo(sourceIndex: number, destination: string[], destinationIndex: number, count: number): void;
			Insert(index: number, value: string, count: number): System.Text.StringBuilder;
			Insert(index: number, value: string): System.Text.StringBuilder;
			Insert(index: number, value: boolean): System.Text.StringBuilder;
			Insert(index: number, value: System.SByte): System.Text.StringBuilder;
			Insert(index: number, value: number): System.Text.StringBuilder;
			Insert(index: number, value: number): System.Text.StringBuilder;
			Insert(index: number, value: string): System.Text.StringBuilder;
			Insert(index: number, value: string[]): System.Text.StringBuilder;
			Insert(index: number, value: string[], startIndex: number, charCount: number): System.Text.StringBuilder;
			Insert(index: number, value: number): System.Text.StringBuilder;
			Insert(index: number, value: number): System.Text.StringBuilder;
			Insert(index: number, value: number): System.Text.StringBuilder;
			Insert(index: number, value: number): System.Text.StringBuilder;
			Insert(index: number, value: System.Decimal): System.Text.StringBuilder;
			Insert(index: number, value: number): System.Text.StringBuilder;
			Insert(index: number, value: number): System.Text.StringBuilder;
			Insert(index: number, value: number): System.Text.StringBuilder;
			Insert(index: number, value: any): System.Text.StringBuilder;
			Remove(startIndex: number, length: number): System.Text.StringBuilder;
			AppendFormat(format: string, arg0: any): System.Text.StringBuilder;
			AppendFormat(format: string, arg0: any, arg1: any): System.Text.StringBuilder;
			AppendFormat(format: string, arg0: any, arg1: any, arg2: any): System.Text.StringBuilder;
			AppendFormat(format: string, args: any): System.Text.StringBuilder;
			AppendFormat(provider: System.IFormatProvider, format: string, arg0: any): System.Text.StringBuilder;
			AppendFormat(provider: System.IFormatProvider, format: string, arg0: any, arg1: any): System.Text.StringBuilder;
			AppendFormat(provider: System.IFormatProvider, format: string, arg0: any, arg1: any, arg2: any): System.Text.StringBuilder;
			AppendFormat(provider: System.IFormatProvider, format: string, args: any): System.Text.StringBuilder;
			Replace(oldValue: string, newValue: string): System.Text.StringBuilder;
			Replace(oldValue: string, newValue: string, startIndex: number, count: number): System.Text.StringBuilder;
			Replace(oldChar: string, newChar: string): System.Text.StringBuilder;
			Replace(oldChar: string, newChar: string, startIndex: number, count: number): System.Text.StringBuilder;
			Equals(sb: System.Text.StringBuilder): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**extension method */
			Clear(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnicodeEncoding extends System.Text.Encoding {
			static CharSize: number;
			constructor();
			constructor(bigEndian: boolean, byteOrderMark: boolean);
			constructor(bigEndian: boolean, byteOrderMark: boolean, throwOnInvalidBytes: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UTF32Encoding extends System.Text.Encoding {
			constructor();
			constructor(bigEndian: boolean, byteOrderMark: boolean);
			constructor(bigEndian: boolean, byteOrderMark: boolean, throwOnInvalidCharacters: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UTF7Encoding extends System.Text.Encoding {
			constructor();
			constructor(allowOptionals: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UTF8Encoding extends System.Text.Encoding {
			constructor();
			constructor(encoderShouldEmitUTF8Identifier: boolean);
			constructor(encoderShouldEmitUTF8Identifier: boolean, throwOnInvalidBytes: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum NormalizationForm { FormC = 1, FormD = 2, FormKC = 5, FormKD = 6, }

	}
	export namespace System.Reflection {
		export class CustomAttributeExtensions extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RuntimeReflectionExtensions extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyCopyrightAttribute extends System.Attribute {
			get Copyright(): string;
			constructor(copyright: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyTrademarkAttribute extends System.Attribute {
			get Trademark(): string;
			constructor(trademark: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyProductAttribute extends System.Attribute {
			get Product(): string;
			constructor(product: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyCompanyAttribute extends System.Attribute {
			get Company(): string;
			constructor(company: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyDescriptionAttribute extends System.Attribute {
			get Description(): string;
			constructor(description: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyTitleAttribute extends System.Attribute {
			get Title(): string;
			constructor(title: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyConfigurationAttribute extends System.Attribute {
			get Configuration(): string;
			constructor(configuration: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyDefaultAliasAttribute extends System.Attribute {
			get DefaultAlias(): string;
			constructor(defaultAlias: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyInformationalVersionAttribute extends System.Attribute {
			get InformationalVersion(): string;
			constructor(informationalVersion: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyFileVersionAttribute extends System.Attribute {
			get Version(): string;
			constructor(version: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyCultureAttribute extends System.Attribute {
			get Culture(): string;
			constructor(culture: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyVersionAttribute extends System.Attribute {
			get Version(): string;
			constructor(version: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyKeyFileAttribute extends System.Attribute {
			get KeyFile(): string;
			constructor(keyFile: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyDelaySignAttribute extends System.Attribute {
			get DelaySign(): boolean;
			constructor(delaySign: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyAlgorithmIdAttribute extends System.Attribute {
			get AlgorithmId(): number;
			constructor(algorithmId: any);
			constructor(algorithmId: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyFlagsAttribute extends System.Attribute {
			/**[Obsolete]--"This property has been deprecated. Please use AssemblyFlags instead. http://go.microsoft.com/fwlink/?linkid=14202" */
			get Flags(): number;
			get AssemblyFlags(): number;
			constructor(flags: number);
			constructor(assemblyFlags: number);
			constructor(assemblyFlags: System.Reflection.AssemblyNameFlags);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyMetadataAttribute extends System.Attribute {
			get Key(): string;
			get Value(): string;
			constructor(key: string, value: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblySignatureKeyAttribute extends System.Attribute {
			get PublicKey(): string;
			get Countersignature(): string;
			constructor(publicKey: string, countersignature: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyKeyNameAttribute extends System.Attribute {
			get KeyName(): string;
			constructor(keyName: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum AssemblyNameFlags { None = 0, PublicKey = 1, EnableJITcompileOptimizer = 16384, EnableJITcompileTracking = 32768, Retargetable = 256, }
		export enum AssemblyContentType { Default = 0, WindowsRuntime = 1, }
		export enum ProcessorArchitecture { None = 0, MSIL = 1, X86 = 2, IA64 = 3, Amd64 = 4, Arm = 5, }
		export class AssemblyNameProxy extends System.MarshalByRefObject {
			constructor();
			GetAssemblyName(assemblyFile: string): System.Reflection.AssemblyName;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Binder extends System.Object {
			BindToMethod(bindingAttr: System.Reflection.BindingFlags, match: System.Reflection.MethodBase[], args: any, modifiers: System.Reflection.ParameterModifier[], culture: any, names: string[], state: any): System.Reflection.MethodBase;
			BindToField(bindingAttr: System.Reflection.BindingFlags, match: System.Reflection.FieldInfo[], value: any, culture: any): System.Reflection.FieldInfo;
			SelectMethod(bindingAttr: System.Reflection.BindingFlags, match: System.Reflection.MethodBase[], types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.MethodBase;
			SelectProperty(bindingAttr: System.Reflection.BindingFlags, match: System.Reflection.PropertyInfo[], returnType: System.Type, indexes: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.PropertyInfo;
			ChangeType(value: any, type: System.Type, culture: any): any;
			ReorderArgumentArray(args: any, state: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum BindingFlags { Default = 0, IgnoreCase = 1, DeclaredOnly = 2, Instance = 4, Static = 8, Public = 16, NonPublic = 32, FlattenHierarchy = 64, InvokeMethod = 256, CreateInstance = 512, GetField = 1024, SetField = 2048, GetProperty = 4096, SetProperty = 8192, PutDispProperty = 16384, PutRefDispProperty = 32768, ExactBinding = 65536, SuppressChangeType = 131072, OptionalParamBinding = 262144, IgnoreReturn = 16777216, }
		export enum CallingConventions { Standard = 1, VarArgs = 2, Any = 3, HasThis = 32, ExplicitThis = 64, }
		export class DefaultMemberAttribute extends System.Attribute {
			get MemberName(): string;
			constructor(memberName: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum EventAttributes { None = 0, SpecialName = 512, ReservedMask = 1024, RTSpecialName = 1024, }
		export enum FieldAttributes { FieldAccessMask = 7, PrivateScope = 0, Private = 1, FamANDAssem = 2, Assembly = 3, Family = 4, FamORAssem = 5, Public = 6, Static = 16, InitOnly = 32, Literal = 64, NotSerialized = 128, SpecialName = 512, PinvokeImpl = 8192, ReservedMask = 38144, RTSpecialName = 1024, HasFieldMarshal = 4096, HasDefault = 32768, HasFieldRVA = 256, }
		export enum GenericParameterAttributes { None = 0, VarianceMask = 3, Covariant = 1, Contravariant = 2, SpecialConstraintMask = 28, ReferenceTypeConstraint = 4, NotNullableValueTypeConstraint = 8, DefaultConstructorConstraint = 16, }
		export interface ICustomAttributeProvider {
			GetCustomAttributes(attributeType: System.Type, inherit: boolean): any;
			GetCustomAttributes(inherit: boolean): any;
			IsDefined(attributeType: System.Type, inherit: boolean): boolean;
		}
		export class InterfaceMapping {
			TargetType: System.Type;
			InterfaceType: System.Type;
			TargetMethods: System.Reflection.MethodInfo[];
			InterfaceMethods: System.Reflection.MethodInfo[];
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class IntrospectionExtensions extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface IReflect {
			GetMethod(name: string, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.MethodInfo;
			GetMethod(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.MethodInfo;
			GetMethods(bindingAttr: System.Reflection.BindingFlags): System.Reflection.MethodInfo[];
			GetField(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.FieldInfo;
			GetFields(bindingAttr: System.Reflection.BindingFlags): System.Reflection.FieldInfo[];
			GetProperty(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.PropertyInfo;
			GetProperty(name: string, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, returnType: System.Type, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.PropertyInfo;
			GetProperties(bindingAttr: System.Reflection.BindingFlags): System.Reflection.PropertyInfo[];
			GetMember(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.MemberInfo[];
			GetMembers(bindingAttr: System.Reflection.BindingFlags): System.Reflection.MemberInfo[];
			InvokeMember(name: string, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, target: any, args: any, modifiers: System.Reflection.ParameterModifier[], culture: any, namedParameters: string[]): any;
		}
		export interface IReflectableType {
			GetTypeInfo(): System.Reflection.TypeInfo;
		}
		export class ManifestResourceInfo extends System.Object {
			get ReferencedAssembly(): System.Reflection.Assembly;
			get FileName(): string;
			get ResourceLocation(): System.Reflection.ResourceLocation;
			constructor(containingAssembly: System.Reflection.Assembly, containingFileName: string, resourceLocation: System.Reflection.ResourceLocation);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ResourceLocation { Embedded = 1, ContainedInAnotherAssembly = 2, ContainedInManifestFile = 4, }
		export class MemberFilter extends Function {
		}
		export class MemberInfo extends System.Object {
			get MemberType(): System.Reflection.MemberTypes;
			get Name(): string;
			get DeclaringType(): System.Type;
			get ReflectedType(): System.Type;
			get CustomAttributes(): any;
			get MetadataToken(): number;
			get Module(): System.Reflection.Module;
			static op_Equality(left: System.Reflection.MemberInfo, right: System.Reflection.MemberInfo): boolean;
			static op_Inequality(left: System.Reflection.MemberInfo, right: System.Reflection.MemberInfo): boolean;
			GetCustomAttributes(inherit: boolean): any;
			GetCustomAttributes(attributeType: System.Type, inherit: boolean): any;
			IsDefined(attributeType: System.Type, inherit: boolean): boolean;
			GetCustomAttributesData(): any;
			/**extension method */
			GetCustomAttribute(attributeType: System.Type): System.Attribute;
			/**extension method */
			GetCustomAttribute(attributeType: System.Type, inherit: boolean): System.Attribute;
			/**extension method */
			GetCustomAttributes(): any;
			/**extension method */
			GetCustomAttributes(inherit: boolean): any;
			/**extension method */
			GetCustomAttributes(attributeType: System.Type): any;
			/**extension method */
			GetCustomAttributes(attributeType: System.Type, inherit: boolean): any;
			/**extension method */
			IsDefined(attributeType: System.Type): boolean;
			/**extension method */
			IsDefined(attributeType: System.Type, inherit: boolean): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum MemberTypes { Constructor = 1, Event = 2, Field = 4, Method = 8, Property = 16, TypeInfo = 32, Custom = 64, NestedType = 128, All = 191, }
		export enum MethodAttributes { MemberAccessMask = 7, PrivateScope = 0, Private = 1, FamANDAssem = 2, Assembly = 3, Family = 4, FamORAssem = 5, Public = 6, Static = 16, Final = 32, Virtual = 64, HideBySig = 128, CheckAccessOnOverride = 512, VtableLayoutMask = 256, ReuseSlot = 0, NewSlot = 256, Abstract = 1024, SpecialName = 2048, PinvokeImpl = 8192, UnmanagedExport = 8, RTSpecialName = 4096, ReservedMask = 53248, HasSecurity = 16384, RequireSecObject = 32768, }
		export class MethodBase extends System.Reflection.MemberInfo {
			get MethodImplementationFlags(): System.Reflection.MethodImplAttributes;
			get MethodHandle(): System.RuntimeMethodHandle;
			get Attributes(): System.Reflection.MethodAttributes;
			get CallingConvention(): System.Reflection.CallingConventions;
			get IsGenericMethodDefinition(): boolean;
			get ContainsGenericParameters(): boolean;
			get IsGenericMethod(): boolean;
			get IsSecurityCritical(): boolean;
			get IsSecuritySafeCritical(): boolean;
			get IsSecurityTransparent(): boolean;
			get IsPublic(): boolean;
			get IsPrivate(): boolean;
			get IsFamily(): boolean;
			get IsAssembly(): boolean;
			get IsFamilyAndAssembly(): boolean;
			get IsFamilyOrAssembly(): boolean;
			get IsStatic(): boolean;
			get IsFinal(): boolean;
			get IsVirtual(): boolean;
			get IsHideBySig(): boolean;
			get IsAbstract(): boolean;
			get IsSpecialName(): boolean;
			get IsConstructor(): boolean;
			static GetMethodFromHandle(handle: System.RuntimeMethodHandle): System.Reflection.MethodBase;
			static GetMethodFromHandle(handle: System.RuntimeMethodHandle, declaringType: System.RuntimeTypeHandle): System.Reflection.MethodBase;
			static GetCurrentMethod(): System.Reflection.MethodBase;
			static op_Equality(left: System.Reflection.MethodBase, right: System.Reflection.MethodBase): boolean;
			static op_Inequality(left: System.Reflection.MethodBase, right: System.Reflection.MethodBase): boolean;
			GetParameters(): System.Reflection.ParameterInfo[];
			GetMethodImplementationFlags(): System.Reflection.MethodImplAttributes;
			Invoke(obj: any, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, parameters: any, culture: any): any;
			Invoke(obj: any, parameters: any): any;
			GetGenericArguments(): System.Type[];
			GetMethodBody(): System.Reflection.MethodBody;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ExceptionHandlingClauseOptions { Clause = 0, Filter = 1, Finally = 2, Fault = 4, }
		export enum MethodImplAttributes { CodeTypeMask = 3, IL = 0, Native = 1, OPTIL = 2, Runtime = 3, ManagedMask = 4, Unmanaged = 4, Managed = 0, ForwardRef = 16, PreserveSig = 128, InternalCall = 4096, Synchronized = 32, NoInlining = 8, AggressiveInlining = 256, NoOptimization = 64, MaxMethodImplVal = 65535, }
		export class MethodInfo extends System.Reflection.MethodBase {
			get MemberType(): System.Reflection.MemberTypes;
			get ReturnType(): System.Type;
			get ReturnParameter(): System.Reflection.ParameterInfo;
			get ReturnTypeCustomAttributes(): System.Reflection.ICustomAttributeProvider;
			static op_Equality(left: System.Reflection.MethodInfo, right: System.Reflection.MethodInfo): boolean;
			static op_Inequality(left: System.Reflection.MethodInfo, right: System.Reflection.MethodInfo): boolean;
			GetBaseDefinition(): System.Reflection.MethodInfo;
			GetGenericMethodDefinition(): System.Reflection.MethodInfo;
			MakeGenericMethod(typeArguments: System.Type[]): System.Reflection.MethodInfo;
			CreateDelegate(delegateType: System.Type): System.Delegate;
			CreateDelegate(delegateType: System.Type, target: any): System.Delegate;
			/**extension method */
			GetRuntimeBaseDefinition(): System.Reflection.MethodInfo;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Missing extends System.Object {
			static Value: System.Reflection.Missing;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ObfuscateAssemblyAttribute extends System.Attribute {
			get AssemblyIsPrivate(): boolean;
			get StripAfterObfuscation(): boolean;
			set StripAfterObfuscation(value: boolean);
			constructor(assemblyIsPrivate: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ObfuscationAttribute extends System.Attribute {
			get StripAfterObfuscation(): boolean;
			set StripAfterObfuscation(value: boolean);
			get Exclude(): boolean;
			set Exclude(value: boolean);
			get ApplyToMembers(): boolean;
			set ApplyToMembers(value: boolean);
			get Feature(): string;
			set Feature(value: string);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ParameterAttributes { None = 0, In = 1, Out = 2, Lcid = 4, Retval = 8, Optional = 16, ReservedMask = 61440, HasDefault = 4096, HasFieldMarshal = 8192, Reserved3 = 16384, Reserved4 = 32768, }
		export class ParameterModifier {
			constructor(parameterCount: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Pointer extends System.Object {
			static Box(ptr: any, type: System.Type): any;
			static Unbox(ptr: any): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum PropertyAttributes { None = 0, SpecialName = 512, ReservedMask = 62464, RTSpecialName = 1024, HasDefault = 4096, Reserved2 = 8192, Reserved3 = 16384, Reserved4 = 32768, }
		export class ReflectionContext extends System.Object {
			MapAssembly(assembly: System.Reflection.Assembly): System.Reflection.Assembly;
			MapType(type: System.Reflection.TypeInfo): System.Reflection.TypeInfo;
			GetTypeForObject(value: any): System.Reflection.TypeInfo;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ResourceAttributes { Public = 1, Private = 2, }
		export enum TypeAttributes { VisibilityMask = 7, NotPublic = 0, Public = 1, NestedPublic = 2, NestedPrivate = 3, NestedFamily = 4, NestedAssembly = 5, NestedFamANDAssem = 6, NestedFamORAssem = 7, LayoutMask = 24, AutoLayout = 0, SequentialLayout = 8, ExplicitLayout = 16, ClassSemanticsMask = 32, Class = 0, Interface = 32, Abstract = 128, Sealed = 256, SpecialName = 1024, Import = 4096, Serializable = 8192, WindowsRuntime = 16384, StringFormatMask = 196608, AnsiClass = 0, UnicodeClass = 65536, AutoClass = 131072, CustomFormatClass = 196608, CustomFormatMask = 12582912, BeforeFieldInit = 1048576, ReservedMask = 264192, RTSpecialName = 2048, HasSecurity = 262144, }
		export class TypeDelegator extends System.Reflection.TypeInfo {
			get GUID(): System.Guid;
			get MetadataToken(): number;
			get Module(): System.Reflection.Module;
			get Assembly(): System.Reflection.Assembly;
			get TypeHandle(): System.RuntimeTypeHandle;
			get Name(): string;
			get FullName(): string;
			get Namespace(): string;
			get AssemblyQualifiedName(): string;
			get BaseType(): System.Type;
			get IsConstructedGenericType(): boolean;
			get UnderlyingSystemType(): System.Type;
			get IsSZArray(): boolean;
			constructor(delegatingType: System.Type);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TypeFilter extends Function {
		}
		export class TypeInfo extends System.Type {
			get GenericTypeParameters(): System.Type[];
			get DeclaredConstructors(): any;
			get DeclaredEvents(): any;
			get DeclaredFields(): any;
			get DeclaredMembers(): any;
			get DeclaredMethods(): any;
			get DeclaredNestedTypes(): any;
			get DeclaredProperties(): any;
			get ImplementedInterfaces(): any;
			AsType(): System.Type;
			IsAssignableFrom(typeInfo: System.Reflection.TypeInfo): boolean;
			/**inherited method */
			IsAssignableFrom(c: System.Type): boolean;
			GetDeclaredEvent(name: string): System.Reflection.EventInfo;
			GetDeclaredField(name: string): System.Reflection.FieldInfo;
			GetDeclaredMethod(name: string): System.Reflection.MethodInfo;
			GetDeclaredMethods(name: string): any;
			GetDeclaredNestedType(name: string): System.Reflection.TypeInfo;
			GetDeclaredProperty(name: string): System.Reflection.PropertyInfo;
			/**extension method */
			GetRuntimeInterfaceMap(interfaceType: System.Type): System.Reflection.InterfaceMapping;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Assembly extends System.Object {
			get CodeBase(): string;
			get EscapedCodeBase(): string;
			get FullName(): string;
			get EntryPoint(): System.Reflection.MethodInfo;
			get Evidence(): any;
			get Location(): string;
			get ImageRuntimeVersion(): string;
			get HostContext(): number;
			get ReflectionOnly(): boolean;
			get PermissionSet(): System.Security.PermissionSet;
			get SecurityRuleSet(): System.Security.SecurityRuleSet;
			get IsFullyTrusted(): boolean;
			get ManifestModule(): System.Reflection.Module;
			get GlobalAssemblyCache(): boolean;
			get IsDynamic(): boolean;
			get DefinedTypes(): any;
			get ExportedTypes(): any;
			get Modules(): any;
			get CustomAttributes(): any;
			static CreateQualifiedName(assemblyName: string, typeName: string): string;
			static GetAssembly(type: System.Type): System.Reflection.Assembly;
			static GetEntryAssembly(): System.Reflection.Assembly;
			static LoadFrom(assemblyFile: string): System.Reflection.Assembly;
			/**[Obsolete]--"" */
			static LoadFrom(assemblyFile: string, securityEvidence: any): System.Reflection.Assembly;
			/**[Obsolete]--"" */
			static LoadFrom(assemblyFile: string, securityEvidence: any, hashValue: Uint8Array, hashAlgorithm: any): System.Reflection.Assembly;
			static LoadFrom(assemblyFile: string, hashValue: Uint8Array, hashAlgorithm: any): System.Reflection.Assembly;
			static UnsafeLoadFrom(assemblyFile: string): System.Reflection.Assembly;
			/**[Obsolete]--"" */
			static LoadFile(path: string, securityEvidence: any): System.Reflection.Assembly;
			static LoadFile(path: string): System.Reflection.Assembly;
			static Load(assemblyString: string): System.Reflection.Assembly;
			/**[Obsolete]--"" */
			static Load(assemblyString: string, assemblySecurity: any): System.Reflection.Assembly;
			static Load(assemblyRef: System.Reflection.AssemblyName): System.Reflection.Assembly;
			/**[Obsolete]--"" */
			static Load(assemblyRef: System.Reflection.AssemblyName, assemblySecurity: any): System.Reflection.Assembly;
			static Load(rawAssembly: Uint8Array): System.Reflection.Assembly;
			static Load(rawAssembly: Uint8Array, rawSymbolStore: Uint8Array): System.Reflection.Assembly;
			/**[Obsolete]--"" */
			static Load(rawAssembly: Uint8Array, rawSymbolStore: Uint8Array, securityEvidence: any): System.Reflection.Assembly;
			static Load(rawAssembly: Uint8Array, rawSymbolStore: Uint8Array, securityContextSource: System.Security.SecurityContextSource): System.Reflection.Assembly;
			static ReflectionOnlyLoad(rawAssembly: Uint8Array): System.Reflection.Assembly;
			static ReflectionOnlyLoad(assemblyString: string): System.Reflection.Assembly;
			static ReflectionOnlyLoadFrom(assemblyFile: string): System.Reflection.Assembly;
			/**[Obsolete]--"This method has been deprecated. Please use Assembly.Load() instead. http://go.microsoft.com/fwlink/?linkid=14202" */
			static LoadWithPartialName(partialName: string): System.Reflection.Assembly;
			/**[Obsolete]--"This method has been deprecated. Please use Assembly.Load() instead. http://go.microsoft.com/fwlink/?linkid=14202" */
			static LoadWithPartialName(partialName: string, securityEvidence: any): System.Reflection.Assembly;
			static GetExecutingAssembly(): System.Reflection.Assembly;
			static GetCallingAssembly(): System.Reflection.Assembly;
			static op_Equality(left: System.Reflection.Assembly, right: System.Reflection.Assembly): boolean;
			static op_Inequality(left: System.Reflection.Assembly, right: System.Reflection.Assembly): boolean;
			add_ModuleResolve(value: System.Reflection.ModuleResolveEventHandler): void;
			remove_ModuleResolve(value: System.Reflection.ModuleResolveEventHandler): void;
			GetObjectData(info: any, context: any): void;
			IsDefined(attributeType: System.Type, inherit: boolean): boolean;
			GetCustomAttributes(inherit: boolean): any;
			GetCustomAttributes(attributeType: System.Type, inherit: boolean): any;
			GetFiles(): System.IO.FileStream[];
			GetFiles(getResourceModules: boolean): System.IO.FileStream[];
			GetFile(name: string): System.IO.FileStream;
			GetManifestResourceStream(name: string): System.IO.Stream;
			GetManifestResourceStream(type: System.Type, name: string): System.IO.Stream;
			GetTypes(): System.Type[];
			GetExportedTypes(): System.Type[];
			GetType(name: string, throwOnError: boolean): System.Type;
			GetType(name: string): System.Type;
			GetType(name: string, throwOnError: boolean, ignoreCase: boolean): System.Type;
			/**inherited method */
			GetType(): System.Type;
			GetName(copiedName: boolean): System.Reflection.AssemblyName;
			GetName(): System.Reflection.AssemblyName;
			LoadModule(moduleName: string, rawModule: Uint8Array): System.Reflection.Module;
			LoadModule(moduleName: string, rawModule: Uint8Array, rawSymbolStore: Uint8Array): System.Reflection.Module;
			CreateInstance(typeName: string): any;
			CreateInstance(typeName: string, ignoreCase: boolean): any;
			CreateInstance(typeName: string, ignoreCase: boolean, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, args: any, culture: any, activationAttributes: any): any;
			GetLoadedModules(): System.Reflection.Module[];
			GetLoadedModules(getResourceModules: boolean): System.Reflection.Module[];
			GetModules(): System.Reflection.Module[];
			GetModules(getResourceModules: boolean): System.Reflection.Module[];
			GetManifestResourceNames(): string[];
			GetManifestResourceInfo(resourceName: string): System.Reflection.ManifestResourceInfo;
			GetCustomAttributesData(): any;
			GetModule(name: string): System.Reflection.Module;
			GetReferencedAssemblies(): System.Reflection.AssemblyName[];
			GetSatelliteAssembly(culture: any): System.Reflection.Assembly;
			GetSatelliteAssembly(culture: any, version: System.Version): System.Reflection.Assembly;
			/**extension method */
			GetCustomAttribute(attributeType: System.Type): System.Attribute;
			/**extension method */
			GetCustomAttributes(): any;
			/**extension method */
			GetCustomAttributes(attributeType: System.Type): any;
			/**extension method */
			IsDefined(attributeType: System.Type): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyName extends System.Object {
			get ProcessorArchitecture(): System.Reflection.ProcessorArchitecture;
			set ProcessorArchitecture(value: System.Reflection.ProcessorArchitecture);
			get Name(): string;
			set Name(value: string);
			get CodeBase(): string;
			set CodeBase(value: string);
			get EscapedCodeBase(): string;
			get CultureInfo(): any;
			set CultureInfo(value: any);
			get Flags(): System.Reflection.AssemblyNameFlags;
			set Flags(value: System.Reflection.AssemblyNameFlags);
			get FullName(): string;
			get HashAlgorithm(): any;
			set HashAlgorithm(value: any);
			get KeyPair(): System.Reflection.StrongNameKeyPair;
			set KeyPair(value: System.Reflection.StrongNameKeyPair);
			get Version(): System.Version;
			set Version(value: System.Version);
			get VersionCompatibility(): any;
			set VersionCompatibility(value: any);
			get CultureName(): string;
			set CultureName(value: string);
			get ContentType(): System.Reflection.AssemblyContentType;
			set ContentType(value: System.Reflection.AssemblyContentType);
			constructor();
			constructor(assemblyName: string);
			static ReferenceMatchesDefinition(reference: System.Reflection.AssemblyName, definition: System.Reflection.AssemblyName): boolean;
			static GetAssemblyName(assemblyFile: string): System.Reflection.AssemblyName;
			GetPublicKey(): Uint8Array;
			GetPublicKeyToken(): Uint8Array;
			SetPublicKey(publicKey: Uint8Array): void;
			SetPublicKeyToken(publicKeyToken: Uint8Array): void;
			GetObjectData(info: any, context: any): void;
			Clone(): any;
			OnDeserialization(sender: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ConstructorInfo extends System.Reflection.MethodBase {
			static ConstructorName: string;
			static TypeConstructorName: string;
			get MemberType(): System.Reflection.MemberTypes;
			static op_Equality(left: System.Reflection.ConstructorInfo, right: System.Reflection.ConstructorInfo): boolean;
			static op_Inequality(left: System.Reflection.ConstructorInfo, right: System.Reflection.ConstructorInfo): boolean;
			Invoke(parameters: any): any;
			Invoke(invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, parameters: any, culture: any): any;
			/**inherited method */
			Invoke(obj: any, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, parameters: any, culture: any): any;
			/**inherited method */
			Invoke(obj: any, parameters: any): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CustomAttributeData extends System.Object {
			get Constructor(): System.Reflection.ConstructorInfo;
			get ConstructorArguments(): any;
			get NamedArguments(): any;
			get AttributeType(): System.Type;
			static GetCustomAttributes(target: System.Reflection.Assembly): any;
			static GetCustomAttributes(target: System.Reflection.MemberInfo): any;
			static GetCustomAttributes(target: System.Reflection.Module): any;
			static GetCustomAttributes(target: System.Reflection.ParameterInfo): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CustomAttributeNamedArgument {
			get MemberInfo(): System.Reflection.MemberInfo;
			get TypedValue(): System.Reflection.CustomAttributeTypedArgument;
			get IsField(): boolean;
			get MemberName(): string;
			constructor(memberInfo: System.Reflection.MemberInfo, value: any);
			constructor(memberInfo: System.Reflection.MemberInfo, typedArgument: System.Reflection.CustomAttributeTypedArgument);
			static op_Equality(left: System.Reflection.CustomAttributeNamedArgument, right: System.Reflection.CustomAttributeNamedArgument): boolean;
			static op_Inequality(left: System.Reflection.CustomAttributeNamedArgument, right: System.Reflection.CustomAttributeNamedArgument): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CustomAttributeTypedArgument {
			get ArgumentType(): System.Type;
			get Value(): any;
			constructor(argumentType: System.Type, value: any);
			constructor(value: any);
			static op_Equality(left: System.Reflection.CustomAttributeTypedArgument, right: System.Reflection.CustomAttributeTypedArgument): boolean;
			static op_Inequality(left: System.Reflection.CustomAttributeTypedArgument, right: System.Reflection.CustomAttributeTypedArgument): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EventInfo extends System.Reflection.MemberInfo {
			get Attributes(): System.Reflection.EventAttributes;
			get EventHandlerType(): System.Type;
			get IsMulticast(): boolean;
			get IsSpecialName(): boolean;
			get MemberType(): System.Reflection.MemberTypes;
			get AddMethod(): System.Reflection.MethodInfo;
			get RaiseMethod(): System.Reflection.MethodInfo;
			get RemoveMethod(): System.Reflection.MethodInfo;
			static op_Equality(left: System.Reflection.EventInfo, right: System.Reflection.EventInfo): boolean;
			static op_Inequality(left: System.Reflection.EventInfo, right: System.Reflection.EventInfo): boolean;
			AddEventHandler(target: any, handler: System.Delegate): void;
			GetAddMethod(): System.Reflection.MethodInfo;
			GetAddMethod(nonPublic: boolean): System.Reflection.MethodInfo;
			GetRaiseMethod(): System.Reflection.MethodInfo;
			GetRaiseMethod(nonPublic: boolean): System.Reflection.MethodInfo;
			GetRemoveMethod(): System.Reflection.MethodInfo;
			GetRemoveMethod(nonPublic: boolean): System.Reflection.MethodInfo;
			GetOtherMethods(nonPublic: boolean): System.Reflection.MethodInfo[];
			GetOtherMethods(): System.Reflection.MethodInfo[];
			RemoveEventHandler(target: any, handler: System.Delegate): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ExceptionHandlingClause extends System.Object {
			get CatchType(): System.Type;
			get FilterOffset(): number;
			get Flags(): System.Reflection.ExceptionHandlingClauseOptions;
			get HandlerLength(): number;
			get HandlerOffset(): number;
			get TryLength(): number;
			get TryOffset(): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FieldInfo extends System.Reflection.MemberInfo {
			get Attributes(): System.Reflection.FieldAttributes;
			get FieldHandle(): System.RuntimeFieldHandle;
			get FieldType(): System.Type;
			get MemberType(): System.Reflection.MemberTypes;
			get IsLiteral(): boolean;
			get IsStatic(): boolean;
			get IsInitOnly(): boolean;
			get IsPublic(): boolean;
			get IsPrivate(): boolean;
			get IsFamily(): boolean;
			get IsAssembly(): boolean;
			get IsFamilyAndAssembly(): boolean;
			get IsFamilyOrAssembly(): boolean;
			get IsPinvokeImpl(): boolean;
			get IsSpecialName(): boolean;
			get IsNotSerialized(): boolean;
			get IsSecurityCritical(): boolean;
			get IsSecuritySafeCritical(): boolean;
			get IsSecurityTransparent(): boolean;
			static GetFieldFromHandle(handle: System.RuntimeFieldHandle): System.Reflection.FieldInfo;
			static GetFieldFromHandle(handle: System.RuntimeFieldHandle, declaringType: System.RuntimeTypeHandle): System.Reflection.FieldInfo;
			static op_Equality(left: System.Reflection.FieldInfo, right: System.Reflection.FieldInfo): boolean;
			static op_Inequality(left: System.Reflection.FieldInfo, right: System.Reflection.FieldInfo): boolean;
			GetValue(obj: any): any;
			SetValue(obj: any, value: any, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, culture: any): void;
			SetValue(obj: any, value: any): void;
			GetValueDirect(obj: System.TypedReference): any;
			SetValueDirect(obj: System.TypedReference, value: any): void;
			GetOptionalCustomModifiers(): System.Type[];
			GetRequiredCustomModifiers(): System.Type[];
			GetRawConstantValue(): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ImageFileMachine { I386 = 332, IA64 = 512, AMD64 = 34404, ARM = 452, }
		export class LocalVariableInfo extends System.Object {
			get IsPinned(): boolean;
			get LocalIndex(): number;
			get LocalType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MethodBody extends System.Object {
			get ExceptionHandlingClauses(): any;
			get LocalVariables(): any;
			get InitLocals(): boolean;
			get LocalSignatureMetadataToken(): number;
			get MaxStackSize(): number;
			GetILAsByteArray(): Uint8Array;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Module extends System.Object {
			static FilterTypeName: System.Reflection.TypeFilter;
			static FilterTypeNameIgnoreCase: System.Reflection.TypeFilter;
			get ModuleHandle(): System.ModuleHandle;
			get Assembly(): System.Reflection.Assembly;
			get Name(): string;
			get ScopeName(): string;
			get MDStreamVersion(): number;
			get ModuleVersionId(): System.Guid;
			get FullyQualifiedName(): string;
			get MetadataToken(): number;
			get CustomAttributes(): any;
			static op_Equality(left: System.Reflection.Module, right: System.Reflection.Module): boolean;
			static op_Inequality(left: System.Reflection.Module, right: System.Reflection.Module): boolean;
			GetField(name: string): System.Reflection.FieldInfo;
			GetField(name: string, bindingAttr: System.Reflection.BindingFlags): System.Reflection.FieldInfo;
			GetFields(): System.Reflection.FieldInfo[];
			GetFields(bindingFlags: System.Reflection.BindingFlags): System.Reflection.FieldInfo[];
			GetMethod(name: string): System.Reflection.MethodInfo;
			GetMethod(name: string, types: System.Type[]): System.Reflection.MethodInfo;
			GetMethod(name: string, bindingAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, callConvention: System.Reflection.CallingConventions, types: System.Type[], modifiers: System.Reflection.ParameterModifier[]): System.Reflection.MethodInfo;
			GetMethods(): System.Reflection.MethodInfo[];
			GetMethods(bindingFlags: System.Reflection.BindingFlags): System.Reflection.MethodInfo[];
			GetObjectData(info: any, context: any): void;
			GetType(className: string): System.Type;
			GetType(className: string, ignoreCase: boolean): System.Type;
			GetType(className: string, throwOnError: boolean, ignoreCase: boolean): System.Type;
			/**inherited method */
			GetType(): System.Type;
			ResolveField(metadataToken: number): System.Reflection.FieldInfo;
			ResolveField(metadataToken: number, genericTypeArguments: System.Type[], genericMethodArguments: System.Type[]): System.Reflection.FieldInfo;
			ResolveMember(metadataToken: number): System.Reflection.MemberInfo;
			ResolveMember(metadataToken: number, genericTypeArguments: System.Type[], genericMethodArguments: System.Type[]): System.Reflection.MemberInfo;
			ResolveMethod(metadataToken: number): System.Reflection.MethodBase;
			ResolveMethod(metadataToken: number, genericTypeArguments: System.Type[], genericMethodArguments: System.Type[]): System.Reflection.MethodBase;
			ResolveType(metadataToken: number): System.Type;
			ResolveType(metadataToken: number, genericTypeArguments: System.Type[], genericMethodArguments: System.Type[]): System.Type;
			IsResource(): boolean;
			FindTypes(filter: System.Reflection.TypeFilter, filterCriteria: any): System.Type[];
			GetCustomAttributes(inherit: boolean): any;
			GetCustomAttributes(attributeType: System.Type, inherit: boolean): any;
			GetCustomAttributesData(): any;
			GetPEKind(peKind: any, machine: any): void;
			IsDefined(attributeType: System.Type, inherit: boolean): boolean;
			ResolveSignature(metadataToken: number): Uint8Array;
			ResolveString(metadataToken: number): string;
			GetSignerCertificate(): any;
			GetTypes(): System.Type[];
			/**extension method */
			GetCustomAttribute(attributeType: System.Type): System.Attribute;
			/**extension method */
			GetCustomAttributes(): any;
			/**extension method */
			GetCustomAttributes(attributeType: System.Type): any;
			/**extension method */
			IsDefined(attributeType: System.Type): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ModuleResolveEventHandler extends Function {
		}
		export class ParameterInfo extends System.Object {
			get ParameterType(): System.Type;
			get Attributes(): System.Reflection.ParameterAttributes;
			get IsIn(): boolean;
			get IsLcid(): boolean;
			get IsOptional(): boolean;
			get IsOut(): boolean;
			get IsRetval(): boolean;
			get Member(): System.Reflection.MemberInfo;
			get Name(): string;
			get Position(): number;
			get CustomAttributes(): any;
			get HasDefaultValue(): boolean;
			get DefaultValue(): any;
			get RawDefaultValue(): any;
			get MetadataToken(): number;
			GetCustomAttributes(inherit: boolean): any;
			GetCustomAttributes(attributeType: System.Type, inherit: boolean): any;
			GetRealObject(context: any): any;
			IsDefined(attributeType: System.Type, inherit: boolean): boolean;
			GetRequiredCustomModifiers(): System.Type[];
			GetOptionalCustomModifiers(): System.Type[];
			GetCustomAttributesData(): any;
			/**extension method */
			GetCustomAttribute(attributeType: System.Type): System.Attribute;
			/**extension method */
			GetCustomAttribute(attributeType: System.Type, inherit: boolean): System.Attribute;
			/**extension method */
			GetCustomAttributes(): any;
			/**extension method */
			GetCustomAttributes(inherit: boolean): any;
			/**extension method */
			GetCustomAttributes(attributeType: System.Type): any;
			/**extension method */
			GetCustomAttributes(attributeType: System.Type, inherit: boolean): any;
			/**extension method */
			IsDefined(attributeType: System.Type): boolean;
			/**extension method */
			IsDefined(attributeType: System.Type, inherit: boolean): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum PortableExecutableKinds { NotAPortableExecutableImage = 0, ILOnly = 1, Required32Bit = 2, PE32Plus = 4, Unmanaged32Bit = 8, Preferred32Bit = 16, }
		export class PropertyInfo extends System.Reflection.MemberInfo {
			get Attributes(): System.Reflection.PropertyAttributes;
			get CanRead(): boolean;
			get CanWrite(): boolean;
			get GetMethod(): System.Reflection.MethodInfo;
			get SetMethod(): System.Reflection.MethodInfo;
			get IsSpecialName(): boolean;
			get MemberType(): System.Reflection.MemberTypes;
			get PropertyType(): System.Type;
			static op_Equality(left: System.Reflection.PropertyInfo, right: System.Reflection.PropertyInfo): boolean;
			static op_Inequality(left: System.Reflection.PropertyInfo, right: System.Reflection.PropertyInfo): boolean;
			GetAccessors(): System.Reflection.MethodInfo[];
			GetAccessors(nonPublic: boolean): System.Reflection.MethodInfo[];
			GetGetMethod(): System.Reflection.MethodInfo;
			GetGetMethod(nonPublic: boolean): System.Reflection.MethodInfo;
			GetIndexParameters(): System.Reflection.ParameterInfo[];
			GetSetMethod(): System.Reflection.MethodInfo;
			GetSetMethod(nonPublic: boolean): System.Reflection.MethodInfo;
			GetValue(obj: any, index: any): any;
			GetValue(obj: any): any;
			GetValue(obj: any, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, index: any, culture: any): any;
			SetValue(obj: any, value: any, index: any): void;
			SetValue(obj: any, value: any): void;
			SetValue(obj: any, value: any, invokeAttr: System.Reflection.BindingFlags, binder: System.Reflection.Binder, index: any, culture: any): void;
			GetOptionalCustomModifiers(): System.Type[];
			GetRequiredCustomModifiers(): System.Type[];
			GetConstantValue(): any;
			GetRawConstantValue(): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StrongNameKeyPair extends System.Object {
			get PublicKey(): Uint8Array;
			constructor(keyPairArray: Uint8Array);
			constructor(keyPairFile: System.IO.FileStream);
			constructor(keyPairContainer: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface ICustomTypeProvider {
			GetCustomType(): System.Type;
		}

	}
	export namespace System.IO {
		export class BinaryReader extends System.Object {
			get BaseStream(): System.IO.Stream;
			constructor(input: System.IO.Stream);
			constructor(input: System.IO.Stream, encoding: System.Text.Encoding);
			constructor(input: System.IO.Stream, encoding: System.Text.Encoding, leaveOpen: boolean);
			Close(): void;
			Dispose(): void;
			PeekChar(): number;
			Read(): number;
			Read(buffer: string[], index: number, count: number): number;
			Read(buffer: Uint8Array, index: number, count: number): number;
			ReadBoolean(): boolean;
			ReadByte(): number;
			ReadSByte(): System.SByte;
			ReadChar(): string;
			ReadInt16(): number;
			ReadUInt16(): number;
			ReadInt32(): number;
			ReadUInt32(): number;
			ReadInt64(): number;
			ReadUInt64(): number;
			ReadSingle(): number;
			ReadDouble(): number;
			ReadDecimal(): System.Decimal;
			ReadString(): string;
			ReadChars(count: number): string[];
			ReadBytes(count: number): Uint8Array;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BinaryWriter extends System.Object {
			static Null: System.IO.BinaryWriter;
			get BaseStream(): System.IO.Stream;
			constructor(output: System.IO.Stream);
			constructor(output: System.IO.Stream, encoding: System.Text.Encoding);
			constructor(output: System.IO.Stream, encoding: System.Text.Encoding, leaveOpen: boolean);
			Close(): void;
			Dispose(): void;
			Flush(): void;
			Seek(offset: number, origin: System.IO.SeekOrigin): number;
			Write(value: boolean): void;
			Write(value: number): void;
			Write(value: System.SByte): void;
			Write(buffer: Uint8Array): void;
			Write(buffer: Uint8Array, index: number, count: number): void;
			Write(ch: string): void;
			Write(chars: string[]): void;
			Write(chars: string[], index: number, count: number): void;
			Write(value: number): void;
			Write(value: System.Decimal): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: string): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BufferedStream extends System.IO.Stream {
			get CanRead(): boolean;
			get CanWrite(): boolean;
			get CanSeek(): boolean;
			get Length(): number;
			get Position(): number;
			set Position(value: number);
			constructor(stream: System.IO.Stream);
			constructor(stream: System.IO.Stream, bufferSize: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Directory extends System.Object {
			static GetFiles(path: string): string[];
			static GetFiles(path: string, searchPattern: string): string[];
			static GetFiles(path: string, searchPattern: string, searchOption: System.IO.SearchOption): string[];
			static GetDirectories(path: string): string[];
			static GetDirectories(path: string, searchPattern: string): string[];
			static GetDirectories(path: string, searchPattern: string, searchOption: System.IO.SearchOption): string[];
			static GetFileSystemEntries(path: string): string[];
			static GetFileSystemEntries(path: string, searchPattern: string): string[];
			static GetFileSystemEntries(path: string, searchPattern: string, searchOption: System.IO.SearchOption): string[];
			static EnumerateDirectories(path: string): any;
			static EnumerateDirectories(path: string, searchPattern: string): any;
			static EnumerateDirectories(path: string, searchPattern: string, searchOption: System.IO.SearchOption): any;
			static EnumerateFiles(path: string): any;
			static EnumerateFiles(path: string, searchPattern: string): any;
			static EnumerateFiles(path: string, searchPattern: string, searchOption: System.IO.SearchOption): any;
			static EnumerateFileSystemEntries(path: string): any;
			static EnumerateFileSystemEntries(path: string, searchPattern: string): any;
			static EnumerateFileSystemEntries(path: string, searchPattern: string, searchOption: System.IO.SearchOption): any;
			static GetDirectoryRoot(path: string): string;
			static CreateDirectory(path: string): System.IO.DirectoryInfo;
			static CreateDirectory(path: string, directorySecurity: any): System.IO.DirectoryInfo;
			static Delete(path: string): void;
			static Delete(path: string, recursive: boolean): void;
			static Exists(path: string): boolean;
			static GetLastAccessTime(path: string): System.DateTime;
			static GetLastAccessTimeUtc(path: string): System.DateTime;
			static GetLastWriteTime(path: string): System.DateTime;
			static GetLastWriteTimeUtc(path: string): System.DateTime;
			static GetCreationTime(path: string): System.DateTime;
			static GetCreationTimeUtc(path: string): System.DateTime;
			static GetCurrentDirectory(): string;
			static GetLogicalDrives(): string[];
			static GetParent(path: string): System.IO.DirectoryInfo;
			static Move(sourceDirName: string, destDirName: string): void;
			static SetAccessControl(path: string, directorySecurity: any): void;
			static SetCreationTime(path: string, creationTime: System.DateTime): void;
			static SetCreationTimeUtc(path: string, creationTimeUtc: System.DateTime): void;
			static SetCurrentDirectory(path: string): void;
			static SetLastAccessTime(path: string, lastAccessTime: System.DateTime): void;
			static SetLastAccessTimeUtc(path: string, lastAccessTimeUtc: System.DateTime): void;
			static SetLastWriteTime(path: string, lastWriteTime: System.DateTime): void;
			static SetLastWriteTimeUtc(path: string, lastWriteTimeUtc: System.DateTime): void;
			static GetAccessControl(path: string, includeSections: any): any;
			static GetAccessControl(path: string): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FileInfo extends System.IO.FileSystemInfo {
			get Name(): string;
			get Length(): number;
			get DirectoryName(): string;
			get Directory(): System.IO.DirectoryInfo;
			get IsReadOnly(): boolean;
			set IsReadOnly(value: boolean);
			get Exists(): boolean;
			constructor(fileName: string);
			GetAccessControl(): any;
			GetAccessControl(includeSections: any): any;
			SetAccessControl(fileSecurity: any): void;
			OpenText(): System.IO.StreamReader;
			CreateText(): System.IO.StreamWriter;
			AppendText(): System.IO.StreamWriter;
			CopyTo(destFileName: string): System.IO.FileInfo;
			CopyTo(destFileName: string, overwrite: boolean): System.IO.FileInfo;
			Create(): System.IO.FileStream;
			Decrypt(): void;
			Encrypt(): void;
			Open(mode: System.IO.FileMode): System.IO.FileStream;
			Open(mode: System.IO.FileMode, access: System.IO.FileAccess): System.IO.FileStream;
			Open(mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare): System.IO.FileStream;
			OpenRead(): System.IO.FileStream;
			OpenWrite(): System.IO.FileStream;
			MoveTo(destFileName: string): void;
			Replace(destinationFileName: string, destinationBackupFileName: string): System.IO.FileInfo;
			Replace(destinationFileName: string, destinationBackupFileName: string, ignoreMetadataErrors: boolean): System.IO.FileInfo;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FileSystemInfo extends System.MarshalByRefObject {
			get FullName(): string;
			get Extension(): string;
			get Name(): string;
			get Exists(): boolean;
			get CreationTime(): System.DateTime;
			set CreationTime(value: System.DateTime);
			get CreationTimeUtc(): System.DateTime;
			set CreationTimeUtc(value: System.DateTime);
			get LastAccessTime(): System.DateTime;
			set LastAccessTime(value: System.DateTime);
			get LastAccessTimeUtc(): System.DateTime;
			set LastAccessTimeUtc(value: System.DateTime);
			get LastWriteTime(): System.DateTime;
			set LastWriteTime(value: System.DateTime);
			get LastWriteTimeUtc(): System.DateTime;
			set LastWriteTimeUtc(value: System.DateTime);
			get Attributes(): System.IO.FileAttributes;
			set Attributes(value: System.IO.FileAttributes);
			Delete(): void;
			Refresh(): void;
			GetObjectData(info: any, context: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MemoryStream extends System.IO.Stream {
			get CanRead(): boolean;
			get CanSeek(): boolean;
			get CanWrite(): boolean;
			get Capacity(): number;
			set Capacity(value: number);
			get Length(): number;
			get Position(): number;
			set Position(value: number);
			constructor();
			constructor(capacity: number);
			constructor(buffer: Uint8Array);
			constructor(buffer: Uint8Array, writable: boolean);
			constructor(buffer: Uint8Array, index: number, count: number);
			constructor(buffer: Uint8Array, index: number, count: number, writable: boolean);
			constructor(buffer: Uint8Array, index: number, count: number, writable: boolean, publiclyVisible: boolean);
			GetBuffer(): Uint8Array;
			TryGetBuffer(buffer: any): boolean;
			ToArray(): Uint8Array;
			WriteTo(stream: System.IO.Stream): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Stream extends System.MarshalByRefObject {
			static Null: System.IO.Stream;
			get CanRead(): boolean;
			get CanSeek(): boolean;
			get CanTimeout(): boolean;
			get CanWrite(): boolean;
			get Length(): number;
			get Position(): number;
			set Position(value: number);
			get ReadTimeout(): number;
			set ReadTimeout(value: number);
			get WriteTimeout(): number;
			set WriteTimeout(value: number);
			static Synchronized(stream: System.IO.Stream): System.IO.Stream;
			CopyToAsync(destination: System.IO.Stream): any;
			CopyToAsync(destination: System.IO.Stream, bufferSize: number): any;
			CopyToAsync(destination: System.IO.Stream, bufferSize: number, cancellationToken: any): any;
			CopyTo(destination: System.IO.Stream): void;
			CopyTo(destination: System.IO.Stream, bufferSize: number): void;
			Close(): void;
			Dispose(): void;
			Flush(): void;
			FlushAsync(): any;
			FlushAsync(cancellationToken: any): any;
			BeginRead(buffer: Uint8Array, offset: number, count: number, callback: System.AsyncCallback, state: any): System.IAsyncResult;
			EndRead(asyncResult: System.IAsyncResult): number;
			ReadAsync(buffer: Uint8Array, offset: number, count: number): any;
			ReadAsync(buffer: Uint8Array, offset: number, count: number, cancellationToken: any): any;
			ReadAsync(destination: any, cancellationToken?: any): any;
			BeginWrite(buffer: Uint8Array, offset: number, count: number, callback: System.AsyncCallback, state: any): System.IAsyncResult;
			EndWrite(asyncResult: System.IAsyncResult): void;
			WriteAsync(buffer: Uint8Array, offset: number, count: number): any;
			WriteAsync(buffer: Uint8Array, offset: number, count: number, cancellationToken: any): any;
			WriteAsync(source: any, cancellationToken?: any): any;
			Seek(offset: number, origin: System.IO.SeekOrigin): number;
			SetLength(value: number): void;
			Read(buffer: Uint8Array, offset: number, count: number): number;
			Read(destination: any): number;
			ReadByte(): number;
			Write(buffer: Uint8Array, offset: number, count: number): void;
			Write(source: any): void;
			WriteByte(value: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StreamReader extends System.IO.TextReader {
			static Null: System.IO.StreamReader;
			get CurrentEncoding(): System.Text.Encoding;
			get BaseStream(): System.IO.Stream;
			get EndOfStream(): boolean;
			constructor(stream: System.IO.Stream);
			constructor(stream: System.IO.Stream, detectEncodingFromByteOrderMarks: boolean);
			constructor(stream: System.IO.Stream, encoding: System.Text.Encoding);
			constructor(stream: System.IO.Stream, encoding: System.Text.Encoding, detectEncodingFromByteOrderMarks: boolean);
			constructor(stream: System.IO.Stream, encoding: System.Text.Encoding, detectEncodingFromByteOrderMarks: boolean, bufferSize: number);
			constructor(stream: System.IO.Stream, encoding: System.Text.Encoding, detectEncodingFromByteOrderMarks: boolean, bufferSize: number, leaveOpen: boolean);
			constructor(path: string);
			constructor(path: string, detectEncodingFromByteOrderMarks: boolean);
			constructor(path: string, encoding: System.Text.Encoding);
			constructor(path: string, encoding: System.Text.Encoding, detectEncodingFromByteOrderMarks: boolean);
			constructor(path: string, encoding: System.Text.Encoding, detectEncodingFromByteOrderMarks: boolean, bufferSize: number);
			DiscardBufferedData(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StreamWriter extends System.IO.TextWriter {
			static Null: System.IO.StreamWriter;
			get AutoFlush(): boolean;
			set AutoFlush(value: boolean);
			get BaseStream(): System.IO.Stream;
			get Encoding(): System.Text.Encoding;
			constructor(stream: System.IO.Stream);
			constructor(stream: System.IO.Stream, encoding: System.Text.Encoding);
			constructor(stream: System.IO.Stream, encoding: System.Text.Encoding, bufferSize: number);
			constructor(stream: System.IO.Stream, encoding: System.Text.Encoding, bufferSize: number, leaveOpen: boolean);
			constructor(path: string);
			constructor(path: string, append: boolean);
			constructor(path: string, append: boolean, encoding: System.Text.Encoding);
			constructor(path: string, append: boolean, encoding: System.Text.Encoding, bufferSize: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StringReader extends System.IO.TextReader {
			constructor(s: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StringWriter extends System.IO.TextWriter {
			get Encoding(): System.Text.Encoding;
			constructor();
			constructor(formatProvider: System.IFormatProvider);
			constructor(sb: System.Text.StringBuilder);
			constructor(sb: System.Text.StringBuilder, formatProvider: System.IFormatProvider);
			GetStringBuilder(): System.Text.StringBuilder;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TextReader extends System.MarshalByRefObject {
			static Null: System.IO.TextReader;
			static Synchronized(reader: System.IO.TextReader): System.IO.TextReader;
			Close(): void;
			Dispose(): void;
			Peek(): number;
			Read(): number;
			Read(buffer: string[], index: number, count: number): number;
			ReadToEnd(): string;
			ReadBlock(buffer: string[], index: number, count: number): number;
			ReadLine(): string;
			ReadLineAsync(): any;
			ReadToEndAsync(): any;
			ReadAsync(buffer: string[], index: number, count: number): any;
			ReadBlockAsync(buffer: string[], index: number, count: number): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TextWriter extends System.MarshalByRefObject {
			static Null: System.IO.TextWriter;
			get FormatProvider(): System.IFormatProvider;
			get Encoding(): System.Text.Encoding;
			get NewLine(): string;
			set NewLine(value: string);
			static Synchronized(writer: System.IO.TextWriter): System.IO.TextWriter;
			Close(): void;
			Dispose(): void;
			Flush(): void;
			Write(value: string): void;
			Write(buffer: string[]): void;
			Write(buffer: string[], index: number, count: number): void;
			Write(value: boolean): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: System.Decimal): void;
			Write(value: string): void;
			Write(value: any): void;
			Write(format: string, arg0: any): void;
			Write(format: string, arg0: any, arg1: any): void;
			Write(format: string, arg0: any, arg1: any, arg2: any): void;
			Write(format: string, arg: any): void;
			WriteLine(): void;
			WriteLine(value: string): void;
			WriteLine(buffer: string[]): void;
			WriteLine(buffer: string[], index: number, count: number): void;
			WriteLine(value: boolean): void;
			WriteLine(value: number): void;
			WriteLine(value: number): void;
			WriteLine(value: number): void;
			WriteLine(value: number): void;
			WriteLine(value: number): void;
			WriteLine(value: number): void;
			WriteLine(value: System.Decimal): void;
			WriteLine(value: string): void;
			WriteLine(value: any): void;
			WriteLine(format: string, arg0: any): void;
			WriteLine(format: string, arg0: any, arg1: any): void;
			WriteLine(format: string, arg0: any, arg1: any, arg2: any): void;
			WriteLine(format: string, arg: any): void;
			WriteAsync(value: string): any;
			WriteAsync(value: string): any;
			WriteAsync(buffer: string[]): any;
			WriteAsync(buffer: string[], index: number, count: number): any;
			WriteLineAsync(value: string): any;
			WriteLineAsync(value: string): any;
			WriteLineAsync(buffer: string[]): any;
			WriteLineAsync(buffer: string[], index: number, count: number): any;
			WriteLineAsync(): any;
			FlushAsync(): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnmanagedMemoryAccessor extends System.Object {
			get Capacity(): number;
			get CanRead(): boolean;
			get CanWrite(): boolean;
			constructor(buffer: any, offset: number, capacity: number);
			constructor(buffer: any, offset: number, capacity: number, access: System.IO.FileAccess);
			Dispose(): void;
			ReadBoolean(position: number): boolean;
			ReadByte(position: number): number;
			ReadChar(position: number): string;
			ReadInt16(position: number): number;
			ReadInt32(position: number): number;
			ReadInt64(position: number): number;
			ReadDecimal(position: number): System.Decimal;
			ReadSingle(position: number): number;
			ReadDouble(position: number): number;
			ReadSByte(position: number): System.SByte;
			ReadUInt16(position: number): number;
			ReadUInt32(position: number): number;
			ReadUInt64(position: number): number;
			Write(position: number, value: boolean): void;
			Write(position: number, value: number): void;
			Write(position: number, value: string): void;
			Write(position: number, value: number): void;
			Write(position: number, value: number): void;
			Write(position: number, value: number): void;
			Write(position: number, value: System.Decimal): void;
			Write(position: number, value: number): void;
			Write(position: number, value: number): void;
			Write(position: number, value: System.SByte): void;
			Write(position: number, value: number): void;
			Write(position: number, value: number): void;
			Write(position: number, value: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnmanagedMemoryStream extends System.IO.Stream {
			get CanRead(): boolean;
			get CanSeek(): boolean;
			get CanWrite(): boolean;
			get Length(): number;
			get Capacity(): number;
			get Position(): number;
			set Position(value: number);
			get PositionPointer(): any;
			set PositionPointer(value: any);
			constructor(buffer: any, offset: number, length: number);
			constructor(buffer: any, offset: number, length: number, access: System.IO.FileAccess);
			constructor(pointer: any, length: number);
			constructor(pointer: any, length: number, capacity: number, access: System.IO.FileAccess);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DirectoryInfo extends System.IO.FileSystemInfo {
			get Exists(): boolean;
			get Name(): string;
			get Parent(): System.IO.DirectoryInfo;
			get Root(): System.IO.DirectoryInfo;
			constructor(path: string);
			Create(): void;
			Create(directorySecurity: any): void;
			CreateSubdirectory(path: string): System.IO.DirectoryInfo;
			CreateSubdirectory(path: string, directorySecurity: any): System.IO.DirectoryInfo;
			GetFiles(): System.IO.FileInfo[];
			GetFiles(searchPattern: string): System.IO.FileInfo[];
			GetFiles(searchPattern: string, searchOption: System.IO.SearchOption): System.IO.FileInfo[];
			GetDirectories(): System.IO.DirectoryInfo[];
			GetDirectories(searchPattern: string): System.IO.DirectoryInfo[];
			GetDirectories(searchPattern: string, searchOption: System.IO.SearchOption): System.IO.DirectoryInfo[];
			GetFileSystemInfos(): System.IO.FileSystemInfo[];
			GetFileSystemInfos(searchPattern: string): System.IO.FileSystemInfo[];
			GetFileSystemInfos(searchPattern: string, searchOption: System.IO.SearchOption): System.IO.FileSystemInfo[];
			/**inherited method */
			Delete(): void;
			Delete(recursive: boolean): void;
			MoveTo(destDirName: string): void;
			GetAccessControl(): any;
			GetAccessControl(includeSections: any): any;
			SetAccessControl(directorySecurity: any): void;
			EnumerateDirectories(): any;
			EnumerateDirectories(searchPattern: string): any;
			EnumerateDirectories(searchPattern: string, searchOption: System.IO.SearchOption): any;
			EnumerateFiles(): any;
			EnumerateFiles(searchPattern: string): any;
			EnumerateFiles(searchPattern: string, searchOption: System.IO.SearchOption): any;
			EnumerateFileSystemInfos(): any;
			EnumerateFileSystemInfos(searchPattern: string): any;
			EnumerateFileSystemInfos(searchPattern: string, searchOption: System.IO.SearchOption): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DriveInfo extends System.Object {
			get AvailableFreeSpace(): number;
			get TotalFreeSpace(): number;
			get TotalSize(): number;
			get VolumeLabel(): string;
			set VolumeLabel(value: string);
			get DriveFormat(): string;
			get DriveType(): System.IO.DriveType;
			get Name(): string;
			get RootDirectory(): System.IO.DirectoryInfo;
			get IsReady(): boolean;
			constructor(driveName: string);
			static GetDrives(): System.IO.DriveInfo[];
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum DriveType { CDRom = 5, Fixed = 3, Network = 4, NoRootDirectory = 1, Ram = 6, Removable = 2, Unknown = 0, }
		export class File extends System.Object {
			static AppendAllText(path: string, contents: string): void;
			static AppendAllText(path: string, contents: string, encoding: System.Text.Encoding): void;
			static AppendText(path: string): System.IO.StreamWriter;
			static Copy(sourceFileName: string, destFileName: string): void;
			static Copy(sourceFileName: string, destFileName: string, overwrite: boolean): void;
			static Create(path: string): System.IO.FileStream;
			static Create(path: string, bufferSize: number): System.IO.FileStream;
			static Create(path: string, bufferSize: number, options: System.IO.FileOptions): System.IO.FileStream;
			static Create(path: string, bufferSize: number, options: System.IO.FileOptions, fileSecurity: any): System.IO.FileStream;
			static CreateText(path: string): System.IO.StreamWriter;
			static Delete(path: string): void;
			static Exists(path: string): boolean;
			static GetAccessControl(path: string): any;
			static GetAccessControl(path: string, includeSections: any): any;
			static GetAttributes(path: string): System.IO.FileAttributes;
			static GetCreationTime(path: string): System.DateTime;
			static GetCreationTimeUtc(path: string): System.DateTime;
			static GetLastAccessTime(path: string): System.DateTime;
			static GetLastAccessTimeUtc(path: string): System.DateTime;
			static GetLastWriteTime(path: string): System.DateTime;
			static GetLastWriteTimeUtc(path: string): System.DateTime;
			static Move(sourceFileName: string, destFileName: string): void;
			static Open(path: string, mode: System.IO.FileMode): System.IO.FileStream;
			static Open(path: string, mode: System.IO.FileMode, access: System.IO.FileAccess): System.IO.FileStream;
			static Open(path: string, mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare): System.IO.FileStream;
			static OpenRead(path: string): System.IO.FileStream;
			static OpenText(path: string): System.IO.StreamReader;
			static OpenWrite(path: string): System.IO.FileStream;
			static Replace(sourceFileName: string, destinationFileName: string, destinationBackupFileName: string): void;
			static Replace(sourceFileName: string, destinationFileName: string, destinationBackupFileName: string, ignoreMetadataErrors: boolean): void;
			static SetAccessControl(path: string, fileSecurity: any): void;
			static SetAttributes(path: string, fileAttributes: System.IO.FileAttributes): void;
			static SetCreationTime(path: string, creationTime: System.DateTime): void;
			static SetCreationTimeUtc(path: string, creationTimeUtc: System.DateTime): void;
			static SetLastAccessTime(path: string, lastAccessTime: System.DateTime): void;
			static SetLastAccessTimeUtc(path: string, lastAccessTimeUtc: System.DateTime): void;
			static SetLastWriteTime(path: string, lastWriteTime: System.DateTime): void;
			static SetLastWriteTimeUtc(path: string, lastWriteTimeUtc: System.DateTime): void;
			static ReadAllBytes(path: string): Uint8Array;
			static ReadAllLines(path: string): string[];
			static ReadAllLines(path: string, encoding: System.Text.Encoding): string[];
			static ReadAllText(path: string): string;
			static ReadAllText(path: string, encoding: System.Text.Encoding): string;
			static WriteAllBytes(path: string, bytes: Uint8Array): void;
			static WriteAllLines(path: string, contents: string[]): void;
			static WriteAllLines(path: string, contents: string[], encoding: System.Text.Encoding): void;
			static WriteAllLines(path: string, contents: any): void;
			static WriteAllLines(path: string, contents: any, encoding: System.Text.Encoding): void;
			static WriteAllText(path: string, contents: string): void;
			static WriteAllText(path: string, contents: string, encoding: System.Text.Encoding): void;
			static Encrypt(path: string): void;
			static Decrypt(path: string): void;
			static ReadLines(path: string): any;
			static ReadLines(path: string, encoding: System.Text.Encoding): any;
			static AppendAllLines(path: string, contents: any): void;
			static AppendAllLines(path: string, contents: any, encoding: System.Text.Encoding): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum FileAccess { Read = 1, Write = 2, ReadWrite = 3, }
		export enum FileAttributes { Archive = 32, Compressed = 2048, Device = 64, Directory = 16, Encrypted = 16384, Hidden = 2, Normal = 128, NotContentIndexed = 8192, Offline = 4096, ReadOnly = 1, ReparsePoint = 1024, SparseFile = 512, System = 4, Temporary = 256, IntegrityStream = 32768, NoScrubData = 131072, }
		export enum FileMode { CreateNew = 1, Create = 2, Open = 3, OpenOrCreate = 4, Truncate = 5, Append = 6, }
		export enum FileOptions { None = 0, Encrypted = 16384, DeleteOnClose = 67108864, SequentialScan = 134217728, RandomAccess = 268435456, Asynchronous = 1073741824, WriteThrough = -2147483648, }
		export enum FileShare { None = 0, Read = 1, Write = 2, ReadWrite = 3, Delete = 4, Inheritable = 16, }
		export class FileStream extends System.IO.Stream {
			get CanRead(): boolean;
			get CanWrite(): boolean;
			get CanSeek(): boolean;
			get IsAsync(): boolean;
			get Name(): string;
			get Length(): number;
			get Position(): number;
			set Position(value: number);
			/**[Obsolete]--"Use SafeFileHandle instead" */
			get Handle(): System.IntPtr;
			get SafeFileHandle(): any;
			constructor(handle: System.IntPtr, access: System.IO.FileAccess);
			constructor(handle: System.IntPtr, access: System.IO.FileAccess, ownsHandle: boolean);
			constructor(handle: System.IntPtr, access: System.IO.FileAccess, ownsHandle: boolean, bufferSize: number);
			constructor(handle: System.IntPtr, access: System.IO.FileAccess, ownsHandle: boolean, bufferSize: number, isAsync: boolean);
			constructor(path: string, mode: System.IO.FileMode);
			constructor(path: string, mode: System.IO.FileMode, access: System.IO.FileAccess);
			constructor(path: string, mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare);
			constructor(path: string, mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare, bufferSize: number);
			constructor(path: string, mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare, bufferSize: number, useAsync: boolean);
			constructor(path: string, mode: System.IO.FileMode, access: System.IO.FileAccess, share: System.IO.FileShare, bufferSize: number, options: System.IO.FileOptions);
			constructor(handle: any, access: System.IO.FileAccess);
			constructor(handle: any, access: System.IO.FileAccess, bufferSize: number);
			constructor(handle: any, access: System.IO.FileAccess, bufferSize: number, isAsync: boolean);
			constructor(path: string, mode: System.IO.FileMode, rights: any, share: System.IO.FileShare, bufferSize: number, options: System.IO.FileOptions);
			constructor(path: string, mode: System.IO.FileMode, rights: any, share: System.IO.FileShare, bufferSize: number, options: System.IO.FileOptions, fileSecurity: any);
			/**inherited method */
			Flush(): void;
			Flush(flushToDisk: boolean): void;
			Lock(position: number, length: number): void;
			Unlock(position: number, length: number): void;
			GetAccessControl(): any;
			SetAccessControl(fileSecurity: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Path extends System.Object {
			/**[Obsolete]--"see GetInvalidPathChars and GetInvalidFileNameChars methods." */
			static InvalidPathChars: string[];
			static AltDirectorySeparatorChar: string;
			static DirectorySeparatorChar: string;
			static PathSeparator: string;
			static VolumeSeparatorChar: string;
			static ChangeExtension(path: string, extension: string): string;
			static Combine(path1: string, path2: string): string;
			static Combine(paths: string[]): string;
			static Combine(path1: string, path2: string, path3: string): string;
			static Combine(path1: string, path2: string, path3: string, path4: string): string;
			static GetDirectoryName(path: string): string;
			static GetExtension(path: string): string;
			static GetFileName(path: string): string;
			static GetFileNameWithoutExtension(path: string): string;
			static GetFullPath(path: string): string;
			static GetPathRoot(path: string): string;
			static GetTempFileName(): string;
			static GetTempPath(): string;
			static HasExtension(path: string): boolean;
			static IsPathRooted(path: string): boolean;
			static GetInvalidFileNameChars(): string[];
			static GetInvalidPathChars(): string[];
			static GetRandomFileName(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum SearchOption { TopDirectoryOnly = 0, AllDirectories = 1, }
		export enum SeekOrigin { Begin = 0, Current = 1, End = 2, }
		export enum HandleInheritability { None = 0, Inheritable = 1, }
		export class ErrorEventArgs extends System.EventArgs {
			constructor(exception: any);
			GetException(): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ErrorEventHandler extends Function {
		}
		export class FileSystemEventArgs extends System.EventArgs {
			get ChangeType(): System.IO.WatcherChangeTypes;
			get FullPath(): string;
			get Name(): string;
			constructor(changeType: System.IO.WatcherChangeTypes, directory: string, name: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FileSystemEventHandler extends Function {
		}
		export class FileSystemWatcher {
			get EnableRaisingEvents(): boolean;
			set EnableRaisingEvents(value: boolean);
			get Filter(): string;
			set Filter(value: string);
			get IncludeSubdirectories(): boolean;
			set IncludeSubdirectories(value: boolean);
			get InternalBufferSize(): number;
			set InternalBufferSize(value: number);
			get NotifyFilter(): System.IO.NotifyFilters;
			set NotifyFilter(value: System.IO.NotifyFilters);
			get Path(): string;
			set Path(value: string);
			get Site(): any;
			set Site(value: any);
			get SynchronizingObject(): any;
			set SynchronizingObject(value: any);
			constructor();
			constructor(path: string);
			constructor(path: string, filter: string);
			BeginInit(): void;
			EndInit(): void;
			WaitForChanged(changeType: System.IO.WatcherChangeTypes): System.IO.WaitForChangedResult;
			WaitForChanged(changeType: System.IO.WatcherChangeTypes, timeout: number): System.IO.WaitForChangedResult;
			add_Changed(value: System.IO.FileSystemEventHandler): void;
			remove_Changed(value: System.IO.FileSystemEventHandler): void;
			add_Created(value: System.IO.FileSystemEventHandler): void;
			remove_Created(value: System.IO.FileSystemEventHandler): void;
			add_Deleted(value: System.IO.FileSystemEventHandler): void;
			remove_Deleted(value: System.IO.FileSystemEventHandler): void;
			add_Error(value: System.IO.ErrorEventHandler): void;
			remove_Error(value: System.IO.ErrorEventHandler): void;
			add_Renamed(value: System.IO.RenamedEventHandler): void;
			remove_Renamed(value: System.IO.RenamedEventHandler): void;
			/**inherited method */
			add_Disposed(value: System.EventHandler): void;
			/**inherited method */
			remove_Disposed(value: System.EventHandler): void;
			/**inherited method */
			Dispose(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			CreateObjRef(requestedType: System.Type): any;
			/**inherited method */
			GetLifetimeService(): any;
			/**inherited method */
			InitializeLifetimeService(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class IODescriptionAttribute {
			get Description(): string;
			constructor(description: string);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			IsDefaultAttribute(): boolean;
			/**inherited method */
			Match(obj: any): boolean;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum NotifyFilters { Attributes = 4, CreationTime = 64, DirectoryName = 2, FileName = 1, LastAccess = 32, LastWrite = 16, Security = 256, Size = 8, }
		export class RenamedEventArgs extends System.IO.FileSystemEventArgs {
			get OldFullPath(): string;
			get OldName(): string;
			constructor(changeType: System.IO.WatcherChangeTypes, directory: string, name: string, oldName: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RenamedEventHandler extends Function {
		}
		export class WaitForChangedResult {
			get ChangeType(): System.IO.WatcherChangeTypes;
			set ChangeType(value: System.IO.WatcherChangeTypes);
			get Name(): string;
			set Name(value: string);
			get OldName(): string;
			set OldName(value: string);
			get TimedOut(): boolean;
			set TimedOut(value: boolean);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum WatcherChangeTypes { All = 15, Changed = 4, Created = 1, Deleted = 2, Renamed = 8, }

	}
	export namespace System.Security {
		export class SuppressUnmanagedCodeSecurityAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnverifiableCodeAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AllowPartiallyTrustedCallersAttribute extends System.Attribute {
			get PartialTrustVisibilityLevel(): System.Security.PartialTrustVisibilityLevel;
			set PartialTrustVisibilityLevel(value: System.Security.PartialTrustVisibilityLevel);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum PartialTrustVisibilityLevel { VisibleToAllHosts = 0, NotVisibleByDefault = 1, }
		export enum SecurityCriticalScope { Explicit = 0, Everything = 1, }
		export class SecurityCriticalAttribute extends System.Attribute {
			/**[Obsolete]--"SecurityCriticalScope is only used for .NET 2.0 transparency compatibility." */
			get Scope(): System.Security.SecurityCriticalScope;
			constructor();
			constructor(scope: System.Security.SecurityCriticalScope);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SecurityTreatAsSafeAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SecuritySafeCriticalAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SecurityTransparentAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum SecurityRuleSet { None = 0, Level1 = 1, Level2 = 2, }
		export class SecurityRulesAttribute extends System.Attribute {
			get SkipVerificationInFullTrust(): boolean;
			set SkipVerificationInFullTrust(value: boolean);
			get RuleSet(): System.Security.SecurityRuleSet;
			constructor(ruleSet: System.Security.SecurityRuleSet);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum SecurityContextSource { CurrentAppDomain = 0, CurrentAssembly = 1, }
		export class SecurityContext extends System.Object {
			static Capture(): System.Security.SecurityContext;
			static IsFlowSuppressed(): boolean;
			static IsWindowsIdentityFlowSuppressed(): boolean;
			static RestoreFlow(): void;
			static Run(securityContext: System.Security.SecurityContext, callback: Function, state: any): void;
			static SuppressFlow(): any;
			static SuppressFlowWindowsIdentity(): any;
			CreateCopy(): System.Security.SecurityContext;
			Dispose(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CodeAccessPermission extends System.Object {
			static RevertAll(): void;
			static RevertAssert(): void;
			static RevertDeny(): void;
			static RevertPermitOnly(): void;
			Assert(): void;
			Copy(): System.Security.IPermission;
			Demand(): void;
			/**[Obsolete]--"Deny is obsolete and will be removed in a future release of the .NET Framework. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information." */
			Deny(): void;
			FromXml(elem: System.Security.SecurityElement): void;
			Intersect(target: System.Security.IPermission): System.Security.IPermission;
			IsSubsetOf(target: System.Security.IPermission): boolean;
			ToXml(): System.Security.SecurityElement;
			Union(other: System.Security.IPermission): System.Security.IPermission;
			PermitOnly(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HostSecurityManager extends System.Object {
			get DomainPolicy(): any;
			get Flags(): System.Security.HostSecurityManagerOptions;
			constructor();
			DetermineApplicationTrust(applicationEvidence: any, activatorEvidence: any, context: any): any;
			ProvideAppDomainEvidence(inputEvidence: any): any;
			ProvideAssemblyEvidence(loadedAssembly: System.Reflection.Assembly, inputEvidence: any): any;
			ResolvePolicy(evidence: any): System.Security.PermissionSet;
			GenerateAppDomainEvidence(evidenceType: System.Type): any;
			GenerateAssemblyEvidence(evidenceType: System.Type, assembly: System.Reflection.Assembly): any;
			GetHostSuppliedAppDomainEvidenceTypes(): System.Type[];
			GetHostSuppliedAssemblyEvidenceTypes(assembly: System.Reflection.Assembly): System.Type[];
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum HostSecurityManagerOptions { None = 0, HostAppDomainEvidence = 1, HostPolicyLevel = 2, HostAssemblyEvidence = 4, HostDetermineApplicationTrust = 8, HostResolvePolicy = 16, AllFlags = 31, }
		export interface IEvidenceFactory {
		}
		export interface IPermission {
			Copy(): System.Security.IPermission;
			Demand(): void;
			Intersect(target: System.Security.IPermission): System.Security.IPermission;
			IsSubsetOf(target: System.Security.IPermission): boolean;
			Union(target: System.Security.IPermission): System.Security.IPermission;
		}
		export interface ISecurityEncodable {
			FromXml(e: System.Security.SecurityElement): void;
			ToXml(): System.Security.SecurityElement;
		}
		export interface ISecurityPolicyEncodable {
			FromXml(e: System.Security.SecurityElement, level: any): void;
			ToXml(level: any): System.Security.SecurityElement;
		}
		export interface IStackWalk {
			Assert(): void;
			Demand(): void;
			Deny(): void;
			PermitOnly(): void;
		}
		export class NamedPermissionSet extends System.Security.PermissionSet {
			get Description(): string;
			set Description(value: string);
			get Name(): string;
			set Name(value: string);
			constructor(name: string, permSet: System.Security.PermissionSet);
			constructor(name: string, state: any);
			constructor(permSet: System.Security.NamedPermissionSet);
			constructor(name: string);
			/**inherited method */
			Copy(): System.Security.PermissionSet;
			Copy(name: string): System.Security.NamedPermissionSet;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PermissionSet extends System.Object {
			get Count(): number;
			get IsSynchronized(): boolean;
			get IsReadOnly(): boolean;
			get SyncRoot(): any;
			constructor(state: any);
			constructor(permSet: System.Security.PermissionSet);
			static ConvertPermissionSet(inFormat: string, inData: Uint8Array, outFormat: string): Uint8Array;
			static RevertAssert(): void;
			AddPermission(perm: System.Security.IPermission): System.Security.IPermission;
			Assert(): void;
			Copy(): System.Security.PermissionSet;
			CopyTo(array: System.Array, index: number): void;
			Demand(): void;
			/**[Obsolete]--"Deny is obsolete and will be removed in a future release of the .NET Framework. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information." */
			Deny(): void;
			FromXml(et: System.Security.SecurityElement): void;
			GetEnumerator(): any;
			IsSubsetOf(target: System.Security.PermissionSet): boolean;
			PermitOnly(): void;
			ContainsNonCodeAccessPermissions(): boolean;
			GetPermission(permClass: System.Type): System.Security.IPermission;
			Intersect(other: System.Security.PermissionSet): System.Security.PermissionSet;
			IsEmpty(): boolean;
			IsUnrestricted(): boolean;
			RemovePermission(permClass: System.Type): System.Security.IPermission;
			SetPermission(perm: System.Security.IPermission): System.Security.IPermission;
			ToXml(): System.Security.SecurityElement;
			Union(other: System.Security.PermissionSet): System.Security.PermissionSet;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum PolicyLevelType { User = 0, Machine = 1, Enterprise = 2, AppDomain = 3, }
		export class SecureString extends System.Object {
			get Length(): number;
			constructor();
			constructor(value: any, length: number);
			AppendChar(c: string): void;
			Clear(): void;
			Copy(): System.Security.SecureString;
			Dispose(): void;
			InsertAt(index: number, c: string): void;
			IsReadOnly(): boolean;
			MakeReadOnly(): void;
			RemoveAt(index: number): void;
			SetAt(index: number, c: string): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SecurityElement extends System.Object {
			get Attributes(): any;
			set Attributes(value: any);
			get Children(): any;
			set Children(value: any);
			get Tag(): string;
			set Tag(value: string);
			get Text(): string;
			set Text(value: string);
			constructor(tag: string);
			constructor(tag: string, text: string);
			static Escape(str: string): string;
			static FromString(xml: string): System.Security.SecurityElement;
			static IsValidAttributeName(name: string): boolean;
			static IsValidAttributeValue(value: string): boolean;
			static IsValidTag(tag: string): boolean;
			static IsValidText(text: string): boolean;
			AddAttribute(name: string, value: string): void;
			AddChild(child: System.Security.SecurityElement): void;
			Attribute(name: string): string;
			Copy(): System.Security.SecurityElement;
			Equal(other: System.Security.SecurityElement): boolean;
			SearchForChildByTag(tag: string): System.Security.SecurityElement;
			SearchForTextOfTag(tag: string): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SecurityManager extends System.Object {
			/**[Obsolete]--"" */
			static get CheckExecutionRights(): boolean;
			/**[Obsolete]--"" */
			static set CheckExecutionRights(value: boolean);
			/**[Obsolete]--"The security manager cannot be turned off on MS runtime" */
			static get SecurityEnabled(): boolean;
			/**[Obsolete]--"The security manager cannot be turned off on MS runtime" */
			static set SecurityEnabled(value: boolean);
			static GetZoneAndOrigin(zone: any, origin: any): void;
			/**[Obsolete]--"" */
			static IsGranted(perm: System.Security.IPermission): boolean;
			/**[Obsolete]--"" */
			static LoadPolicyLevelFromFile(path: string, type: System.Security.PolicyLevelType): any;
			/**[Obsolete]--"" */
			static LoadPolicyLevelFromString(str: string, type: System.Security.PolicyLevelType): any;
			/**[Obsolete]--"" */
			static PolicyHierarchy(): any;
			/**[Obsolete]--"" */
			static ResolvePolicy(evidence: any): System.Security.PermissionSet;
			/**[Obsolete]--"" */
			static ResolvePolicy(evidences: any): System.Security.PermissionSet;
			/**[Obsolete]--"" */
			static ResolvePolicy(evidence: any, reqdPset: System.Security.PermissionSet, optPset: System.Security.PermissionSet, denyPset: System.Security.PermissionSet, denied: any): System.Security.PermissionSet;
			/**[Obsolete]--"" */
			static ResolveSystemPolicy(evidence: any): System.Security.PermissionSet;
			/**[Obsolete]--"" */
			static ResolvePolicyGroups(evidence: any): any;
			/**[Obsolete]--"" */
			static SavePolicy(): void;
			/**[Obsolete]--"" */
			static SavePolicyLevel(level: any): void;
			static GetStandardSandbox(evidence: any): System.Security.PermissionSet;
			static CurrentThreadRequiresSecurityContextCapture(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SecurityState extends System.Object {
			EnsureState(): void;
			IsStateAvailable(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum SecurityZone { MyComputer = 0, Intranet = 1, Trusted = 2, Internet = 3, Untrusted = 4, NoZone = -1, }
		export class ReadOnlyPermissionSet extends System.Security.PermissionSet {
			constructor(permissionSetXml: System.Security.SecurityElement);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ManifestKinds { Application = 2, ApplicationAndDeployment = 3, Deployment = 1, None = 0, }
		export class SecureStringMarshal extends System.Object {
			static SecureStringToCoTaskMemAnsi(s: System.Security.SecureString): System.IntPtr;
			static SecureStringToGlobalAllocAnsi(s: System.Security.SecureString): System.IntPtr;
			static SecureStringToCoTaskMemUnicode(s: System.Security.SecureString): System.IntPtr;
			static SecureStringToGlobalAllocUnicode(s: System.Security.SecureString): System.IntPtr;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.Runtime {
		export class AssemblyTargetedPatchBandAttribute extends System.Attribute {
			get TargetedPatchBand(): string;
			constructor(targetedPatchBand: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TargetedPatchingOptOutAttribute extends System.Attribute {
			get Reason(): string;
			constructor(reason: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum GCLargeObjectHeapCompactionMode { Default = 1, CompactOnce = 2, }
		export enum GCLatencyMode { Batch = 0, Interactive = 1, LowLatency = 2, SustainedLowLatency = 3, NoGCRegion = 4, }
		export class GCSettings extends System.Object {
			static get IsServerGC(): boolean;
			static get LatencyMode(): System.Runtime.GCLatencyMode;
			static set LatencyMode(value: System.Runtime.GCLatencyMode);
			static get LargeObjectHeapCompactionMode(): System.Runtime.GCLargeObjectHeapCompactionMode;
			static set LargeObjectHeapCompactionMode(value: System.Runtime.GCLargeObjectHeapCompactionMode);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MemoryFailPoint {
			constructor(sizeInMegabytes: number);
			Dispose(): void;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ProfileOptimization extends System.Object {
			static SetProfileRoot(directoryPath: string): void;
			static StartProfile(profile: string): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.Collections.Generic {
		export class CollectionExtensions extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class KeyValuePair extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class KeyValuePair$2 {
			get Key(): any;
			get Value(): any;
			constructor(key: any, value: any);
			/**inherited method */
			ToString(): string;
			Deconstruct(key: any, value: any): void;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Dictionary$2 extends System.Object {
			get Comparer(): any;
			get Count(): number;
			get Keys(): any;
			get Values(): any;
			constructor();
			constructor(capacity: number);
			constructor(comparer: any);
			constructor(capacity: number, comparer: any);
			constructor(dictionary: any);
			constructor(dictionary: any, comparer: any);
			constructor(collection: any);
			constructor(collection: any, comparer: any);
			Add(key: any, value: any): void;
			Clear(): void;
			ContainsKey(key: any): boolean;
			ContainsValue(value: any): boolean;
			GetEnumerator(): any;
			GetObjectData(info: any, context: any): void;
			OnDeserialization(sender: any): void;
			Remove(key: any): boolean;
			Remove(key: any, value: any): boolean;
			TryGetValue(key: any, value: any): boolean;
			TryAdd(key: any, value: any): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Comparer$1 extends System.Object {
			static get Default(): System.Collections.Generic.Comparer$1;
			static Create(comparison: System.Comparison$1): System.Collections.Generic.Comparer$1;
			Compare(x: any, y: any): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EqualityComparer$1 extends System.Object {
			static get Default(): System.Collections.Generic.EqualityComparer$1;
			Equals(x: any, y: any): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			GetHashCode(obj: any): number;
			/**inherited method */
			GetHashCode(): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface ICollection$1 {
			Add(item: any): void;
			Clear(): void;
			Contains(item: any): boolean;
			CopyTo(array: any, arrayIndex: number): void;
			Remove(item: any): boolean;
		}
		export interface IComparer$1 {
			Compare(x: any, y: any): number;
		}
		export interface IDictionary$2 {
			ContainsKey(key: any): boolean;
			Add(key: any, value: any): void;
			Remove(key: any): boolean;
			TryGetValue(key: any, value: any): boolean;
		}
		export interface IEnumerable$1 {
			GetEnumerator(): any;
		}
		export interface IEnumerator$1 {
		}
		export interface IEqualityComparer$1 {
			Equals(x: any, y: any): boolean;
			GetHashCode(obj: any): number;
			Equals(x: any): boolean;
			GetHashCode(): number;
		}
		export interface IList$1 {
			IndexOf(item: any): number;
			Insert(index: number, item: any): void;
			RemoveAt(index: number): void;
		}
		export interface IReadOnlyCollection$1 {
		}
		export interface IReadOnlyDictionary$2 {
			ContainsKey(key: any): boolean;
			TryGetValue(key: any, value: any): boolean;
		}
		export interface IReadOnlyList$1 {
		}
		export class List$1 extends System.Object {
			get Capacity(): number;
			set Capacity(value: number);
			get Count(): number;
			constructor();
			constructor(capacity: number);
			constructor(collection: any);
			Add(item: any): void;
			AddRange(collection: any): void;
			AsReadOnly(): any;
			BinarySearch(index: number, count: number, item: any, comparer: any): number;
			BinarySearch(item: any): number;
			BinarySearch(item: any, comparer: any): number;
			Clear(): void;
			Contains(item: any): boolean;
			CopyTo(array: any): void;
			CopyTo(index: number, array: any, arrayIndex: number, count: number): void;
			CopyTo(array: any, arrayIndex: number): void;
			Exists(match: System.Predicate$1): boolean;
			Find(match: System.Predicate$1): any;
			FindAll(match: System.Predicate$1): System.Collections.Generic.List$1;
			FindIndex(match: System.Predicate$1): number;
			FindIndex(startIndex: number, match: System.Predicate$1): number;
			FindIndex(startIndex: number, count: number, match: System.Predicate$1): number;
			FindLast(match: System.Predicate$1): any;
			FindLastIndex(match: System.Predicate$1): number;
			FindLastIndex(startIndex: number, match: System.Predicate$1): number;
			FindLastIndex(startIndex: number, count: number, match: System.Predicate$1): number;
			ForEach(action: System.Action$1): void;
			GetEnumerator(): any;
			GetRange(index: number, count: number): System.Collections.Generic.List$1;
			IndexOf(item: any): number;
			IndexOf(item: any, index: number): number;
			IndexOf(item: any, index: number, count: number): number;
			Insert(index: number, item: any): void;
			InsertRange(index: number, collection: any): void;
			LastIndexOf(item: any): number;
			LastIndexOf(item: any, index: number): number;
			LastIndexOf(item: any, index: number, count: number): number;
			Remove(item: any): boolean;
			RemoveAll(match: System.Predicate$1): number;
			RemoveAt(index: number): void;
			RemoveRange(index: number, count: number): void;
			Reverse(): void;
			Reverse(index: number, count: number): void;
			Sort(): void;
			Sort(comparer: any): void;
			Sort(index: number, count: number, comparer: any): void;
			Sort(comparison: System.Comparison$1): void;
			ToArray(): any;
			TrimExcess(): void;
			TrueForAll(match: System.Predicate$1): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HashSet$1 extends System.Object {
			get Count(): number;
			get Comparer(): any;
			constructor();
			constructor(comparer: any);
			constructor(capacity: number);
			constructor(collection: any);
			constructor(collection: any, comparer: any);
			constructor(capacity: number, comparer: any);
			static CreateSetComparer(): any;
			Clear(): void;
			Contains(item: any): boolean;
			CopyTo(array: any, arrayIndex: number): void;
			CopyTo(array: any): void;
			CopyTo(array: any, arrayIndex: number, count: number): void;
			Remove(item: any): boolean;
			GetEnumerator(): any;
			GetObjectData(info: any, context: any): void;
			OnDeserialization(sender: any): void;
			Add(item: any): boolean;
			TryGetValue(equalValue: any, actualValue: any): boolean;
			UnionWith(other: any): void;
			IntersectWith(other: any): void;
			ExceptWith(other: any): void;
			SymmetricExceptWith(other: any): void;
			IsSubsetOf(other: any): boolean;
			IsProperSubsetOf(other: any): boolean;
			IsSupersetOf(other: any): boolean;
			IsProperSupersetOf(other: any): boolean;
			Overlaps(other: any): boolean;
			SetEquals(other: any): boolean;
			RemoveWhere(match: System.Predicate$1): number;
			TrimExcess(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LinkedList$1 extends System.Object {
			get Count(): number;
			get First(): any;
			get Last(): any;
			constructor();
			constructor(collection: any);
			AddAfter(node: any, value: any): any;
			AddAfter(node: any, newNode: any): void;
			AddBefore(node: any, value: any): any;
			AddBefore(node: any, newNode: any): void;
			AddFirst(value: any): any;
			AddFirst(node: any): void;
			AddLast(value: any): any;
			AddLast(node: any): void;
			Clear(): void;
			Contains(value: any): boolean;
			CopyTo(array: any, index: number): void;
			Find(value: any): any;
			FindLast(value: any): any;
			GetEnumerator(): any;
			Remove(value: any): boolean;
			Remove(node: any): void;
			RemoveFirst(): void;
			RemoveLast(): void;
			GetObjectData(info: any, context: any): void;
			OnDeserialization(sender: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LinkedListNode$1 extends System.Object {
			get List(): any;
			get Next(): System.Collections.Generic.LinkedListNode$1;
			get Previous(): System.Collections.Generic.LinkedListNode$1;
			get Value(): any;
			set Value(value: any);
			constructor(value: any);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Queue$1 extends System.Object {
			get Count(): number;
			constructor();
			constructor(capacity: number);
			constructor(collection: any);
			Clear(): void;
			CopyTo(array: any, arrayIndex: number): void;
			Enqueue(item: any): void;
			GetEnumerator(): any;
			Dequeue(): any;
			TryDequeue(result: any): boolean;
			Peek(): any;
			TryPeek(result: any): boolean;
			Contains(item: any): boolean;
			ToArray(): any;
			TrimExcess(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SortedDictionary$2 extends System.Object {
			get Count(): number;
			get Comparer(): any;
			get Keys(): any;
			get Values(): any;
			constructor();
			constructor(dictionary: any);
			constructor(dictionary: any, comparer: any);
			constructor(comparer: any);
			Add(key: any, value: any): void;
			Clear(): void;
			ContainsKey(key: any): boolean;
			ContainsValue(value: any): boolean;
			CopyTo(array: any, index: number): void;
			GetEnumerator(): any;
			Remove(key: any): boolean;
			TryGetValue(key: any, value: any): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SortedList$2 extends System.Object {
			get Capacity(): number;
			set Capacity(value: number);
			get Comparer(): any;
			get Count(): number;
			get Keys(): any;
			get Values(): any;
			constructor();
			constructor(capacity: number);
			constructor(comparer: any);
			constructor(capacity: number, comparer: any);
			constructor(dictionary: any);
			constructor(dictionary: any, comparer: any);
			Add(key: any, value: any): void;
			Clear(): void;
			ContainsKey(key: any): boolean;
			ContainsValue(value: any): boolean;
			GetEnumerator(): any;
			IndexOfKey(key: any): number;
			IndexOfValue(value: any): number;
			TryGetValue(key: any, value: any): boolean;
			RemoveAt(index: number): void;
			Remove(key: any): boolean;
			TrimExcess(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SortedSet$1 extends System.Object {
			get Count(): number;
			get Comparer(): any;
			get Min(): any;
			get Max(): any;
			constructor();
			constructor(comparer: any);
			constructor(collection: any);
			constructor(collection: any, comparer: any);
			static CreateSetComparer(): any;
			static CreateSetComparer(memberEqualityComparer: any): any;
			Add(item: any): boolean;
			Remove(item: any): boolean;
			Clear(): void;
			Contains(item: any): boolean;
			CopyTo(array: any): void;
			CopyTo(array: any, index: number): void;
			CopyTo(array: any, index: number, count: number): void;
			GetEnumerator(): any;
			UnionWith(other: any): void;
			IntersectWith(other: any): void;
			ExceptWith(other: any): void;
			SymmetricExceptWith(other: any): void;
			IsSubsetOf(other: any): boolean;
			IsProperSubsetOf(other: any): boolean;
			IsSupersetOf(other: any): boolean;
			IsProperSupersetOf(other: any): boolean;
			SetEquals(other: any): boolean;
			Overlaps(other: any): boolean;
			RemoveWhere(match: System.Predicate$1): number;
			Reverse(): any;
			GetViewBetween(lowerValue: any, upperValue: any): System.Collections.Generic.SortedSet$1;
			TryGetValue(equalValue: any, actualValue: any): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Stack$1 extends System.Object {
			get Count(): number;
			constructor();
			constructor(capacity: number);
			constructor(collection: any);
			Clear(): void;
			Contains(item: any): boolean;
			CopyTo(array: any, arrayIndex: number): void;
			GetEnumerator(): any;
			TrimExcess(): void;
			Peek(): any;
			TryPeek(result: any): boolean;
			Pop(): any;
			TryPop(result: any): boolean;
			Push(item: any): void;
			ToArray(): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface ISet$1 {
			Add(item: any): boolean;
			UnionWith(other: any): void;
			IntersectWith(other: any): void;
			ExceptWith(other: any): void;
			SymmetricExceptWith(other: any): void;
			IsSubsetOf(other: any): boolean;
			IsSupersetOf(other: any): boolean;
			IsProperSupersetOf(other: any): boolean;
			IsProperSubsetOf(other: any): boolean;
			Overlaps(other: any): boolean;
			SetEquals(other: any): boolean;
		}

	}
	export namespace System.Collections.Generic.Dictionary$2 {
		export class Enumerator {
			get Current(): any;
			MoveNext(): boolean;
			Dispose(): void;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class KeyCollection extends System.Object {
			get Count(): number;
			constructor(dictionary: any);
			GetEnumerator(): any;
			CopyTo(array: any, index: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ValueCollection extends System.Object {
			get Count(): number;
			constructor(dictionary: any);
			GetEnumerator(): any;
			CopyTo(array: any, index: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.Collections.Generic.Dictionary$2.KeyCollection {
		export class Enumerator {
			get Current(): any;
			Dispose(): void;
			MoveNext(): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.Collections.Generic.Dictionary$2.ValueCollection {
		export class Enumerator {
			get Current(): any;
			Dispose(): void;
			MoveNext(): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.Collections.Generic.List$1 {
		export class Enumerator {
			get Current(): any;
			Dispose(): void;
			MoveNext(): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine {
		export class AnimationEvent extends System.Object {
			/**[Obsolete]--"Use stringParameter instead" */
			get data(): string;
			/**[Obsolete]--"Use stringParameter instead" */
			set data(value: string);
			get stringParameter(): string;
			set stringParameter(value: string);
			get floatParameter(): number;
			set floatParameter(value: number);
			get intParameter(): number;
			set intParameter(value: number);
			get objectReferenceParameter(): any;
			set objectReferenceParameter(value: any);
			get functionName(): string;
			set functionName(value: string);
			get time(): number;
			set time(value: number);
			get messageOptions(): UnityEngine.SendMessageOptions;
			set messageOptions(value: UnityEngine.SendMessageOptions);
			get isFiredByLegacy(): boolean;
			get isFiredByAnimator(): boolean;
			get animationState(): UnityEngine.AnimationState;
			get animatorStateInfo(): UnityEngine.AnimatorStateInfo;
			get animatorClipInfo(): UnityEngine.AnimatorClipInfo;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AnimationClip extends UnityEngine.Motion {
			get events(): UnityEngine.AnimationEvent[];
			set events(value: UnityEngine.AnimationEvent[]);
			get length(): number;
			get frameRate(): number;
			set frameRate(value: number);
			get wrapMode(): UnityEngine.WrapMode;
			set wrapMode(value: UnityEngine.WrapMode);
			get localBounds(): UnityEngine.Bounds;
			set localBounds(value: UnityEngine.Bounds);
			get legacy(): boolean;
			set legacy(value: boolean);
			get humanMotion(): boolean;
			get empty(): boolean;
			get hasGenericRootTransform(): boolean;
			get hasMotionFloatCurves(): boolean;
			get hasMotionCurves(): boolean;
			get hasRootCurves(): boolean;
			constructor();
			AddEvent(evt: UnityEngine.AnimationEvent): void;
			SampleAnimation(go: UnityEngine.GameObject, time: number): void;
			SetCurve(relativePath: string, type: System.Type, propertyName: string, curve: UnityEngine.AnimationCurve): void;
			EnsureQuaternionContinuity(): void;
			ClearCurves(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum PlayMode { StopSameLayer = 0, StopAll = 4, }
		export enum QueueMode { CompleteOthers = 0, PlayNow = 2, }
		export enum AnimationBlendMode { Blend = 0, Additive = 1, }
		export enum AnimationPlayMode { Stop = 0, Queue = 1, Mix = 2, }
		export enum AnimationCullingType { AlwaysAnimate = 0, BasedOnRenderers = 1, BasedOnClipBounds = 2, BasedOnUserBounds = 3, }
		export class Animation extends UnityEngine.Behaviour {
			get clip(): UnityEngine.AnimationClip;
			set clip(value: UnityEngine.AnimationClip);
			get playAutomatically(): boolean;
			set playAutomatically(value: boolean);
			get wrapMode(): UnityEngine.WrapMode;
			set wrapMode(value: UnityEngine.WrapMode);
			get isPlaying(): boolean;
			get animatePhysics(): boolean;
			set animatePhysics(value: boolean);
			/**[Obsolete]--"Use cullingType instead" */
			get animateOnlyIfVisible(): boolean;
			/**[Obsolete]--"Use cullingType instead" */
			set animateOnlyIfVisible(value: boolean);
			get cullingType(): UnityEngine.AnimationCullingType;
			set cullingType(value: UnityEngine.AnimationCullingType);
			get localBounds(): UnityEngine.Bounds;
			set localBounds(value: UnityEngine.Bounds);
			constructor();
			Stop(): void;
			Stop(name: string): void;
			Rewind(name: string): void;
			Rewind(): void;
			Sample(): void;
			IsPlaying(name: string): boolean;
			Play(): boolean;
			Play(mode: UnityEngine.PlayMode): boolean;
			Play(animation: string, mode: UnityEngine.PlayMode): boolean;
			Play(animation: string): boolean;
			/**[Obsolete]--"use PlayMode instead of AnimationPlayMode." */
			Play(mode: UnityEngine.AnimationPlayMode): boolean;
			/**[Obsolete]--"use PlayMode instead of AnimationPlayMode." */
			Play(animation: string, mode: UnityEngine.AnimationPlayMode): boolean;
			CrossFade(animation: string, fadeLength: number, mode: UnityEngine.PlayMode): void;
			CrossFade(animation: string, fadeLength: number): void;
			CrossFade(animation: string): void;
			Blend(animation: string, targetWeight: number, fadeLength: number): void;
			Blend(animation: string, targetWeight: number): void;
			Blend(animation: string): void;
			CrossFadeQueued(animation: string, fadeLength: number, queue: UnityEngine.QueueMode, mode: UnityEngine.PlayMode): UnityEngine.AnimationState;
			CrossFadeQueued(animation: string, fadeLength: number, queue: UnityEngine.QueueMode): UnityEngine.AnimationState;
			CrossFadeQueued(animation: string, fadeLength: number): UnityEngine.AnimationState;
			CrossFadeQueued(animation: string): UnityEngine.AnimationState;
			PlayQueued(animation: string, queue: UnityEngine.QueueMode, mode: UnityEngine.PlayMode): UnityEngine.AnimationState;
			PlayQueued(animation: string, queue: UnityEngine.QueueMode): UnityEngine.AnimationState;
			PlayQueued(animation: string): UnityEngine.AnimationState;
			AddClip(clip: UnityEngine.AnimationClip, newName: string): void;
			AddClip(clip: UnityEngine.AnimationClip, newName: string, firstFrame: number, lastFrame: number, addLoopFrame: boolean): void;
			AddClip(clip: UnityEngine.AnimationClip, newName: string, firstFrame: number, lastFrame: number): void;
			RemoveClip(clip: UnityEngine.AnimationClip): void;
			RemoveClip(clipName: string): void;
			GetClipCount(): number;
			SyncLayer(layer: number): void;
			GetEnumerator(): any;
			GetClip(name: string): UnityEngine.AnimationClip;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AnimationState extends UnityEngine.TrackedReference {
			get enabled(): boolean;
			set enabled(value: boolean);
			get weight(): number;
			set weight(value: number);
			get wrapMode(): UnityEngine.WrapMode;
			set wrapMode(value: UnityEngine.WrapMode);
			get time(): number;
			set time(value: number);
			get normalizedTime(): number;
			set normalizedTime(value: number);
			get speed(): number;
			set speed(value: number);
			get normalizedSpeed(): number;
			set normalizedSpeed(value: number);
			get length(): number;
			get layer(): number;
			set layer(value: number);
			get clip(): UnityEngine.AnimationClip;
			get name(): string;
			set name(value: string);
			get blendMode(): UnityEngine.AnimationBlendMode;
			set blendMode(value: UnityEngine.AnimationBlendMode);
			constructor();
			AddMixingTransform(mix: UnityEngine.Transform, recursive: boolean): void;
			AddMixingTransform(mix: UnityEngine.Transform): void;
			RemoveMixingTransform(mix: UnityEngine.Transform): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AnimationInfo {
			get clip(): UnityEngine.AnimationClip;
			get weight(): number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Animator extends UnityEngine.Behaviour {
			get isOptimizable(): boolean;
			get isHuman(): boolean;
			get hasRootMotion(): boolean;
			get humanScale(): number;
			get isInitialized(): boolean;
			get deltaPosition(): UnityEngine.Vector3;
			get deltaRotation(): UnityEngine.Quaternion;
			get velocity(): UnityEngine.Vector3;
			get angularVelocity(): UnityEngine.Vector3;
			get rootPosition(): UnityEngine.Vector3;
			set rootPosition(value: UnityEngine.Vector3);
			get rootRotation(): UnityEngine.Quaternion;
			set rootRotation(value: UnityEngine.Quaternion);
			get applyRootMotion(): boolean;
			set applyRootMotion(value: boolean);
			/**[Obsolete]--"Animator.linearVelocityBlending is no longer used and has been deprecated." */
			get linearVelocityBlending(): boolean;
			/**[Obsolete]--"Animator.linearVelocityBlending is no longer used and has been deprecated." */
			set linearVelocityBlending(value: boolean);
			/**[Obsolete]--"Animator.animatePhysics has been deprecated. Use Animator.updateMode instead." */
			get animatePhysics(): boolean;
			/**[Obsolete]--"Animator.animatePhysics has been deprecated. Use Animator.updateMode instead." */
			set animatePhysics(value: boolean);
			get updateMode(): UnityEngine.AnimatorUpdateMode;
			set updateMode(value: UnityEngine.AnimatorUpdateMode);
			get hasTransformHierarchy(): boolean;
			get gravityWeight(): number;
			get bodyPosition(): UnityEngine.Vector3;
			set bodyPosition(value: UnityEngine.Vector3);
			get bodyRotation(): UnityEngine.Quaternion;
			set bodyRotation(value: UnityEngine.Quaternion);
			get stabilizeFeet(): boolean;
			set stabilizeFeet(value: boolean);
			get layerCount(): number;
			get parameters(): UnityEngine.AnimatorControllerParameter[];
			get parameterCount(): number;
			get feetPivotActive(): number;
			set feetPivotActive(value: number);
			get pivotWeight(): number;
			get pivotPosition(): UnityEngine.Vector3;
			get isMatchingTarget(): boolean;
			get speed(): number;
			set speed(value: number);
			get targetPosition(): UnityEngine.Vector3;
			get targetRotation(): UnityEngine.Quaternion;
			get cullingMode(): UnityEngine.AnimatorCullingMode;
			set cullingMode(value: UnityEngine.AnimatorCullingMode);
			get playbackTime(): number;
			set playbackTime(value: number);
			get recorderStartTime(): number;
			set recorderStartTime(value: number);
			get recorderStopTime(): number;
			set recorderStopTime(value: number);
			get recorderMode(): UnityEngine.AnimatorRecorderMode;
			get runtimeAnimatorController(): UnityEngine.RuntimeAnimatorController;
			set runtimeAnimatorController(value: UnityEngine.RuntimeAnimatorController);
			get hasBoundPlayables(): boolean;
			get avatar(): UnityEngine.Avatar;
			set avatar(value: UnityEngine.Avatar);
			get playableGraph(): any;
			get layersAffectMassCenter(): boolean;
			set layersAffectMassCenter(value: boolean);
			get leftFeetBottomHeight(): number;
			get rightFeetBottomHeight(): number;
			get logWarnings(): boolean;
			set logWarnings(value: boolean);
			get fireEvents(): boolean;
			set fireEvents(value: boolean);
			get keepAnimatorControllerStateOnDisable(): boolean;
			set keepAnimatorControllerStateOnDisable(value: boolean);
			constructor();
			static StringToHash(name: string): number;
			/**[Obsolete][Error]--"GetCurrentAnimationClipState is obsolete. Use GetCurrentAnimatorClipInfo instead (UnityUpgradable) -> GetCurrentAnimatorClipInfo(*)" */
			GetCurrentAnimationClipState(layerIndex: number): UnityEngine.AnimationInfo[];
			/**[Obsolete][Error]--"GetNextAnimationClipState is obsolete. Use GetNextAnimatorClipInfo instead (UnityUpgradable) -> GetNextAnimatorClipInfo(*)" */
			GetNextAnimationClipState(layerIndex: number): UnityEngine.AnimationInfo[];
			/**[Obsolete][Error]--"Stop is obsolete. Use Animator.enabled = false instead" */
			Stop(): void;
			GetFloat(name: string): number;
			GetFloat(id: number): number;
			SetFloat(name: string, value: number): void;
			SetFloat(name: string, value: number, dampTime: number, deltaTime: number): void;
			SetFloat(id: number, value: number): void;
			SetFloat(id: number, value: number, dampTime: number, deltaTime: number): void;
			GetBool(name: string): boolean;
			GetBool(id: number): boolean;
			SetBool(name: string, value: boolean): void;
			SetBool(id: number, value: boolean): void;
			GetInteger(name: string): number;
			GetInteger(id: number): number;
			SetInteger(name: string, value: number): void;
			SetInteger(id: number, value: number): void;
			SetTrigger(name: string): void;
			SetTrigger(id: number): void;
			ResetTrigger(name: string): void;
			ResetTrigger(id: number): void;
			IsParameterControlledByCurve(name: string): boolean;
			IsParameterControlledByCurve(id: number): boolean;
			GetIKPosition(goal: UnityEngine.AvatarIKGoal): UnityEngine.Vector3;
			SetIKPosition(goal: UnityEngine.AvatarIKGoal, goalPosition: UnityEngine.Vector3): void;
			GetIKRotation(goal: UnityEngine.AvatarIKGoal): UnityEngine.Quaternion;
			SetIKRotation(goal: UnityEngine.AvatarIKGoal, goalRotation: UnityEngine.Quaternion): void;
			GetIKPositionWeight(goal: UnityEngine.AvatarIKGoal): number;
			SetIKPositionWeight(goal: UnityEngine.AvatarIKGoal, value: number): void;
			GetIKRotationWeight(goal: UnityEngine.AvatarIKGoal): number;
			SetIKRotationWeight(goal: UnityEngine.AvatarIKGoal, value: number): void;
			GetIKHintPosition(hint: UnityEngine.AvatarIKHint): UnityEngine.Vector3;
			SetIKHintPosition(hint: UnityEngine.AvatarIKHint, hintPosition: UnityEngine.Vector3): void;
			GetIKHintPositionWeight(hint: UnityEngine.AvatarIKHint): number;
			SetIKHintPositionWeight(hint: UnityEngine.AvatarIKHint, value: number): void;
			SetLookAtPosition(lookAtPosition: UnityEngine.Vector3): void;
			SetLookAtWeight(weight: number): void;
			SetLookAtWeight(weight: number, bodyWeight: number): void;
			SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number): void;
			SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number, eyesWeight: number): void;
			SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number, eyesWeight: number, clampWeight: number): void;
			SetBoneLocalRotation(humanBoneId: UnityEngine.HumanBodyBones, rotation: UnityEngine.Quaternion): void;
			GetBehaviours(fullPathHash: number, layerIndex: number): UnityEngine.StateMachineBehaviour[];
			GetLayerName(layerIndex: number): string;
			GetLayerIndex(layerName: string): number;
			GetLayerWeight(layerIndex: number): number;
			SetLayerWeight(layerIndex: number, weight: number): void;
			GetCurrentAnimatorStateInfo(layerIndex: number): UnityEngine.AnimatorStateInfo;
			GetNextAnimatorStateInfo(layerIndex: number): UnityEngine.AnimatorStateInfo;
			GetAnimatorTransitionInfo(layerIndex: number): UnityEngine.AnimatorTransitionInfo;
			GetCurrentAnimatorClipInfoCount(layerIndex: number): number;
			GetNextAnimatorClipInfoCount(layerIndex: number): number;
			GetCurrentAnimatorClipInfo(layerIndex: number): UnityEngine.AnimatorClipInfo[];
			GetCurrentAnimatorClipInfo(layerIndex: number, clips: any): void;
			GetNextAnimatorClipInfo(layerIndex: number): UnityEngine.AnimatorClipInfo[];
			GetNextAnimatorClipInfo(layerIndex: number, clips: any): void;
			IsInTransition(layerIndex: number): boolean;
			GetParameter(index: number): UnityEngine.AnimatorControllerParameter;
			MatchTarget(matchPosition: UnityEngine.Vector3, matchRotation: UnityEngine.Quaternion, targetBodyPart: UnityEngine.AvatarTarget, weightMask: UnityEngine.MatchTargetWeightMask, startNormalizedTime: number): void;
			MatchTarget(matchPosition: UnityEngine.Vector3, matchRotation: UnityEngine.Quaternion, targetBodyPart: UnityEngine.AvatarTarget, weightMask: UnityEngine.MatchTargetWeightMask, startNormalizedTime: number, targetNormalizedTime: number): void;
			InterruptMatchTarget(): void;
			InterruptMatchTarget(completeMatch: boolean): void;
			/**[Obsolete]--"ForceStateNormalizedTime is deprecated. Please use Play or CrossFade instead." */
			ForceStateNormalizedTime(normalizedTime: number): void;
			CrossFadeInFixedTime(stateName: string, fixedTransitionDuration: number): void;
			CrossFadeInFixedTime(stateName: string, fixedTransitionDuration: number, layer: number): void;
			CrossFadeInFixedTime(stateName: string, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number): void;
			CrossFadeInFixedTime(stateName: string, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number, normalizedTransitionTime: number): void;
			CrossFadeInFixedTime(stateHashName: number, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number): void;
			CrossFadeInFixedTime(stateHashName: number, fixedTransitionDuration: number, layer: number): void;
			CrossFadeInFixedTime(stateHashName: number, fixedTransitionDuration: number): void;
			CrossFadeInFixedTime(stateHashName: number, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number, normalizedTransitionTime: number): void;
			WriteDefaultValues(): void;
			CrossFade(stateName: string, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number): void;
			CrossFade(stateName: string, normalizedTransitionDuration: number, layer: number): void;
			CrossFade(stateName: string, normalizedTransitionDuration: number): void;
			CrossFade(stateName: string, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number, normalizedTransitionTime: number): void;
			CrossFade(stateHashName: number, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number, normalizedTransitionTime: number): void;
			CrossFade(stateHashName: number, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number): void;
			CrossFade(stateHashName: number, normalizedTransitionDuration: number, layer: number): void;
			CrossFade(stateHashName: number, normalizedTransitionDuration: number): void;
			PlayInFixedTime(stateName: string, layer: number): void;
			PlayInFixedTime(stateName: string): void;
			PlayInFixedTime(stateName: string, layer: number, fixedTime: number): void;
			PlayInFixedTime(stateNameHash: number, layer: number, fixedTime: number): void;
			PlayInFixedTime(stateNameHash: number, layer: number): void;
			PlayInFixedTime(stateNameHash: number): void;
			Play(stateName: string, layer: number): void;
			Play(stateName: string): void;
			Play(stateName: string, layer: number, normalizedTime: number): void;
			Play(stateNameHash: number, layer: number, normalizedTime: number): void;
			Play(stateNameHash: number, layer: number): void;
			Play(stateNameHash: number): void;
			SetTarget(targetIndex: UnityEngine.AvatarTarget, targetNormalizedTime: number): void;
			/**[Obsolete][Error]--"Use mask and layers to control subset of transfroms in a skeleton." */
			IsControlled(transform: UnityEngine.Transform): boolean;
			GetBoneTransform(humanBoneId: UnityEngine.HumanBodyBones): UnityEngine.Transform;
			StartPlayback(): void;
			StopPlayback(): void;
			StartRecording(frameCount: number): void;
			StopRecording(): void;
			HasState(layerIndex: number, stateID: number): boolean;
			Update(deltaTime: number): void;
			Rebind(): void;
			ApplyBuiltinRootMotion(): void;
			/**[Obsolete]--"GetVector is deprecated." */
			GetVector(name: string): UnityEngine.Vector3;
			/**[Obsolete]--"GetVector is deprecated." */
			GetVector(id: number): UnityEngine.Vector3;
			/**[Obsolete]--"SetVector is deprecated." */
			SetVector(name: string, value: UnityEngine.Vector3): void;
			/**[Obsolete]--"SetVector is deprecated." */
			SetVector(id: number, value: UnityEngine.Vector3): void;
			/**[Obsolete]--"GetQuaternion is deprecated." */
			GetQuaternion(name: string): UnityEngine.Quaternion;
			/**[Obsolete]--"GetQuaternion is deprecated." */
			GetQuaternion(id: number): UnityEngine.Quaternion;
			/**[Obsolete]--"SetQuaternion is deprecated." */
			SetQuaternion(name: string, value: UnityEngine.Quaternion): void;
			/**[Obsolete]--"SetQuaternion is deprecated." */
			SetQuaternion(id: number, value: UnityEngine.Quaternion): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface IAnimationClipSource {
			GetAnimationClips(results: any): void;
		}
		export class SharedBetweenAnimatorsAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StateMachineBehaviour extends UnityEngine.ScriptableObject {
			OnStateEnter(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number): void;
			OnStateEnter(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: any): void;
			OnStateUpdate(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number): void;
			OnStateUpdate(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: any): void;
			OnStateExit(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number): void;
			OnStateExit(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: any): void;
			OnStateMove(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number): void;
			OnStateMove(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: any): void;
			OnStateIK(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number): void;
			OnStateIK(animator: UnityEngine.Animator, stateInfo: UnityEngine.AnimatorStateInfo, layerIndex: number, controller: any): void;
			OnStateMachineEnter(animator: UnityEngine.Animator, stateMachinePathHash: number): void;
			OnStateMachineEnter(animator: UnityEngine.Animator, stateMachinePathHash: number, controller: any): void;
			OnStateMachineExit(animator: UnityEngine.Animator, stateMachinePathHash: number): void;
			OnStateMachineExit(animator: UnityEngine.Animator, stateMachinePathHash: number, controller: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum AvatarTarget { Root = 0, Body = 1, LeftFoot = 2, RightFoot = 3, LeftHand = 4, RightHand = 5, }
		export enum AvatarIKGoal { LeftFoot = 0, RightFoot = 1, LeftHand = 2, RightHand = 3, }
		export enum AvatarIKHint { LeftKnee = 0, RightKnee = 1, LeftElbow = 2, RightElbow = 3, }
		export enum AnimatorControllerParameterType { Float = 1, Int = 3, Bool = 4, Trigger = 9, }
		export enum AnimatorRecorderMode { Offline = 0, Playback = 1, Record = 2, }
		export enum DurationUnit { Fixed = 0, Normalized = 1, }
		export enum AnimatorCullingMode { AlwaysAnimate = 0, CullUpdateTransforms = 1, CullCompletely = 2, BasedOnRenderers = 1, }
		export enum AnimatorUpdateMode { Normal = 0, AnimatePhysics = 1, UnscaledTime = 2, }
		export class AnimatorClipInfo {
			get clip(): UnityEngine.AnimationClip;
			get weight(): number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AnimatorStateInfo {
			get fullPathHash(): number;
			/**[Obsolete]--"AnimatorStateInfo.nameHash has been deprecated. Use AnimatorStateInfo.fullPathHash instead." */
			get nameHash(): number;
			get shortNameHash(): number;
			get normalizedTime(): number;
			get length(): number;
			get speed(): number;
			get speedMultiplier(): number;
			get tagHash(): number;
			get loop(): boolean;
			IsName(name: string): boolean;
			IsTag(tag: string): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AnimatorTransitionInfo {
			get fullPathHash(): number;
			get nameHash(): number;
			get userNameHash(): number;
			get durationUnit(): UnityEngine.DurationUnit;
			get duration(): number;
			get normalizedTime(): number;
			get anyState(): boolean;
			IsName(name: string): boolean;
			IsUserName(name: string): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MatchTargetWeightMask {
			get positionXYZWeight(): UnityEngine.Vector3;
			set positionXYZWeight(value: UnityEngine.Vector3);
			get rotationWeight(): number;
			set rotationWeight(value: number);
			constructor(positionXYZWeight: UnityEngine.Vector3, rotationWeight: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AnimatorControllerParameter extends System.Object {
			get name(): string;
			set name(value: string);
			get nameHash(): number;
			get type(): UnityEngine.AnimatorControllerParameterType;
			set type(value: UnityEngine.AnimatorControllerParameterType);
			get defaultFloat(): number;
			set defaultFloat(value: number);
			get defaultInt(): number;
			set defaultInt(value: number);
			get defaultBool(): boolean;
			set defaultBool(value: boolean);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AnimationClipPair extends System.Object {
			originalClip: UnityEngine.AnimationClip;
			overrideClip: UnityEngine.AnimationClip;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AnimatorOverrideController extends UnityEngine.RuntimeAnimatorController {
			get runtimeAnimatorController(): UnityEngine.RuntimeAnimatorController;
			set runtimeAnimatorController(value: UnityEngine.RuntimeAnimatorController);
			get overridesCount(): number;
			/**[Obsolete]--"AnimatorOverrideController.clips property is deprecated. Use AnimatorOverrideController.GetOverrides and AnimatorOverrideController.ApplyOverrides instead." */
			get clips(): UnityEngine.AnimationClipPair[];
			/**[Obsolete]--"AnimatorOverrideController.clips property is deprecated. Use AnimatorOverrideController.GetOverrides and AnimatorOverrideController.ApplyOverrides instead." */
			set clips(value: UnityEngine.AnimationClipPair[]);
			constructor();
			constructor(controller: UnityEngine.RuntimeAnimatorController);
			GetOverrides(overrides: any): void;
			ApplyOverrides(overrides: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AnimatorUtility extends System.Object {
			constructor();
			static OptimizeTransformHierarchy(go: UnityEngine.GameObject, exposedTransforms: string[]): void;
			static DeoptimizeTransformHierarchy(go: UnityEngine.GameObject): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum BodyDof { SpineFrontBack = 0, SpineLeftRight = 1, SpineRollLeftRight = 2, ChestFrontBack = 3, ChestLeftRight = 4, ChestRollLeftRight = 5, UpperChestFrontBack = 6, UpperChestLeftRight = 7, UpperChestRollLeftRight = 8, LastBodyDof = 9, }
		export enum HeadDof { NeckFrontBack = 0, NeckLeftRight = 1, NeckRollLeftRight = 2, HeadFrontBack = 3, HeadLeftRight = 4, HeadRollLeftRight = 5, LeftEyeDownUp = 6, LeftEyeInOut = 7, RightEyeDownUp = 8, RightEyeInOut = 9, JawDownUp = 10, JawLeftRight = 11, LastHeadDof = 12, }
		export enum LegDof { UpperLegFrontBack = 0, UpperLegInOut = 1, UpperLegRollInOut = 2, LegCloseOpen = 3, LegRollInOut = 4, FootCloseOpen = 5, FootInOut = 6, ToesUpDown = 7, LastLegDof = 8, }
		export enum ArmDof { ShoulderDownUp = 0, ShoulderFrontBack = 1, ArmDownUp = 2, ArmFrontBack = 3, ArmRollInOut = 4, ForeArmCloseOpen = 5, ForeArmRollInOut = 6, HandDownUp = 7, HandInOut = 8, LastArmDof = 9, }
		export enum FingerDof { ProximalDownUp = 0, ProximalInOut = 1, IntermediateCloseOpen = 2, DistalCloseOpen = 3, LastFingerDof = 4, }
		export enum HumanPartDof { Body = 0, Head = 1, LeftLeg = 2, RightLeg = 3, LeftArm = 4, RightArm = 5, LeftThumb = 6, LeftIndex = 7, LeftMiddle = 8, LeftRing = 9, LeftLittle = 10, RightThumb = 11, RightIndex = 12, RightMiddle = 13, RightRing = 14, RightLittle = 15, LastHumanPartDof = 16, }
		export enum HumanBodyBones { Hips = 0, LeftUpperLeg = 1, RightUpperLeg = 2, LeftLowerLeg = 3, RightLowerLeg = 4, LeftFoot = 5, RightFoot = 6, Spine = 7, Chest = 8, UpperChest = 54, Neck = 9, Head = 10, LeftShoulder = 11, RightShoulder = 12, LeftUpperArm = 13, RightUpperArm = 14, LeftLowerArm = 15, RightLowerArm = 16, LeftHand = 17, RightHand = 18, LeftToes = 19, RightToes = 20, LeftEye = 21, RightEye = 22, Jaw = 23, LeftThumbProximal = 24, LeftThumbIntermediate = 25, LeftThumbDistal = 26, LeftIndexProximal = 27, LeftIndexIntermediate = 28, LeftIndexDistal = 29, LeftMiddleProximal = 30, LeftMiddleIntermediate = 31, LeftMiddleDistal = 32, LeftRingProximal = 33, LeftRingIntermediate = 34, LeftRingDistal = 35, LeftLittleProximal = 36, LeftLittleIntermediate = 37, LeftLittleDistal = 38, RightThumbProximal = 39, RightThumbIntermediate = 40, RightThumbDistal = 41, RightIndexProximal = 42, RightIndexIntermediate = 43, RightIndexDistal = 44, RightMiddleProximal = 45, RightMiddleIntermediate = 46, RightMiddleDistal = 47, RightRingProximal = 48, RightRingIntermediate = 49, RightRingDistal = 50, RightLittleProximal = 51, RightLittleIntermediate = 52, RightLittleDistal = 53, LastBone = 55, }
		export class Avatar extends UnityEngine.Object {
			get isValid(): boolean;
			get isHuman(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SkeletonBone {
			name: string;
			position: UnityEngine.Vector3;
			rotation: UnityEngine.Quaternion;
			scale: UnityEngine.Vector3;
			/**[Obsolete][Error]--"transformModified is no longer used and has been deprecated." */
			get transformModified(): number;
			/**[Obsolete][Error]--"transformModified is no longer used and has been deprecated." */
			set transformModified(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HumanLimit {
			get useDefaultValues(): boolean;
			set useDefaultValues(value: boolean);
			get min(): UnityEngine.Vector3;
			set min(value: UnityEngine.Vector3);
			get max(): UnityEngine.Vector3;
			set max(value: UnityEngine.Vector3);
			get center(): UnityEngine.Vector3;
			set center(value: UnityEngine.Vector3);
			get axisLength(): number;
			set axisLength(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HumanBone {
			limit: UnityEngine.HumanLimit;
			get boneName(): string;
			set boneName(value: string);
			get humanName(): string;
			set humanName(value: string);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HumanDescription {
			human: UnityEngine.HumanBone[];
			skeleton: UnityEngine.SkeletonBone[];
			get upperArmTwist(): number;
			set upperArmTwist(value: number);
			get lowerArmTwist(): number;
			set lowerArmTwist(value: number);
			get upperLegTwist(): number;
			set upperLegTwist(value: number);
			get lowerLegTwist(): number;
			set lowerLegTwist(value: number);
			get armStretch(): number;
			set armStretch(value: number);
			get legStretch(): number;
			set legStretch(value: number);
			get feetSpacing(): number;
			set feetSpacing(value: number);
			get hasTranslationDoF(): boolean;
			set hasTranslationDoF(value: boolean);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AvatarBuilder extends System.Object {
			constructor();
			static BuildHumanAvatar(go: UnityEngine.GameObject, humanDescription: UnityEngine.HumanDescription): UnityEngine.Avatar;
			static BuildGenericAvatar(go: UnityEngine.GameObject, rootMotionTransformName: string): UnityEngine.Avatar;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum AvatarMaskBodyPart { Root = 0, Body = 1, Head = 2, LeftLeg = 3, RightLeg = 4, LeftArm = 5, RightArm = 6, LeftFingers = 7, RightFingers = 8, LeftFootIK = 9, RightFootIK = 10, LeftHandIK = 11, RightHandIK = 12, LastBodyPart = 13, }
		export class AvatarMask extends UnityEngine.Object {
			/**[Obsolete]--"AvatarMask.humanoidBodyPartCount is deprecated, use AvatarMaskBodyPart.LastBodyPart instead." */
			get humanoidBodyPartCount(): number;
			get transformCount(): number;
			set transformCount(value: number);
			constructor();
			GetHumanoidBodyPartActive(index: UnityEngine.AvatarMaskBodyPart): boolean;
			SetHumanoidBodyPartActive(index: UnityEngine.AvatarMaskBodyPart, value: boolean): void;
			AddTransformPath(transform: UnityEngine.Transform): void;
			AddTransformPath(transform: UnityEngine.Transform, recursive: boolean): void;
			RemoveTransformPath(transform: UnityEngine.Transform): void;
			RemoveTransformPath(transform: UnityEngine.Transform, recursive: boolean): void;
			GetTransformPath(index: number): string;
			SetTransformPath(index: number, path: string): void;
			GetTransformActive(index: number): boolean;
			SetTransformActive(index: number, value: boolean): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HumanPose {
			bodyPosition: UnityEngine.Vector3;
			bodyRotation: UnityEngine.Quaternion;
			muscles: number[];
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HumanPoseHandler extends System.Object {
			constructor(avatar: UnityEngine.Avatar, root: UnityEngine.Transform);
			Dispose(): void;
			GetHumanPose(humanPose: any): void;
			SetHumanPose(humanPose: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HumanTrait extends System.Object {
			static get MuscleCount(): number;
			static get MuscleName(): string[];
			static get BoneCount(): number;
			static get BoneName(): string[];
			static get RequiredBoneCount(): number;
			constructor();
			static MuscleFromBone(i: number, dofIndex: number): number;
			static BoneFromMuscle(i: number): number;
			static RequiredBone(i: number): boolean;
			static GetMuscleDefaultMin(i: number): number;
			static GetMuscleDefaultMax(i: number): number;
			static GetBoneDefaultHierarchyMass(i: number): number;
			static GetParentBone(i: number): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Motion extends UnityEngine.Object {
			get averageDuration(): number;
			get averageAngularSpeed(): number;
			get averageSpeed(): UnityEngine.Vector3;
			get apparentSpeed(): number;
			get isLooping(): boolean;
			get legacy(): boolean;
			get isHumanMotion(): boolean;
			/**[Obsolete][Error]--"isAnimatorMotion is not supported anymore, please use !legacy instead." */
			get isAnimatorMotion(): boolean;
			/**[Obsolete][Error]--"ValidateIfRetargetable is not supported anymore, please use isHumanMotion instead." */
			ValidateIfRetargetable(val: boolean): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RuntimeAnimatorController extends UnityEngine.Object {
			get animationClips(): UnityEngine.AnimationClip[];
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum AssetBundleLoadResult { Success = 0, Cancelled = 1, NotMatchingCrc = 2, FailedCache = 3, NotValidAssetBundle = 4, NoSerializedData = 5, NotCompatible = 6, AlreadyLoaded = 7, FailedRead = 8, FailedDecompression = 9, FailedWrite = 10, FailedDeleteRecompressionTarget = 11, RecompressionTargetIsLoaded = 12, RecompressionTargetExistsButNotArchive = 13, }
		export class AssetBundle extends UnityEngine.Object {
			/**[Obsolete]--"mainAsset has been made obsolete. Please use the new AssetBundle build system introduced in 5.0 and check BuildAssetBundles documentation for details." */
			get mainAsset(): any;
			get isStreamedSceneAssetBundle(): boolean;
			static UnloadAllAssetBundles(unloadAllObjects: boolean): void;
			static GetAllLoadedAssetBundles(): any;
			static LoadFromFileAsync(path: string): UnityEngine.AssetBundleCreateRequest;
			static LoadFromFileAsync(path: string, crc: number): UnityEngine.AssetBundleCreateRequest;
			static LoadFromFileAsync(path: string, crc: number, offset: number): UnityEngine.AssetBundleCreateRequest;
			static LoadFromFile(path: string): UnityEngine.AssetBundle;
			static LoadFromFile(path: string, crc: number): UnityEngine.AssetBundle;
			static LoadFromFile(path: string, crc: number, offset: number): UnityEngine.AssetBundle;
			static LoadFromMemoryAsync(binary: Uint8Array): UnityEngine.AssetBundleCreateRequest;
			static LoadFromMemoryAsync(binary: Uint8Array, crc: number): UnityEngine.AssetBundleCreateRequest;
			static LoadFromMemory(binary: Uint8Array): UnityEngine.AssetBundle;
			static LoadFromMemory(binary: Uint8Array, crc: number): UnityEngine.AssetBundle;
			static LoadFromStreamAsync(stream: System.IO.Stream, crc: number, managedReadBufferSize: number): UnityEngine.AssetBundleCreateRequest;
			static LoadFromStreamAsync(stream: System.IO.Stream, crc: number): UnityEngine.AssetBundleCreateRequest;
			static LoadFromStreamAsync(stream: System.IO.Stream): UnityEngine.AssetBundleCreateRequest;
			static LoadFromStream(stream: System.IO.Stream, crc: number, managedReadBufferSize: number): UnityEngine.AssetBundle;
			static LoadFromStream(stream: System.IO.Stream, crc: number): UnityEngine.AssetBundle;
			static LoadFromStream(stream: System.IO.Stream): UnityEngine.AssetBundle;
			static RecompressAssetBundleAsync(inputPath: string, outputPath: string, method: UnityEngine.BuildCompression, expectedCRC?: number, priority?: UnityEngine.ThreadPriority): UnityEngine.AssetBundleRecompressOperation;
			/**[Obsolete][Error]--"Method CreateFromFile has been renamed to LoadFromFile (UnityUpgradable) -> LoadFromFile(*)" */
			static CreateFromFile(path: string): UnityEngine.AssetBundle;
			/**[Obsolete][Error]--"Method CreateFromMemory has been renamed to LoadFromMemoryAsync (UnityUpgradable) -> LoadFromMemoryAsync(*)" */
			static CreateFromMemory(binary: Uint8Array): UnityEngine.AssetBundleCreateRequest;
			/**[Obsolete][Error]--"Method CreateFromMemoryImmediate has been renamed to LoadFromMemory (UnityUpgradable) -> LoadFromMemory(*)" */
			static CreateFromMemoryImmediate(binary: Uint8Array): UnityEngine.AssetBundle;
			Contains(name: string): boolean;
			/**[Obsolete][Error]--"Method Load has been deprecated. Script updater cannot update it as the loading behaviour has changed. Please use LoadAsset instead and check the documentation for details." */
			Load(name: string): any;
			/**[Obsolete][Error]--"Method LoadAll has been deprecated. Script updater cannot update it as the loading behaviour has changed. Please use LoadAllAssets instead and check the documentation for details." */
			LoadAll(): any;
			LoadAsset(name: string): any;
			LoadAsset(name: string, type: System.Type): any;
			LoadAssetAsync(name: string): UnityEngine.AssetBundleRequest;
			LoadAssetAsync(name: string, type: System.Type): UnityEngine.AssetBundleRequest;
			LoadAssetWithSubAssets(name: string): any;
			LoadAssetWithSubAssets(name: string, type: System.Type): any;
			LoadAssetWithSubAssetsAsync(name: string): UnityEngine.AssetBundleRequest;
			LoadAssetWithSubAssetsAsync(name: string, type: System.Type): UnityEngine.AssetBundleRequest;
			LoadAllAssets(): any;
			LoadAllAssets(type: System.Type): any;
			LoadAllAssetsAsync(): UnityEngine.AssetBundleRequest;
			LoadAllAssetsAsync(type: System.Type): UnityEngine.AssetBundleRequest;
			/**[Obsolete]--"This method is deprecated.Use GetAllAssetNames() instead." */
			AllAssetNames(): string[];
			Unload(unloadAllLoadedObjects: boolean): void;
			GetAllAssetNames(): string[];
			GetAllScenePaths(): string[];
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssetBundleCreateRequest extends UnityEngine.AsyncOperation {
			get assetBundle(): UnityEngine.AssetBundle;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssetBundleManifest extends UnityEngine.Object {
			GetAllAssetBundles(): string[];
			GetAllAssetBundlesWithVariant(): string[];
			GetAssetBundleHash(assetBundleName: string): UnityEngine.Hash128;
			GetDirectDependencies(assetBundleName: string): string[];
			GetAllDependencies(assetBundleName: string): string[];
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssetBundleRecompressOperation extends UnityEngine.AsyncOperation {
			get humanReadableResult(): string;
			get inputPath(): string;
			get outputPath(): string;
			get result(): UnityEngine.AssetBundleLoadResult;
			get success(): boolean;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssetBundleRequest extends UnityEngine.AsyncOperation {
			get asset(): any;
			get allAssets(): any;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum CompressionType { None = 0, Lzma = 1, Lz4 = 2, Lz4HC = 3, }
		export enum CompressionLevel { None = 0, Fastest = 1, Fast = 2, Normal = 3, High = 4, Maximum = 5, }
		export class BuildCompression {
			static Uncompressed: UnityEngine.BuildCompression;
			static LZ4: UnityEngine.BuildCompression;
			static LZMA: UnityEngine.BuildCompression;
			static UncompressedRuntime: UnityEngine.BuildCompression;
			static LZ4Runtime: UnityEngine.BuildCompression;
			get compression(): UnityEngine.CompressionType;
			set compression(value: UnityEngine.CompressionType);
			get level(): UnityEngine.CompressionLevel;
			set level(value: UnityEngine.CompressionLevel);
			get blockSize(): number;
			set blockSize(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum AudioSpeakerMode { Raw = 0, Mono = 1, Stereo = 2, Quad = 3, Surround = 4, Mode5point1 = 5, Mode7point1 = 6, Prologic = 7, }
		export enum AudioDataLoadState { Unloaded = 0, Loading = 1, Loaded = 2, Failed = 3, }
		export class AudioConfiguration {
			speakerMode: UnityEngine.AudioSpeakerMode;
			dspBufferSize: number;
			sampleRate: number;
			numRealVoices: number;
			numVirtualVoices: number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AudioSettings extends System.Object {
			static get driverCapabilities(): UnityEngine.AudioSpeakerMode;
			static get speakerMode(): UnityEngine.AudioSpeakerMode;
			static set speakerMode(value: UnityEngine.AudioSpeakerMode);
			static get dspTime(): number;
			static get outputSampleRate(): number;
			static set outputSampleRate(value: number);
			/**[Obsolete][Error]--"AudioSettings.driverCaps is obsolete. Use driverCapabilities instead (UnityUpgradable) -> driverCapabilities" */
			static get driverCaps(): UnityEngine.AudioSpeakerMode;
			constructor();
			static GetDSPBufferSize(bufferLength: any, numBuffers: any): void;
			/**[Obsolete]--"AudioSettings.SetDSPBufferSize is deprecated and has been replaced by audio project settings and the AudioSettings.GetConfiguration/AudioSettings.Reset API." */
			static SetDSPBufferSize(bufferLength: number, numBuffers: number): void;
			static GetSpatializerPluginNames(): string[];
			static GetSpatializerPluginName(): string;
			static SetSpatializerPluginName(pluginName: string): void;
			static GetConfiguration(): UnityEngine.AudioConfiguration;
			static Reset(config: UnityEngine.AudioConfiguration): boolean;
			static add_OnAudioConfigurationChanged(value: UnityEngine.AudioSettings.AudioConfigurationChangeHandler): void;
			static remove_OnAudioConfigurationChanged(value: UnityEngine.AudioSettings.AudioConfigurationChangeHandler): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum AudioCompressionFormat { PCM = 0, Vorbis = 1, ADPCM = 2, MP3 = 3, VAG = 4, HEVAG = 5, XMA = 6, AAC = 7, GCADPCM = 8, ATRAC9 = 9, }
		export enum AudioClipLoadType { DecompressOnLoad = 0, CompressedInMemory = 1, Streaming = 2, }
		export class AudioClip extends UnityEngine.Object {
			get length(): number;
			get samples(): number;
			get channels(): number;
			get frequency(): number;
			/**[Obsolete]--"Use AudioClip.loadState instead to get more detailed information about the loading process." */
			get isReadyToPlay(): boolean;
			get loadType(): UnityEngine.AudioClipLoadType;
			get preloadAudioData(): boolean;
			get ambisonic(): boolean;
			get loadState(): UnityEngine.AudioDataLoadState;
			get loadInBackground(): boolean;
			/**[Obsolete]--"The _3D argument of AudioClip is deprecated. Use the spatialBlend property of AudioSource instead to morph between 2D and 3D playback." */
			static Create(name: string, lengthSamples: number, channels: number, frequency: number, _3D: boolean, stream: boolean): UnityEngine.AudioClip;
			/**[Obsolete]--"The _3D argument of AudioClip is deprecated. Use the spatialBlend property of AudioSource instead to morph between 2D and 3D playback." */
			static Create(name: string, lengthSamples: number, channels: number, frequency: number, _3D: boolean, stream: boolean, pcmreadercallback: UnityEngine.AudioClip.PCMReaderCallback): UnityEngine.AudioClip;
			/**[Obsolete]--"The _3D argument of AudioClip is deprecated. Use the spatialBlend property of AudioSource instead to morph between 2D and 3D playback." */
			static Create(name: string, lengthSamples: number, channels: number, frequency: number, _3D: boolean, stream: boolean, pcmreadercallback: UnityEngine.AudioClip.PCMReaderCallback, pcmsetpositioncallback: UnityEngine.AudioClip.PCMSetPositionCallback): UnityEngine.AudioClip;
			static Create(name: string, lengthSamples: number, channels: number, frequency: number, stream: boolean): UnityEngine.AudioClip;
			static Create(name: string, lengthSamples: number, channels: number, frequency: number, stream: boolean, pcmreadercallback: UnityEngine.AudioClip.PCMReaderCallback): UnityEngine.AudioClip;
			static Create(name: string, lengthSamples: number, channels: number, frequency: number, stream: boolean, pcmreadercallback: UnityEngine.AudioClip.PCMReaderCallback, pcmsetpositioncallback: UnityEngine.AudioClip.PCMSetPositionCallback): UnityEngine.AudioClip;
			LoadAudioData(): boolean;
			UnloadAudioData(): boolean;
			GetData(data: number[], offsetSamples: number): boolean;
			SetData(data: number[], offsetSamples: number): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum AudioVelocityUpdateMode { Auto = 0, Fixed = 1, Dynamic = 2, }
		export class AudioBehaviour extends UnityEngine.Behaviour {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AudioListener extends UnityEngine.AudioBehaviour {
			static get volume(): number;
			static set volume(value: number);
			static get pause(): boolean;
			static set pause(value: boolean);
			get velocityUpdateMode(): UnityEngine.AudioVelocityUpdateMode;
			set velocityUpdateMode(value: UnityEngine.AudioVelocityUpdateMode);
			constructor();
			/**[Obsolete]--"GetOutputData returning a float[] is deprecated, use GetOutputData and pass a pre allocated array instead." */
			static GetOutputData(numSamples: number, channel: number): number[];
			static GetOutputData(samples: number[], channel: number): void;
			/**[Obsolete]--"GetSpectrumData returning a float[] is deprecated, use GetOutputData and pass a pre allocated array instead." */
			static GetSpectrumData(numSamples: number, channel: number, window: UnityEngine.FFTWindow): number[];
			static GetSpectrumData(samples: number[], channel: number, window: UnityEngine.FFTWindow): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum FFTWindow { Rectangular = 0, Triangle = 1, Hamming = 2, Hanning = 3, Blackman = 4, BlackmanHarris = 5, }
		export enum AudioRolloffMode { Logarithmic = 0, Linear = 1, Custom = 2, }
		export enum AudioSourceCurveType { CustomRolloff = 0, SpatialBlend = 1, ReverbZoneMix = 2, Spread = 3, }
		export class AudioSource extends UnityEngine.AudioBehaviour {
			get volume(): number;
			set volume(value: number);
			get pitch(): number;
			set pitch(value: number);
			get time(): number;
			set time(value: number);
			get timeSamples(): number;
			set timeSamples(value: number);
			get clip(): UnityEngine.AudioClip;
			set clip(value: UnityEngine.AudioClip);
			get outputAudioMixerGroup(): any;
			set outputAudioMixerGroup(value: any);
			get isPlaying(): boolean;
			get isVirtual(): boolean;
			get loop(): boolean;
			set loop(value: boolean);
			get ignoreListenerVolume(): boolean;
			set ignoreListenerVolume(value: boolean);
			get playOnAwake(): boolean;
			set playOnAwake(value: boolean);
			get ignoreListenerPause(): boolean;
			set ignoreListenerPause(value: boolean);
			get velocityUpdateMode(): UnityEngine.AudioVelocityUpdateMode;
			set velocityUpdateMode(value: UnityEngine.AudioVelocityUpdateMode);
			get panStereo(): number;
			set panStereo(value: number);
			get spatialBlend(): number;
			set spatialBlend(value: number);
			get spatialize(): boolean;
			set spatialize(value: boolean);
			get spatializePostEffects(): boolean;
			set spatializePostEffects(value: boolean);
			get reverbZoneMix(): number;
			set reverbZoneMix(value: number);
			get bypassEffects(): boolean;
			set bypassEffects(value: boolean);
			get bypassListenerEffects(): boolean;
			set bypassListenerEffects(value: boolean);
			get bypassReverbZones(): boolean;
			set bypassReverbZones(value: boolean);
			get dopplerLevel(): number;
			set dopplerLevel(value: number);
			get spread(): number;
			set spread(value: number);
			get priority(): number;
			set priority(value: number);
			get mute(): boolean;
			set mute(value: boolean);
			get minDistance(): number;
			set minDistance(value: number);
			get maxDistance(): number;
			set maxDistance(value: number);
			get rolloffMode(): UnityEngine.AudioRolloffMode;
			set rolloffMode(value: UnityEngine.AudioRolloffMode);
			/**[Obsolete][Error]--"minVolume is not supported anymore. Use min-, maxDistance and rolloffMode instead." */
			get minVolume(): number;
			/**[Obsolete][Error]--"minVolume is not supported anymore. Use min-, maxDistance and rolloffMode instead." */
			set minVolume(value: number);
			/**[Obsolete][Error]--"maxVolume is not supported anymore. Use min-, maxDistance and rolloffMode instead." */
			get maxVolume(): number;
			/**[Obsolete][Error]--"maxVolume is not supported anymore. Use min-, maxDistance and rolloffMode instead." */
			set maxVolume(value: number);
			/**[Obsolete][Error]--"rolloffFactor is not supported anymore. Use min-, maxDistance and rolloffMode instead." */
			get rolloffFactor(): number;
			/**[Obsolete][Error]--"rolloffFactor is not supported anymore. Use min-, maxDistance and rolloffMode instead." */
			set rolloffFactor(value: number);
			/**[Obsolete][Error]--"AudioSource.panLevel has been deprecated. Use AudioSource.spatialBlend instead (UnityUpgradable) -> spatialBlend" */
			get panLevel(): number;
			/**[Obsolete][Error]--"AudioSource.panLevel has been deprecated. Use AudioSource.spatialBlend instead (UnityUpgradable) -> spatialBlend" */
			set panLevel(value: number);
			/**[Obsolete][Error]--"AudioSource.pan has been deprecated. Use AudioSource.panStereo instead (UnityUpgradable) -> panStereo" */
			get pan(): number;
			/**[Obsolete][Error]--"AudioSource.pan has been deprecated. Use AudioSource.panStereo instead (UnityUpgradable) -> panStereo" */
			set pan(value: number);
			constructor();
			static PlayClipAtPoint(clip: UnityEngine.AudioClip, position: UnityEngine.Vector3): void;
			static PlayClipAtPoint(clip: UnityEngine.AudioClip, position: UnityEngine.Vector3, volume: number): void;
			Play(delay: number): void;
			Play(): void;
			PlayDelayed(delay: number): void;
			PlayScheduled(time: number): void;
			SetScheduledStartTime(time: number): void;
			SetScheduledEndTime(time: number): void;
			Stop(): void;
			Pause(): void;
			UnPause(): void;
			PlayOneShot(clip: UnityEngine.AudioClip): void;
			PlayOneShot(clip: UnityEngine.AudioClip, volumeScale: number): void;
			SetCustomCurve(type: UnityEngine.AudioSourceCurveType, curve: UnityEngine.AnimationCurve): void;
			GetCustomCurve(type: UnityEngine.AudioSourceCurveType): UnityEngine.AnimationCurve;
			/**[Obsolete]--"GetOutputData return a float[] is deprecated, use GetOutputData passing a pre allocated array instead." */
			GetOutputData(numSamples: number, channel: number): number[];
			GetOutputData(samples: number[], channel: number): void;
			/**[Obsolete]--"GetSpectrumData returning a float[] is deprecated, use GetSpectrumData passing a pre allocated array instead." */
			GetSpectrumData(numSamples: number, channel: number, window: UnityEngine.FFTWindow): number[];
			GetSpectrumData(samples: number[], channel: number, window: UnityEngine.FFTWindow): void;
			SetSpatializerFloat(index: number, value: number): boolean;
			GetSpatializerFloat(index: number, value: any): boolean;
			SetAmbisonicDecoderFloat(index: number, value: number): boolean;
			GetAmbisonicDecoderFloat(index: number, value: any): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum AudioReverbPreset { Off = 0, Generic = 1, PaddedCell = 2, Room = 3, Bathroom = 4, Livingroom = 5, Stoneroom = 6, Auditorium = 7, Concerthall = 8, Cave = 9, Arena = 10, Hangar = 11, CarpetedHallway = 12, Hallway = 13, StoneCorridor = 14, Alley = 15, Forest = 16, City = 17, Mountains = 18, Quarry = 19, Plain = 20, ParkingLot = 21, SewerPipe = 22, Underwater = 23, Drugged = 24, Dizzy = 25, Psychotic = 26, User = 27, }
		export class AudioReverbZone extends UnityEngine.Behaviour {
			get minDistance(): number;
			set minDistance(value: number);
			get maxDistance(): number;
			set maxDistance(value: number);
			get reverbPreset(): UnityEngine.AudioReverbPreset;
			set reverbPreset(value: UnityEngine.AudioReverbPreset);
			get room(): number;
			set room(value: number);
			get roomHF(): number;
			set roomHF(value: number);
			get roomLF(): number;
			set roomLF(value: number);
			get decayTime(): number;
			set decayTime(value: number);
			get decayHFRatio(): number;
			set decayHFRatio(value: number);
			get reflections(): number;
			set reflections(value: number);
			get reflectionsDelay(): number;
			set reflectionsDelay(value: number);
			get reverb(): number;
			set reverb(value: number);
			get reverbDelay(): number;
			set reverbDelay(value: number);
			get HFReference(): number;
			set HFReference(value: number);
			get LFReference(): number;
			set LFReference(value: number);
			/**[Obsolete]--"roomRolloffFactor is no longer supported." */
			get roomRolloffFactor(): number;
			/**[Obsolete]--"roomRolloffFactor is no longer supported." */
			set roomRolloffFactor(value: number);
			get diffusion(): number;
			set diffusion(value: number);
			get density(): number;
			set density(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AudioLowPassFilter extends UnityEngine.Behaviour {
			get cutoffFrequency(): number;
			set cutoffFrequency(value: number);
			get customCutoffCurve(): UnityEngine.AnimationCurve;
			set customCutoffCurve(value: UnityEngine.AnimationCurve);
			get lowpassResonanceQ(): number;
			set lowpassResonanceQ(value: number);
			/**[Obsolete][Error]--"AudioLowPassFilter.lowpassResonaceQ is obsolete. Use lowpassResonanceQ instead (UnityUpgradable) -> lowpassResonanceQ" */
			get lowpassResonaceQ(): number;
			/**[Obsolete][Error]--"AudioLowPassFilter.lowpassResonaceQ is obsolete. Use lowpassResonanceQ instead (UnityUpgradable) -> lowpassResonanceQ" */
			set lowpassResonaceQ(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AudioHighPassFilter extends UnityEngine.Behaviour {
			get cutoffFrequency(): number;
			set cutoffFrequency(value: number);
			get highpassResonanceQ(): number;
			set highpassResonanceQ(value: number);
			/**[Obsolete][Error]--"AudioHighPassFilter.highpassResonaceQ is obsolete. Use highpassResonanceQ instead (UnityUpgradable) -> highpassResonanceQ" */
			get highpassResonaceQ(): number;
			/**[Obsolete][Error]--"AudioHighPassFilter.highpassResonaceQ is obsolete. Use highpassResonanceQ instead (UnityUpgradable) -> highpassResonanceQ" */
			set highpassResonaceQ(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AudioDistortionFilter extends UnityEngine.Behaviour {
			get distortionLevel(): number;
			set distortionLevel(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AudioEchoFilter extends UnityEngine.Behaviour {
			get delay(): number;
			set delay(value: number);
			get decayRatio(): number;
			set decayRatio(value: number);
			get dryMix(): number;
			set dryMix(value: number);
			get wetMix(): number;
			set wetMix(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AudioChorusFilter extends UnityEngine.Behaviour {
			get dryMix(): number;
			set dryMix(value: number);
			get wetMix1(): number;
			set wetMix1(value: number);
			get wetMix2(): number;
			set wetMix2(value: number);
			get wetMix3(): number;
			set wetMix3(value: number);
			get delay(): number;
			set delay(value: number);
			get rate(): number;
			set rate(value: number);
			get depth(): number;
			set depth(value: number);
			/**[Obsolete]--"feedback is deprecated, this property does nothing." */
			get feedback(): number;
			/**[Obsolete]--"feedback is deprecated, this property does nothing." */
			set feedback(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AudioReverbFilter extends UnityEngine.Behaviour {
			get reverbPreset(): UnityEngine.AudioReverbPreset;
			set reverbPreset(value: UnityEngine.AudioReverbPreset);
			get dryLevel(): number;
			set dryLevel(value: number);
			get room(): number;
			set room(value: number);
			get roomHF(): number;
			set roomHF(value: number);
			/**[Obsolete]--"roomRolloffFactor is no longer supported." */
			get roomRolloffFactor(): number;
			/**[Obsolete]--"roomRolloffFactor is no longer supported." */
			set roomRolloffFactor(value: number);
			get decayTime(): number;
			set decayTime(value: number);
			get decayHFRatio(): number;
			set decayHFRatio(value: number);
			get reflectionsLevel(): number;
			set reflectionsLevel(value: number);
			get reflectionsDelay(): number;
			set reflectionsDelay(value: number);
			get reverbLevel(): number;
			set reverbLevel(value: number);
			get reverbDelay(): number;
			set reverbDelay(value: number);
			get diffusion(): number;
			set diffusion(value: number);
			get density(): number;
			set density(value: number);
			get hfReference(): number;
			set hfReference(value: number);
			get roomLF(): number;
			set roomLF(value: number);
			get lfReference(): number;
			set lfReference(value: number);
			/**[Obsolete][Error]--"AudioReverbFilter.lFReference is obsolete. Use lfReference instead (UnityUpgradable) -> lfReference" */
			get lFReference(): number;
			/**[Obsolete][Error]--"AudioReverbFilter.lFReference is obsolete. Use lfReference instead (UnityUpgradable) -> lfReference" */
			set lFReference(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Microphone extends System.Object {
			static get devices(): string[];
			constructor();
			static Start(deviceName: string, loop: boolean, lengthSec: number, frequency: number): UnityEngine.AudioClip;
			static End(deviceName: string): void;
			static IsRecording(deviceName: string): boolean;
			static GetPosition(deviceName: string): number;
			static GetDeviceCaps(deviceName: string, minFreq: any, maxFreq: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MovieTexture extends UnityEngine.Texture {
			get audioClip(): UnityEngine.AudioClip;
			get loop(): boolean;
			set loop(value: boolean);
			get isPlaying(): boolean;
			get isReadyToPlay(): boolean;
			get duration(): number;
			Play(): void;
			Stop(): void;
			Pause(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WebCamDevice {
			get name(): string;
			get isFrontFacing(): boolean;
			get kind(): UnityEngine.WebCamKind;
			get depthCameraName(): string;
			get isAutoFocusPointSupported(): boolean;
			get availableResolutions(): UnityEngine.Resolution[];
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WebCamTexture extends UnityEngine.Texture {
			get isPlaying(): boolean;
			get deviceName(): string;
			set deviceName(value: string);
			get requestedFPS(): number;
			set requestedFPS(value: number);
			get requestedWidth(): number;
			set requestedWidth(value: number);
			get requestedHeight(): number;
			set requestedHeight(value: number);
			static get devices(): UnityEngine.WebCamDevice[];
			get videoRotationAngle(): number;
			get videoVerticallyMirrored(): boolean;
			get didUpdateThisFrame(): boolean;
			get autoFocusPoint(): any;
			set autoFocusPoint(value: any);
			get isDepth(): boolean;
			constructor(deviceName: string, requestedWidth: number, requestedHeight: number, requestedFPS: number);
			constructor(deviceName: string, requestedWidth: number, requestedHeight: number);
			constructor(deviceName: string);
			constructor(requestedWidth: number, requestedHeight: number, requestedFPS: number);
			constructor(requestedWidth: number, requestedHeight: number);
			constructor();
			Play(): void;
			Pause(): void;
			Stop(): void;
			GetPixel(x: number, y: number): UnityEngine.Color;
			GetPixels(): UnityEngine.Color[];
			GetPixels(x: number, y: number, blockWidth: number, blockHeight: number): UnityEngine.Color[];
			GetPixels32(colors: UnityEngine.Color32[]): UnityEngine.Color32[];
			GetPixels32(): UnityEngine.Color32[];
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AudioRenderer extends System.Object {
			constructor();
			static Start(): boolean;
			static Stop(): boolean;
			static GetSampleCountForCaptureFrame(): number;
			static Render(buffer: any): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum WebCamFlags { FrontFacing = 1, AutoFocusPointSupported = 2, }
		export enum WebCamKind { WideAngle = 1, Telephoto = 2, ColorAndDepth = 3, }
		export class ClothSphereColliderPair {
			get first(): UnityEngine.SphereCollider;
			set first(value: UnityEngine.SphereCollider);
			get second(): UnityEngine.SphereCollider;
			set second(value: UnityEngine.SphereCollider);
			constructor(a: UnityEngine.SphereCollider);
			constructor(a: UnityEngine.SphereCollider, b: UnityEngine.SphereCollider);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Cloth extends UnityEngine.Component {
			/**[Obsolete][Error]--"Deprecated. Cloth.selfCollisions is no longer supported since Unity 5.0." */
			get selfCollision(): boolean;
			/**[Obsolete][Error]--"Deprecated. Cloth.selfCollisions is no longer supported since Unity 5.0." */
			set selfCollision(value: boolean);
			get vertices(): UnityEngine.Vector3[];
			get normals(): UnityEngine.Vector3[];
			/**[Obsolete]--"useContinuousCollision is no longer supported, use enableContinuousCollision instead" */
			get useContinuousCollision(): number;
			/**[Obsolete]--"useContinuousCollision is no longer supported, use enableContinuousCollision instead" */
			set useContinuousCollision(value: number);
			get coefficients(): UnityEngine.ClothSkinningCoefficient[];
			set coefficients(value: UnityEngine.ClothSkinningCoefficient[]);
			/**[Obsolete]--"Parameter solverFrequency is obsolete and no longer supported. Please use clothSolverFrequency instead." */
			get solverFrequency(): boolean;
			/**[Obsolete]--"Parameter solverFrequency is obsolete and no longer supported. Please use clothSolverFrequency instead." */
			set solverFrequency(value: boolean);
			get capsuleColliders(): UnityEngine.CapsuleCollider[];
			set capsuleColliders(value: UnityEngine.CapsuleCollider[]);
			get sphereColliders(): UnityEngine.ClothSphereColliderPair[];
			set sphereColliders(value: UnityEngine.ClothSphereColliderPair[]);
			get sleepThreshold(): number;
			set sleepThreshold(value: number);
			get bendingStiffness(): number;
			set bendingStiffness(value: number);
			get stretchingStiffness(): number;
			set stretchingStiffness(value: number);
			get damping(): number;
			set damping(value: number);
			get externalAcceleration(): UnityEngine.Vector3;
			set externalAcceleration(value: UnityEngine.Vector3);
			get randomAcceleration(): UnityEngine.Vector3;
			set randomAcceleration(value: UnityEngine.Vector3);
			get useGravity(): boolean;
			set useGravity(value: boolean);
			get enabled(): boolean;
			set enabled(value: boolean);
			get friction(): number;
			set friction(value: number);
			get collisionMassScale(): number;
			set collisionMassScale(value: number);
			get enableContinuousCollision(): boolean;
			set enableContinuousCollision(value: boolean);
			get useVirtualParticles(): number;
			set useVirtualParticles(value: number);
			get worldVelocityScale(): number;
			set worldVelocityScale(value: number);
			get worldAccelerationScale(): number;
			set worldAccelerationScale(value: number);
			get clothSolverFrequency(): number;
			set clothSolverFrequency(value: number);
			get useTethers(): boolean;
			set useTethers(value: boolean);
			get stiffnessFrequency(): number;
			set stiffnessFrequency(value: number);
			get selfCollisionDistance(): number;
			set selfCollisionDistance(value: number);
			get selfCollisionStiffness(): number;
			set selfCollisionStiffness(value: number);
			constructor();
			ClearTransformMotion(): void;
			SetEnabledFading(enabled: boolean, interpolationTime: number): void;
			SetEnabledFading(enabled: boolean): void;
			GetVirtualParticleIndices(indices: any): void;
			SetVirtualParticleIndices(indices: any): void;
			GetVirtualParticleWeights(weights: any): void;
			SetVirtualParticleWeights(weights: any): void;
			GetSelfAndInterCollisionIndices(indices: any): void;
			SetSelfAndInterCollisionIndices(indices: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ClothSkinningCoefficient {
			maxDistance: number;
			collisionSphereDistance: number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ClusterInputType { Button = 0, Axis = 1, Tracker = 2, CustomProvidedInput = 3, }
		export class ClusterInput extends System.Object {
			constructor();
			static GetAxis(name: string): number;
			static GetButton(name: string): boolean;
			static GetTrackerPosition(name: string): UnityEngine.Vector3;
			static GetTrackerRotation(name: string): UnityEngine.Quaternion;
			static SetAxis(name: string, value: number): void;
			static SetButton(name: string, value: boolean): void;
			static SetTrackerPosition(name: string, value: UnityEngine.Vector3): void;
			static SetTrackerRotation(name: string, value: UnityEngine.Quaternion): void;
			static AddInput(name: string, deviceName: string, serverUrl: string, index: number, type: UnityEngine.ClusterInputType): boolean;
			static EditInput(name: string, deviceName: string, serverUrl: string, index: number, type: UnityEngine.ClusterInputType): boolean;
			static CheckConnectionToServer(name: string): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ClusterNetwork extends System.Object {
			static get isMasterOfCluster(): boolean;
			static get isDisconnected(): boolean;
			static get nodeIndex(): number;
			static set nodeIndex(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AndroidInput extends System.Object {
			static get touchCountSecondary(): number;
			static get secondaryTouchEnabled(): boolean;
			static get secondaryTouchWidth(): number;
			static get secondaryTouchHeight(): number;
			static GetSecondaryTouch(index: number): UnityEngine.Touch;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AndroidJavaObject extends System.Object {
			constructor(className: string, args: any);
			Dispose(): void;
			Call(methodName: string, args: any): void;
			CallStatic(methodName: string, args: any): void;
			GetRawObject(): System.IntPtr;
			GetRawClass(): System.IntPtr;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AndroidJavaClass extends UnityEngine.AndroidJavaObject {
			constructor(className: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AndroidJavaRunnable extends Function {
		}
		export class AndroidJavaProxy extends System.Object {
			javaInterface: UnityEngine.AndroidJavaClass;
			constructor(javaInterface: string);
			constructor(javaInterface: UnityEngine.AndroidJavaClass);
			Invoke(methodName: string, args: any): UnityEngine.AndroidJavaObject;
			Invoke(methodName: string, javaArgs: UnityEngine.AndroidJavaObject[]): UnityEngine.AndroidJavaObject;
			equals(obj: UnityEngine.AndroidJavaObject): boolean;
			hashCode(): number;
			toString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class jvalue {
			z: boolean;
			b: number;
			c: string;
			s: number;
			i: number;
			j: number;
			f: number;
			d: number;
			l: System.IntPtr;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AndroidJNIHelper extends System.Object {
			static get debug(): boolean;
			static set debug(value: boolean);
			static GetConstructorID(javaClass: System.IntPtr): System.IntPtr;
			static GetConstructorID(javaClass: System.IntPtr, signature: string): System.IntPtr;
			static GetConstructorID(jclass: System.IntPtr, args: any): System.IntPtr;
			static GetMethodID(javaClass: System.IntPtr, methodName: string): System.IntPtr;
			static GetMethodID(javaClass: System.IntPtr, methodName: string, signature: string): System.IntPtr;
			static GetMethodID(javaClass: System.IntPtr, methodName: string, signature: string, isStatic: boolean): System.IntPtr;
			static GetMethodID(jclass: System.IntPtr, methodName: string, args: any, isStatic: boolean): System.IntPtr;
			static GetFieldID(javaClass: System.IntPtr, fieldName: string): System.IntPtr;
			static GetFieldID(javaClass: System.IntPtr, fieldName: string, signature: string): System.IntPtr;
			static GetFieldID(javaClass: System.IntPtr, fieldName: string, signature: string, isStatic: boolean): System.IntPtr;
			static CreateJavaRunnable(jrunnable: UnityEngine.AndroidJavaRunnable): System.IntPtr;
			static CreateJavaProxy(proxy: UnityEngine.AndroidJavaProxy): System.IntPtr;
			static ConvertToJNIArray(array: System.Array): System.IntPtr;
			static CreateJNIArgArray(args: any): UnityEngine.jvalue[];
			static DeleteJNIArgArray(args: any, jniArgs: UnityEngine.jvalue[]): void;
			static GetSignature(obj: any): string;
			static GetSignature(args: any): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AndroidJNI extends System.Object {
			static AttachCurrentThread(): number;
			static DetachCurrentThread(): number;
			static GetVersion(): number;
			static FindClass(name: string): System.IntPtr;
			static FromReflectedMethod(refMethod: System.IntPtr): System.IntPtr;
			static FromReflectedField(refField: System.IntPtr): System.IntPtr;
			static ToReflectedMethod(clazz: System.IntPtr, methodID: System.IntPtr, isStatic: boolean): System.IntPtr;
			static ToReflectedField(clazz: System.IntPtr, fieldID: System.IntPtr, isStatic: boolean): System.IntPtr;
			static GetSuperclass(clazz: System.IntPtr): System.IntPtr;
			static IsAssignableFrom(clazz1: System.IntPtr, clazz2: System.IntPtr): boolean;
			static Throw(obj: System.IntPtr): number;
			static ThrowNew(clazz: System.IntPtr, message: string): number;
			static ExceptionOccurred(): System.IntPtr;
			static ExceptionDescribe(): void;
			static ExceptionClear(): void;
			static FatalError(message: string): void;
			static PushLocalFrame(capacity: number): number;
			static PopLocalFrame(ptr: System.IntPtr): System.IntPtr;
			static NewGlobalRef(obj: System.IntPtr): System.IntPtr;
			static DeleteGlobalRef(obj: System.IntPtr): void;
			static NewLocalRef(obj: System.IntPtr): System.IntPtr;
			static DeleteLocalRef(obj: System.IntPtr): void;
			static IsSameObject(obj1: System.IntPtr, obj2: System.IntPtr): boolean;
			static EnsureLocalCapacity(capacity: number): number;
			static AllocObject(clazz: System.IntPtr): System.IntPtr;
			static NewObject(clazz: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): System.IntPtr;
			static GetObjectClass(obj: System.IntPtr): System.IntPtr;
			static IsInstanceOf(obj: System.IntPtr, clazz: System.IntPtr): boolean;
			static GetMethodID(clazz: System.IntPtr, name: string, sig: string): System.IntPtr;
			static GetFieldID(clazz: System.IntPtr, name: string, sig: string): System.IntPtr;
			static GetStaticMethodID(clazz: System.IntPtr, name: string, sig: string): System.IntPtr;
			static GetStaticFieldID(clazz: System.IntPtr, name: string, sig: string): System.IntPtr;
			static NewStringUTF(bytes: string): System.IntPtr;
			static GetStringUTFLength(str: System.IntPtr): number;
			static GetStringUTFChars(str: System.IntPtr): string;
			static CallStringMethod(obj: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): string;
			static CallObjectMethod(obj: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): System.IntPtr;
			static CallIntMethod(obj: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): number;
			static CallBooleanMethod(obj: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): boolean;
			static CallShortMethod(obj: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): number;
			static CallByteMethod(obj: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): number;
			static CallCharMethod(obj: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): string;
			static CallFloatMethod(obj: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): number;
			static CallDoubleMethod(obj: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): number;
			static CallLongMethod(obj: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): number;
			static CallVoidMethod(obj: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): void;
			static GetStringField(obj: System.IntPtr, fieldID: System.IntPtr): string;
			static GetObjectField(obj: System.IntPtr, fieldID: System.IntPtr): System.IntPtr;
			static GetBooleanField(obj: System.IntPtr, fieldID: System.IntPtr): boolean;
			static GetByteField(obj: System.IntPtr, fieldID: System.IntPtr): number;
			static GetCharField(obj: System.IntPtr, fieldID: System.IntPtr): string;
			static GetShortField(obj: System.IntPtr, fieldID: System.IntPtr): number;
			static GetIntField(obj: System.IntPtr, fieldID: System.IntPtr): number;
			static GetLongField(obj: System.IntPtr, fieldID: System.IntPtr): number;
			static GetFloatField(obj: System.IntPtr, fieldID: System.IntPtr): number;
			static GetDoubleField(obj: System.IntPtr, fieldID: System.IntPtr): number;
			static SetStringField(obj: System.IntPtr, fieldID: System.IntPtr, val: string): void;
			static SetObjectField(obj: System.IntPtr, fieldID: System.IntPtr, val: System.IntPtr): void;
			static SetBooleanField(obj: System.IntPtr, fieldID: System.IntPtr, val: boolean): void;
			static SetByteField(obj: System.IntPtr, fieldID: System.IntPtr, val: number): void;
			static SetCharField(obj: System.IntPtr, fieldID: System.IntPtr, val: string): void;
			static SetShortField(obj: System.IntPtr, fieldID: System.IntPtr, val: number): void;
			static SetIntField(obj: System.IntPtr, fieldID: System.IntPtr, val: number): void;
			static SetLongField(obj: System.IntPtr, fieldID: System.IntPtr, val: number): void;
			static SetFloatField(obj: System.IntPtr, fieldID: System.IntPtr, val: number): void;
			static SetDoubleField(obj: System.IntPtr, fieldID: System.IntPtr, val: number): void;
			static CallStaticStringMethod(clazz: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): string;
			static CallStaticObjectMethod(clazz: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): System.IntPtr;
			static CallStaticIntMethod(clazz: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): number;
			static CallStaticBooleanMethod(clazz: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): boolean;
			static CallStaticShortMethod(clazz: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): number;
			static CallStaticByteMethod(clazz: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): number;
			static CallStaticCharMethod(clazz: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): string;
			static CallStaticFloatMethod(clazz: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): number;
			static CallStaticDoubleMethod(clazz: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): number;
			static CallStaticLongMethod(clazz: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): number;
			static CallStaticVoidMethod(clazz: System.IntPtr, methodID: System.IntPtr, args: UnityEngine.jvalue[]): void;
			static GetStaticStringField(clazz: System.IntPtr, fieldID: System.IntPtr): string;
			static GetStaticObjectField(clazz: System.IntPtr, fieldID: System.IntPtr): System.IntPtr;
			static GetStaticBooleanField(clazz: System.IntPtr, fieldID: System.IntPtr): boolean;
			static GetStaticByteField(clazz: System.IntPtr, fieldID: System.IntPtr): number;
			static GetStaticCharField(clazz: System.IntPtr, fieldID: System.IntPtr): string;
			static GetStaticShortField(clazz: System.IntPtr, fieldID: System.IntPtr): number;
			static GetStaticIntField(clazz: System.IntPtr, fieldID: System.IntPtr): number;
			static GetStaticLongField(clazz: System.IntPtr, fieldID: System.IntPtr): number;
			static GetStaticFloatField(clazz: System.IntPtr, fieldID: System.IntPtr): number;
			static GetStaticDoubleField(clazz: System.IntPtr, fieldID: System.IntPtr): number;
			static SetStaticStringField(clazz: System.IntPtr, fieldID: System.IntPtr, val: string): void;
			static SetStaticObjectField(clazz: System.IntPtr, fieldID: System.IntPtr, val: System.IntPtr): void;
			static SetStaticBooleanField(clazz: System.IntPtr, fieldID: System.IntPtr, val: boolean): void;
			static SetStaticByteField(clazz: System.IntPtr, fieldID: System.IntPtr, val: number): void;
			static SetStaticCharField(clazz: System.IntPtr, fieldID: System.IntPtr, val: string): void;
			static SetStaticShortField(clazz: System.IntPtr, fieldID: System.IntPtr, val: number): void;
			static SetStaticIntField(clazz: System.IntPtr, fieldID: System.IntPtr, val: number): void;
			static SetStaticLongField(clazz: System.IntPtr, fieldID: System.IntPtr, val: number): void;
			static SetStaticFloatField(clazz: System.IntPtr, fieldID: System.IntPtr, val: number): void;
			static SetStaticDoubleField(clazz: System.IntPtr, fieldID: System.IntPtr, val: number): void;
			static ToBooleanArray(array: boolean[]): System.IntPtr;
			static ToByteArray(array: Uint8Array): System.IntPtr;
			static ToCharArray(array: string[]): System.IntPtr;
			static ToShortArray(array: number[]): System.IntPtr;
			static ToIntArray(array: number[]): System.IntPtr;
			static ToLongArray(array: number[]): System.IntPtr;
			static ToFloatArray(array: number[]): System.IntPtr;
			static ToDoubleArray(array: number[]): System.IntPtr;
			static ToObjectArray(array: System.IntPtr[], arrayClass: System.IntPtr): System.IntPtr;
			static ToObjectArray(array: System.IntPtr[]): System.IntPtr;
			static FromBooleanArray(array: System.IntPtr): boolean[];
			static FromByteArray(array: System.IntPtr): Uint8Array;
			static FromCharArray(array: System.IntPtr): string[];
			static FromShortArray(array: System.IntPtr): number[];
			static FromIntArray(array: System.IntPtr): number[];
			static FromLongArray(array: System.IntPtr): number[];
			static FromFloatArray(array: System.IntPtr): number[];
			static FromDoubleArray(array: System.IntPtr): number[];
			static FromObjectArray(array: System.IntPtr): System.IntPtr[];
			static GetArrayLength(array: System.IntPtr): number;
			static NewBooleanArray(size: number): System.IntPtr;
			static NewByteArray(size: number): System.IntPtr;
			static NewCharArray(size: number): System.IntPtr;
			static NewShortArray(size: number): System.IntPtr;
			static NewIntArray(size: number): System.IntPtr;
			static NewLongArray(size: number): System.IntPtr;
			static NewFloatArray(size: number): System.IntPtr;
			static NewDoubleArray(size: number): System.IntPtr;
			static NewObjectArray(size: number, clazz: System.IntPtr, obj: System.IntPtr): System.IntPtr;
			static GetBooleanArrayElement(array: System.IntPtr, index: number): boolean;
			static GetByteArrayElement(array: System.IntPtr, index: number): number;
			static GetCharArrayElement(array: System.IntPtr, index: number): string;
			static GetShortArrayElement(array: System.IntPtr, index: number): number;
			static GetIntArrayElement(array: System.IntPtr, index: number): number;
			static GetLongArrayElement(array: System.IntPtr, index: number): number;
			static GetFloatArrayElement(array: System.IntPtr, index: number): number;
			static GetDoubleArrayElement(array: System.IntPtr, index: number): number;
			static GetObjectArrayElement(array: System.IntPtr, index: number): System.IntPtr;
			static SetBooleanArrayElement(array: System.IntPtr, index: number, val: number): void;
			static SetByteArrayElement(array: System.IntPtr, index: number, val: System.SByte): void;
			static SetCharArrayElement(array: System.IntPtr, index: number, val: string): void;
			static SetShortArrayElement(array: System.IntPtr, index: number, val: number): void;
			static SetIntArrayElement(array: System.IntPtr, index: number, val: number): void;
			static SetLongArrayElement(array: System.IntPtr, index: number, val: number): void;
			static SetFloatArrayElement(array: System.IntPtr, index: number, val: number): void;
			static SetDoubleArrayElement(array: System.IntPtr, index: number, val: number): void;
			static SetObjectArrayElement(array: System.IntPtr, index: number, obj: System.IntPtr): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum WeightedMode { None = 0, In = 1, Out = 2, Both = 3, }
		export class Keyframe {
			get time(): number;
			set time(value: number);
			get value(): number;
			set value(value: number);
			get inTangent(): number;
			set inTangent(value: number);
			get outTangent(): number;
			set outTangent(value: number);
			get inWeight(): number;
			set inWeight(value: number);
			get outWeight(): number;
			set outWeight(value: number);
			get weightedMode(): UnityEngine.WeightedMode;
			set weightedMode(value: UnityEngine.WeightedMode);
			/**[Obsolete]--"Use AnimationUtility.SetLeftTangentMode, AnimationUtility.SetRightTangentMode, AnimationUtility.GetLeftTangentMode or AnimationUtility.GetRightTangentMode instead." */
			get tangentMode(): number;
			/**[Obsolete]--"Use AnimationUtility.SetLeftTangentMode, AnimationUtility.SetRightTangentMode, AnimationUtility.GetLeftTangentMode or AnimationUtility.GetRightTangentMode instead." */
			set tangentMode(value: number);
			constructor(time: number, value: number);
			constructor(time: number, value: number, inTangent: number, outTangent: number);
			constructor(time: number, value: number, inTangent: number, outTangent: number, inWeight: number, outWeight: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum WrapMode { Once = 1, Loop = 2, PingPong = 4, Default = 0, ClampForever = 8, Clamp = 1, }
		export class AnimationCurve extends System.Object {
			get keys(): UnityEngine.Keyframe[];
			set keys(value: UnityEngine.Keyframe[]);
			get length(): number;
			get preWrapMode(): UnityEngine.WrapMode;
			set preWrapMode(value: UnityEngine.WrapMode);
			get postWrapMode(): UnityEngine.WrapMode;
			set postWrapMode(value: UnityEngine.WrapMode);
			constructor(keys: UnityEngine.Keyframe[]);
			constructor();
			static Constant(timeStart: number, timeEnd: number, value: number): UnityEngine.AnimationCurve;
			static Linear(timeStart: number, valueStart: number, timeEnd: number, valueEnd: number): UnityEngine.AnimationCurve;
			static EaseInOut(timeStart: number, valueStart: number, timeEnd: number, valueEnd: number): UnityEngine.AnimationCurve;
			Evaluate(time: number): number;
			AddKey(time: number, value: number): number;
			AddKey(key: UnityEngine.Keyframe): number;
			MoveKey(index: number, key: UnityEngine.Keyframe): number;
			RemoveKey(index: number): void;
			SmoothTangents(index: number, weight: number): void;
			/**inherited method */
			Equals(o: any): boolean;
			Equals(other: UnityEngine.AnimationCurve): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Application extends System.Object {
			/**[Obsolete]--"This property is deprecated, please use LoadLevelAsync to detect if a specific scene is currently loading." */
			static get isLoadingLevel(): boolean;
			/**[Obsolete]--"Streaming was a Unity Web Player feature, and is removed. This property is deprecated and always returns 0." */
			static get streamedBytes(): number;
			/**[Obsolete][Error]--"Application.webSecurityEnabled is no longer supported, since the Unity Web Player is no longer supported by Unity" */
			static get webSecurityEnabled(): boolean;
			static get isPlaying(): boolean;
			static get isFocused(): boolean;
			static get platform(): UnityEngine.RuntimePlatform;
			static get buildGUID(): string;
			static get isMobilePlatform(): boolean;
			static get isConsolePlatform(): boolean;
			static get runInBackground(): boolean;
			static set runInBackground(value: boolean);
			static get isBatchMode(): boolean;
			static get dataPath(): string;
			static get streamingAssetsPath(): string;
			static get persistentDataPath(): string;
			static get temporaryCachePath(): string;
			static get absoluteURL(): string;
			static get unityVersion(): string;
			static get version(): string;
			static get installerName(): string;
			static get identifier(): string;
			static get installMode(): UnityEngine.ApplicationInstallMode;
			static get sandboxType(): UnityEngine.ApplicationSandboxType;
			static get productName(): string;
			static get companyName(): string;
			static get cloudProjectId(): string;
			static get targetFrameRate(): number;
			static set targetFrameRate(value: number);
			static get systemLanguage(): UnityEngine.SystemLanguage;
			/**[Obsolete]--"Use SetStackTraceLogType/GetStackTraceLogType instead" */
			static get stackTraceLogType(): UnityEngine.StackTraceLogType;
			/**[Obsolete]--"Use SetStackTraceLogType/GetStackTraceLogType instead" */
			static set stackTraceLogType(value: UnityEngine.StackTraceLogType);
			static get consoleLogPath(): string;
			static get backgroundLoadingPriority(): UnityEngine.ThreadPriority;
			static set backgroundLoadingPriority(value: UnityEngine.ThreadPriority);
			static get internetReachability(): UnityEngine.NetworkReachability;
			static get genuine(): boolean;
			static get genuineCheckAvailable(): boolean;
			/**[Obsolete]--"This property is deprecated, please use SplashScreen.isFinished instead" */
			static get isShowingSplashScreen(): boolean;
			/**[Obsolete]--"use Application.isEditor instead" */
			static get isPlayer(): boolean;
			static get isEditor(): boolean;
			/**[Obsolete]--"Use SceneManager.sceneCountInBuildSettings" */
			static get levelCount(): number;
			/**[Obsolete]--"Use SceneManager to determine what scenes have been loaded" */
			static get loadedLevel(): number;
			/**[Obsolete]--"Use SceneManager to determine what scenes have been loaded" */
			static get loadedLevelName(): string;
			constructor();
			static Quit(exitCode: number): void;
			static Quit(): void;
			/**[Obsolete]--"CancelQuit is deprecated. Use the wantsToQuit event instead." */
			static CancelQuit(): void;
			static Unload(): void;
			/**[Obsolete]--"Streaming was a Unity Web Player feature, and is removed. This function is deprecated and always returns 1.0 for valid level indices." */
			static GetStreamProgressForLevel(levelIndex: number): number;
			/**[Obsolete]--"Streaming was a Unity Web Player feature, and is removed. This function is deprecated and always returns 1.0." */
			static GetStreamProgressForLevel(levelName: string): number;
			static CanStreamedLevelBeLoaded(levelIndex: number): boolean;
			static CanStreamedLevelBeLoaded(levelName: string): boolean;
			static IsPlaying(obj: any): boolean;
			static GetBuildTags(): string[];
			static SetBuildTags(buildTags: string[]): void;
			static HasProLicense(): boolean;
			/**[Obsolete]--"Application.ExternalEval is deprecated. See https://docs.unity3d.com/Manual/webgl-interactingwithbrowserscripting.html for alternatives." */
			static ExternalEval(script: string): void;
			static RequestAdvertisingIdentifierAsync(delegateMethod: UnityEngine.Application.AdvertisingIdentifierCallback): boolean;
			static OpenURL(url: string): void;
			/**[Obsolete]--"Use UnityEngine.Diagnostics.Utils.ForceCrash" */
			static ForceCrash(mode: number): void;
			static GetStackTraceLogType(logType: UnityEngine.LogType): UnityEngine.StackTraceLogType;
			static SetStackTraceLogType(logType: UnityEngine.LogType, stackTraceType: UnityEngine.StackTraceLogType): void;
			static RequestUserAuthorization(mode: UnityEngine.UserAuthorization): UnityEngine.AsyncOperation;
			static HasUserAuthorization(mode: UnityEngine.UserAuthorization): boolean;
			static add_lowMemory(value: UnityEngine.Application.LowMemoryCallback): void;
			static remove_lowMemory(value: UnityEngine.Application.LowMemoryCallback): void;
			static add_logMessageReceived(value: UnityEngine.Application.LogCallback): void;
			static remove_logMessageReceived(value: UnityEngine.Application.LogCallback): void;
			static add_logMessageReceivedThreaded(value: UnityEngine.Application.LogCallback): void;
			static remove_logMessageReceivedThreaded(value: UnityEngine.Application.LogCallback): void;
			/**[Obsolete]--"Application.ExternalCall is deprecated. See https://docs.unity3d.com/Manual/webgl-interactingwithbrowserscripting.html for alternatives." */
			static ExternalCall(functionName: string, args: any): void;
			/**[Obsolete]--"Use Object.DontDestroyOnLoad instead" */
			static DontDestroyOnLoad(o: any): void;
			/**[Obsolete][Error]--"Application.CaptureScreenshot is obsolete. Use ScreenCapture.CaptureScreenshot instead (UnityUpgradable) -> [UnityEngine] UnityEngine.ScreenCapture.CaptureScreenshot(*)" */
			static CaptureScreenshot(filename: string, superSize: number): void;
			/**[Obsolete][Error]--"Application.CaptureScreenshot is obsolete. Use ScreenCapture.CaptureScreenshot instead (UnityUpgradable) -> [UnityEngine] UnityEngine.ScreenCapture.CaptureScreenshot(*)" */
			static CaptureScreenshot(filename: string): void;
			static add_onBeforeRender(value: UnityEngine.Events.UnityAction): void;
			static remove_onBeforeRender(value: UnityEngine.Events.UnityAction): void;
			static add_focusChanged(value: System.Action$1): void;
			static remove_focusChanged(value: System.Action$1): void;
			static add_wantsToQuit(value: System.Func$1): void;
			static remove_wantsToQuit(value: System.Func$1): void;
			static add_quitting(value: System.Action): void;
			static remove_quitting(value: System.Action): void;
			/**[Obsolete]--"Application.RegisterLogCallback is deprecated. Use Application.logMessageReceived instead." */
			static RegisterLogCallback(handler: UnityEngine.Application.LogCallback): void;
			/**[Obsolete]--"Application.RegisterLogCallbackThreaded is deprecated. Use Application.logMessageReceivedThreaded instead." */
			static RegisterLogCallbackThreaded(handler: UnityEngine.Application.LogCallback): void;
			/**[Obsolete]--"Use SceneManager.LoadScene" */
			static LoadLevel(index: number): void;
			/**[Obsolete]--"Use SceneManager.LoadScene" */
			static LoadLevel(name: string): void;
			/**[Obsolete]--"Use SceneManager.LoadScene" */
			static LoadLevelAdditive(index: number): void;
			/**[Obsolete]--"Use SceneManager.LoadScene" */
			static LoadLevelAdditive(name: string): void;
			/**[Obsolete]--"Use SceneManager.LoadSceneAsync" */
			static LoadLevelAsync(index: number): UnityEngine.AsyncOperation;
			/**[Obsolete]--"Use SceneManager.LoadSceneAsync" */
			static LoadLevelAsync(levelName: string): UnityEngine.AsyncOperation;
			/**[Obsolete]--"Use SceneManager.LoadSceneAsync" */
			static LoadLevelAdditiveAsync(index: number): UnityEngine.AsyncOperation;
			/**[Obsolete]--"Use SceneManager.LoadSceneAsync" */
			static LoadLevelAdditiveAsync(levelName: string): UnityEngine.AsyncOperation;
			/**[Obsolete]--"Use SceneManager.UnloadScene" */
			static UnloadLevel(index: number): boolean;
			/**[Obsolete]--"Use SceneManager.UnloadScene" */
			static UnloadLevel(scenePath: string): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum StackTraceLogType { None = 0, ScriptOnly = 1, Full = 2, }
		export enum NetworkReachability { NotReachable = 0, ReachableViaCarrierDataNetwork = 1, ReachableViaLocalAreaNetwork = 2, }
		export enum UserAuthorization { WebCam = 1, Microphone = 2, }
		export enum ApplicationInstallMode { Unknown = 0, Store = 1, DeveloperBuild = 2, Adhoc = 3, Enterprise = 4, Editor = 5, }
		export enum ApplicationSandboxType { Unknown = 0, NotSandboxed = 1, Sandboxed = 2, SandboxBroken = 3, }
		export class AsyncOperation extends UnityEngine.YieldInstruction {
			get isDone(): boolean;
			get progress(): number;
			get priority(): number;
			set priority(value: number);
			get allowSceneActivation(): boolean;
			set allowSceneActivation(value: boolean);
			constructor();
			add_completed(value: System.Action$1): void;
			remove_completed(value: System.Action$1): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DisallowMultipleComponent extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RequireComponent extends System.Attribute {
			m_Type0: System.Type;
			m_Type1: System.Type;
			m_Type2: System.Type;
			constructor(requiredComponent: System.Type);
			constructor(requiredComponent: System.Type, requiredComponent2: System.Type);
			constructor(requiredComponent: System.Type, requiredComponent2: System.Type, requiredComponent3: System.Type);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AddComponentMenu extends System.Attribute {
			get componentMenu(): string;
			get componentOrder(): number;
			constructor(menuName: string);
			constructor(menuName: string, order: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CreateAssetMenuAttribute extends System.Attribute {
			get menuName(): string;
			set menuName(value: string);
			get fileName(): string;
			set fileName(value: string);
			get order(): number;
			set order(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ContextMenu extends System.Attribute {
			menuItem: string;
			validate: boolean;
			priority: number;
			constructor(itemName: string);
			constructor(itemName: string, isValidateFunction: boolean);
			constructor(itemName: string, isValidateFunction: boolean, priority: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ExecuteInEditMode extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ExecuteAlways extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HideInInspector extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HelpURLAttribute extends System.Attribute {
			get URL(): string;
			constructor(url: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DefaultExecutionOrder extends System.Attribute {
			get order(): number;
			set order(value: number);
			constructor(order: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AssemblyIsEditorAssembly extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ExcludeFromPresetAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum AudioType { UNKNOWN = 0, ACC = 1, AIFF = 2, IT = 10, MOD = 12, MPEG = 13, OGGVORBIS = 14, S3M = 17, WAV = 20, XM = 21, XMA = 22, VAG = 23, AUDIOQUEUE = 24, }
		export enum SendMessageOptions { RequireReceiver = 0, DontRequireReceiver = 1, }
		export enum PrimitiveType { Sphere = 0, Capsule = 1, Cylinder = 2, Cube = 3, Plane = 4, Quad = 5, }
		export enum Space { World = 0, Self = 1, }
		export enum RuntimePlatform { OSXEditor = 0, OSXPlayer = 1, WindowsPlayer = 2, OSXWebPlayer = 3, OSXDashboardPlayer = 4, WindowsWebPlayer = 5, WindowsEditor = 7, IPhonePlayer = 8, XBOX360 = 10, PS3 = 9, Android = 11, NaCl = 12, FlashPlayer = 15, LinuxPlayer = 13, LinuxEditor = 16, WebGLPlayer = 17, MetroPlayerX86 = 18, WSAPlayerX86 = 18, MetroPlayerX64 = 19, WSAPlayerX64 = 19, MetroPlayerARM = 20, WSAPlayerARM = 20, WP8Player = 21, BB10Player = 22, BlackBerryPlayer = 22, TizenPlayer = 23, PSP2 = 24, PS4 = 25, PSM = 26, XboxOne = 27, SamsungTVPlayer = 28, WiiU = 30, tvOS = 31, Switch = 32, Lumin = 33, }
		export enum SystemLanguage { Afrikaans = 0, Arabic = 1, Basque = 2, Belarusian = 3, Bulgarian = 4, Catalan = 5, Chinese = 6, Czech = 7, Danish = 8, Dutch = 9, English = 10, Estonian = 11, Faroese = 12, Finnish = 13, French = 14, German = 15, Greek = 16, Hebrew = 17, Hugarian = 18, Icelandic = 19, Indonesian = 20, Italian = 21, Japanese = 22, Korean = 23, Latvian = 24, Lithuanian = 25, Norwegian = 26, Polish = 27, Portuguese = 28, Romanian = 29, Russian = 30, SerboCroatian = 31, Slovak = 32, Slovenian = 33, Spanish = 34, Swedish = 35, Thai = 36, Turkish = 37, Ukrainian = 38, Vietnamese = 39, ChineseSimplified = 40, ChineseTraditional = 41, Unknown = 42, Hungarian = 18, }
		export enum LogType { Error = 0, Assert = 1, Warning = 2, Log = 3, Exception = 4, }
		export enum ThreadPriority { Low = 0, BelowNormal = 1, Normal = 2, High = 4, }
		export class BeforeRenderOrderAttribute extends System.Attribute {
			get order(): number;
			set order(value: number);
			constructor(order: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Behaviour extends UnityEngine.Component {
			get enabled(): boolean;
			set enabled(value: boolean);
			get isActiveAndEnabled(): boolean;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BillboardAsset extends UnityEngine.Object {
			get width(): number;
			set width(value: number);
			get height(): number;
			set height(value: number);
			get bottom(): number;
			set bottom(value: number);
			get imageCount(): number;
			get vertexCount(): number;
			get indexCount(): number;
			get material(): UnityEngine.Material;
			set material(value: UnityEngine.Material);
			constructor();
			GetImageTexCoords(imageTexCoords: any): void;
			GetImageTexCoords(): UnityEngine.Vector4[];
			SetImageTexCoords(imageTexCoords: any): void;
			SetImageTexCoords(imageTexCoords: UnityEngine.Vector4[]): void;
			GetVertices(vertices: any): void;
			GetVertices(): UnityEngine.Vector2[];
			SetVertices(vertices: any): void;
			SetVertices(vertices: UnityEngine.Vector2[]): void;
			GetIndices(indices: any): void;
			GetIndices(): number[];
			SetIndices(indices: any): void;
			SetIndices(indices: number[]): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BillboardRenderer extends UnityEngine.Renderer {
			get billboard(): UnityEngine.BillboardAsset;
			set billboard(value: UnityEngine.BillboardAsset);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Bounds {
			get center(): UnityEngine.Vector3;
			set center(value: UnityEngine.Vector3);
			get size(): UnityEngine.Vector3;
			set size(value: UnityEngine.Vector3);
			get extents(): UnityEngine.Vector3;
			set extents(value: UnityEngine.Vector3);
			get min(): UnityEngine.Vector3;
			set min(value: UnityEngine.Vector3);
			get max(): UnityEngine.Vector3;
			set max(value: UnityEngine.Vector3);
			constructor(center: UnityEngine.Vector3, size: UnityEngine.Vector3);
			static op_Equality(lhs: UnityEngine.Bounds, rhs: UnityEngine.Bounds): boolean;
			static op_Inequality(lhs: UnityEngine.Bounds, rhs: UnityEngine.Bounds): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.Bounds): boolean;
			SetMinMax(min: UnityEngine.Vector3, max: UnityEngine.Vector3): void;
			Encapsulate(point: UnityEngine.Vector3): void;
			Encapsulate(bounds: UnityEngine.Bounds): void;
			Expand(amount: number): void;
			Expand(amount: UnityEngine.Vector3): void;
			Intersects(bounds: UnityEngine.Bounds): boolean;
			IntersectRay(ray: UnityEngine.Ray): boolean;
			IntersectRay(ray: UnityEngine.Ray, distance: any): boolean;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			Contains(point: UnityEngine.Vector3): boolean;
			SqrDistance(point: UnityEngine.Vector3): number;
			ClosestPoint(point: UnityEngine.Vector3): UnityEngine.Vector3;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BoundsInt {
			get x(): number;
			set x(value: number);
			get y(): number;
			set y(value: number);
			get z(): number;
			set z(value: number);
			get center(): UnityEngine.Vector3;
			get min(): UnityEngine.Vector3Int;
			set min(value: UnityEngine.Vector3Int);
			get max(): UnityEngine.Vector3Int;
			set max(value: UnityEngine.Vector3Int);
			get xMin(): number;
			set xMin(value: number);
			get yMin(): number;
			set yMin(value: number);
			get zMin(): number;
			set zMin(value: number);
			get xMax(): number;
			set xMax(value: number);
			get yMax(): number;
			set yMax(value: number);
			get zMax(): number;
			set zMax(value: number);
			get position(): UnityEngine.Vector3Int;
			set position(value: UnityEngine.Vector3Int);
			get size(): UnityEngine.Vector3Int;
			set size(value: UnityEngine.Vector3Int);
			get allPositionsWithin(): UnityEngine.BoundsInt.PositionEnumerator;
			constructor(xMin: number, yMin: number, zMin: number, sizeX: number, sizeY: number, sizeZ: number);
			constructor(position: UnityEngine.Vector3Int, size: UnityEngine.Vector3Int);
			static op_Equality(lhs: UnityEngine.BoundsInt, rhs: UnityEngine.BoundsInt): boolean;
			static op_Inequality(lhs: UnityEngine.BoundsInt, rhs: UnityEngine.BoundsInt): boolean;
			SetMinMax(minPosition: UnityEngine.Vector3Int, maxPosition: UnityEngine.Vector3Int): void;
			ClampToBounds(bounds: UnityEngine.BoundsInt): void;
			Contains(position: UnityEngine.Vector3Int): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.BoundsInt): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CachedAssetBundle {
			get name(): string;
			set name(value: string);
			get hash(): UnityEngine.Hash128;
			set hash(value: UnityEngine.Hash128);
			constructor(name: string, hash: UnityEngine.Hash128);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Cache {
			get valid(): boolean;
			get ready(): boolean;
			get readOnly(): boolean;
			get path(): string;
			get index(): number;
			get spaceFree(): number;
			get maximumAvailableStorageSpace(): number;
			set maximumAvailableStorageSpace(value: number);
			get spaceOccupied(): number;
			get expirationDelay(): number;
			set expirationDelay(value: number);
			static op_Equality(lhs: UnityEngine.Cache, rhs: UnityEngine.Cache): boolean;
			static op_Inequality(lhs: UnityEngine.Cache, rhs: UnityEngine.Cache): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.Cache): boolean;
			ClearCache(): boolean;
			ClearCache(expiration: number): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CacheIndex {
			name: string;
			bytesUsed: number;
			expires: number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Caching extends System.Object {
			static get compressionEnabled(): boolean;
			static set compressionEnabled(value: boolean);
			static get ready(): boolean;
			/**[Obsolete]--"Please use use Cache.spaceOccupied to get used bytes per cache." */
			static get spaceUsed(): number;
			/**[Obsolete]--"This property is only used for the current cache, use Cache.spaceOccupied to get used bytes per cache." */
			static get spaceOccupied(): number;
			/**[Obsolete]--"Please use use Cache.spaceOccupied to get used bytes per cache." */
			static get spaceAvailable(): number;
			/**[Obsolete]--"This property is only used for the current cache, use Cache.spaceFree to get unused bytes per cache." */
			static get spaceFree(): number;
			/**[Obsolete]--"This property is only used for the current cache, use Cache.maximumAvailableStorageSpace to access the maximum available storage space per cache." */
			static get maximumAvailableDiskSpace(): number;
			/**[Obsolete]--"This property is only used for the current cache, use Cache.maximumAvailableStorageSpace to access the maximum available storage space per cache." */
			static set maximumAvailableDiskSpace(value: number);
			/**[Obsolete]--"This property is only used for the current cache, use Cache.expirationDelay to access the expiration delay per cache." */
			static get expirationDelay(): number;
			/**[Obsolete]--"This property is only used for the current cache, use Cache.expirationDelay to access the expiration delay per cache." */
			static set expirationDelay(value: number);
			static get cacheCount(): number;
			static get defaultCache(): UnityEngine.Cache;
			static get currentCacheForWriting(): UnityEngine.Cache;
			static set currentCacheForWriting(value: UnityEngine.Cache);
			constructor();
			static ClearCache(): boolean;
			static ClearCache(expiration: number): boolean;
			static ClearCachedVersion(assetBundleName: string, hash: UnityEngine.Hash128): boolean;
			static ClearOtherCachedVersions(assetBundleName: string, hash: UnityEngine.Hash128): boolean;
			static ClearAllCachedVersions(assetBundleName: string): boolean;
			static GetCachedVersions(assetBundleName: string, outCachedVersions: any): void;
			/**[Obsolete]--"Please use IsVersionCached with Hash128 instead." */
			static IsVersionCached(url: string, version: number): boolean;
			static IsVersionCached(url: string, hash: UnityEngine.Hash128): boolean;
			static IsVersionCached(cachedBundle: UnityEngine.CachedAssetBundle): boolean;
			/**[Obsolete]--"Please use MarkAsUsed with Hash128 instead." */
			static MarkAsUsed(url: string, version: number): boolean;
			static MarkAsUsed(url: string, hash: UnityEngine.Hash128): boolean;
			static MarkAsUsed(cachedBundle: UnityEngine.CachedAssetBundle): boolean;
			/**[Obsolete]--"Please use SetNoBackupFlag with Hash128 instead." */
			static SetNoBackupFlag(url: string, version: number): void;
			static SetNoBackupFlag(url: string, hash: UnityEngine.Hash128): void;
			static SetNoBackupFlag(cachedBundle: UnityEngine.CachedAssetBundle): void;
			/**[Obsolete]--"Please use ResetNoBackupFlag with Hash128 instead." */
			static ResetNoBackupFlag(url: string, version: number): void;
			static ResetNoBackupFlag(url: string, hash: UnityEngine.Hash128): void;
			static ResetNoBackupFlag(cachedBundle: UnityEngine.CachedAssetBundle): void;
			/**[Obsolete]--"This function is obsolete and will always return -1. Use IsVersionCached instead." */
			static GetVersionFromCache(url: string): number;
			static AddCache(cachePath: string): UnityEngine.Cache;
			static GetCacheAt(cacheIndex: number): UnityEngine.Cache;
			static GetCacheByPath(cachePath: string): UnityEngine.Cache;
			static GetAllCachePaths(cachePaths: any): void;
			static RemoveCache(cache: UnityEngine.Cache): boolean;
			static MoveCacheBefore(src: UnityEngine.Cache, dst: UnityEngine.Cache): void;
			static MoveCacheAfter(src: UnityEngine.Cache, dst: UnityEngine.Cache): void;
			/**[Obsolete]--"This function is obsolete. Please use ClearCache.  (UnityUpgradable) -> ClearCache()" */
			static CleanCache(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Camera extends UnityEngine.Behaviour {
			static onPreCull: UnityEngine.Camera.CameraCallback;
			static onPreRender: UnityEngine.Camera.CameraCallback;
			static onPostRender: UnityEngine.Camera.CameraCallback;
			get nearClipPlane(): number;
			set nearClipPlane(value: number);
			get farClipPlane(): number;
			set farClipPlane(value: number);
			get fieldOfView(): number;
			set fieldOfView(value: number);
			get renderingPath(): UnityEngine.RenderingPath;
			set renderingPath(value: UnityEngine.RenderingPath);
			get actualRenderingPath(): UnityEngine.RenderingPath;
			get allowHDR(): boolean;
			set allowHDR(value: boolean);
			get allowMSAA(): boolean;
			set allowMSAA(value: boolean);
			get allowDynamicResolution(): boolean;
			set allowDynamicResolution(value: boolean);
			get forceIntoRenderTexture(): boolean;
			set forceIntoRenderTexture(value: boolean);
			get orthographicSize(): number;
			set orthographicSize(value: number);
			get orthographic(): boolean;
			set orthographic(value: boolean);
			get opaqueSortMode(): any;
			set opaqueSortMode(value: any);
			get transparencySortMode(): UnityEngine.TransparencySortMode;
			set transparencySortMode(value: UnityEngine.TransparencySortMode);
			get transparencySortAxis(): UnityEngine.Vector3;
			set transparencySortAxis(value: UnityEngine.Vector3);
			get depth(): number;
			set depth(value: number);
			get aspect(): number;
			set aspect(value: number);
			get velocity(): UnityEngine.Vector3;
			get cullingMask(): number;
			set cullingMask(value: number);
			get eventMask(): number;
			set eventMask(value: number);
			get layerCullSpherical(): boolean;
			set layerCullSpherical(value: boolean);
			get cameraType(): UnityEngine.CameraType;
			set cameraType(value: UnityEngine.CameraType);
			get layerCullDistances(): number[];
			set layerCullDistances(value: number[]);
			get useOcclusionCulling(): boolean;
			set useOcclusionCulling(value: boolean);
			get cullingMatrix(): UnityEngine.Matrix4x4;
			set cullingMatrix(value: UnityEngine.Matrix4x4);
			get backgroundColor(): UnityEngine.Color;
			set backgroundColor(value: UnityEngine.Color);
			get clearFlags(): UnityEngine.CameraClearFlags;
			set clearFlags(value: UnityEngine.CameraClearFlags);
			get depthTextureMode(): UnityEngine.DepthTextureMode;
			set depthTextureMode(value: UnityEngine.DepthTextureMode);
			get clearStencilAfterLightingPass(): boolean;
			set clearStencilAfterLightingPass(value: boolean);
			get usePhysicalProperties(): boolean;
			set usePhysicalProperties(value: boolean);
			get sensorSize(): UnityEngine.Vector2;
			set sensorSize(value: UnityEngine.Vector2);
			get lensShift(): UnityEngine.Vector2;
			set lensShift(value: UnityEngine.Vector2);
			get focalLength(): number;
			set focalLength(value: number);
			get gateFit(): UnityEngine.Camera.GateFitMode;
			set gateFit(value: UnityEngine.Camera.GateFitMode);
			get rect(): UnityEngine.Rect;
			set rect(value: UnityEngine.Rect);
			get pixelRect(): UnityEngine.Rect;
			set pixelRect(value: UnityEngine.Rect);
			get pixelWidth(): number;
			get pixelHeight(): number;
			get scaledPixelWidth(): number;
			get scaledPixelHeight(): number;
			get targetTexture(): UnityEngine.RenderTexture;
			set targetTexture(value: UnityEngine.RenderTexture);
			get activeTexture(): UnityEngine.RenderTexture;
			get targetDisplay(): number;
			set targetDisplay(value: number);
			get cameraToWorldMatrix(): UnityEngine.Matrix4x4;
			get worldToCameraMatrix(): UnityEngine.Matrix4x4;
			set worldToCameraMatrix(value: UnityEngine.Matrix4x4);
			get projectionMatrix(): UnityEngine.Matrix4x4;
			set projectionMatrix(value: UnityEngine.Matrix4x4);
			get nonJitteredProjectionMatrix(): UnityEngine.Matrix4x4;
			set nonJitteredProjectionMatrix(value: UnityEngine.Matrix4x4);
			get useJitteredProjectionMatrixForTransparentRendering(): boolean;
			set useJitteredProjectionMatrixForTransparentRendering(value: boolean);
			get previousViewProjectionMatrix(): UnityEngine.Matrix4x4;
			static get main(): UnityEngine.Camera;
			static get current(): UnityEngine.Camera;
			get scene(): UnityEngine.SceneManagement.Scene;
			set scene(value: UnityEngine.SceneManagement.Scene);
			get stereoEnabled(): boolean;
			get stereoSeparation(): number;
			set stereoSeparation(value: number);
			get stereoConvergence(): number;
			set stereoConvergence(value: number);
			get areVRStereoViewMatricesWithinSingleCullTolerance(): boolean;
			get stereoTargetEye(): UnityEngine.StereoTargetEyeMask;
			set stereoTargetEye(value: UnityEngine.StereoTargetEyeMask);
			get stereoActiveEye(): UnityEngine.Camera.MonoOrStereoscopicEye;
			static get allCamerasCount(): number;
			static get allCameras(): UnityEngine.Camera[];
			get commandBufferCount(): number;
			/**[Obsolete][Error]--"Property isOrthoGraphic has been deprecated. Use orthographic (UnityUpgradable) -> orthographic" */
			get isOrthoGraphic(): boolean;
			/**[Obsolete][Error]--"Property isOrthoGraphic has been deprecated. Use orthographic (UnityUpgradable) -> orthographic" */
			set isOrthoGraphic(value: boolean);
			/**[Obsolete][Error]--"Property mainCamera has been deprecated. Use Camera.main instead (UnityUpgradable) -> main" */
			static get mainCamera(): UnityEngine.Camera;
			/**[Obsolete]--"Property near has been deprecated. Use Camera.nearClipPlane instead (UnityUpgradable) -> UnityEngine.Camera.nearClipPlane" */
			get near(): number;
			/**[Obsolete]--"Property near has been deprecated. Use Camera.nearClipPlane instead (UnityUpgradable) -> UnityEngine.Camera.nearClipPlane" */
			set near(value: number);
			/**[Obsolete]--"Property far has been deprecated. Use Camera.farClipPlane instead (UnityUpgradable) -> UnityEngine.Camera.farClipPlane" */
			get far(): number;
			/**[Obsolete]--"Property far has been deprecated. Use Camera.farClipPlane instead (UnityUpgradable) -> UnityEngine.Camera.farClipPlane" */
			set far(value: number);
			/**[Obsolete]--"Property fov has been deprecated. Use Camera.fieldOfView instead (UnityUpgradable) -> UnityEngine.Camera.fieldOfView" */
			get fov(): number;
			/**[Obsolete]--"Property fov has been deprecated. Use Camera.fieldOfView instead (UnityUpgradable) -> UnityEngine.Camera.fieldOfView" */
			set fov(value: number);
			/**[Obsolete]--"Property hdr has been deprecated. Use Camera.allowHDR instead (UnityUpgradable) -> UnityEngine.Camera.allowHDR" */
			get hdr(): boolean;
			/**[Obsolete]--"Property hdr has been deprecated. Use Camera.allowHDR instead (UnityUpgradable) -> UnityEngine.Camera.allowHDR" */
			set hdr(value: boolean);
			/**[Obsolete][Error]--"Property stereoMirrorMode is no longer supported. Please use single pass stereo rendering instead." */
			get stereoMirrorMode(): boolean;
			/**[Obsolete][Error]--"Property stereoMirrorMode is no longer supported. Please use single pass stereo rendering instead." */
			set stereoMirrorMode(value: boolean);
			constructor();
			static CalculateProjectionMatrixFromPhysicalProperties(output: any, focalLength: number, sensorSize: UnityEngine.Vector2, lensShift: UnityEngine.Vector2, nearClip: number, farClip: number, gateFitParameters?: UnityEngine.Camera.GateFitParameters): void;
			static FocalLengthToFOV(focalLength: number, sensorSize: number): number;
			static FOVToFocalLength(fov: number, sensorSize: number): number;
			static GetAllCameras(cameras: UnityEngine.Camera[]): number;
			static SetupCurrent(cur: UnityEngine.Camera): void;
			Reset(): void;
			ResetTransparencySortSettings(): void;
			ResetAspect(): void;
			ResetCullingMatrix(): void;
			SetReplacementShader(shader: UnityEngine.Shader, replacementTag: string): void;
			ResetReplacementShader(): void;
			SetTargetBuffers(colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer): void;
			SetTargetBuffers(colorBuffer: UnityEngine.RenderBuffer[], depthBuffer: UnityEngine.RenderBuffer): void;
			ResetWorldToCameraMatrix(): void;
			ResetProjectionMatrix(): void;
			CalculateObliqueMatrix(clipPlane: UnityEngine.Vector4): UnityEngine.Matrix4x4;
			WorldToScreenPoint(position: UnityEngine.Vector3, eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Vector3;
			WorldToScreenPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
			WorldToViewportPoint(position: UnityEngine.Vector3, eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Vector3;
			WorldToViewportPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
			ViewportToWorldPoint(position: UnityEngine.Vector3, eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Vector3;
			ViewportToWorldPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
			ScreenToWorldPoint(position: UnityEngine.Vector3, eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Vector3;
			ScreenToWorldPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
			ScreenToViewportPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
			ViewportToScreenPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
			ViewportPointToRay(pos: UnityEngine.Vector3, eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Ray;
			ViewportPointToRay(pos: UnityEngine.Vector3): UnityEngine.Ray;
			ScreenPointToRay(pos: UnityEngine.Vector3, eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Ray;
			ScreenPointToRay(pos: UnityEngine.Vector3): UnityEngine.Ray;
			CalculateFrustumCorners(viewport: UnityEngine.Rect, z: number, eye: UnityEngine.Camera.MonoOrStereoscopicEye, outCorners: UnityEngine.Vector3[]): void;
			GetStereoNonJitteredProjectionMatrix(eye: UnityEngine.Camera.StereoscopicEye): UnityEngine.Matrix4x4;
			GetStereoViewMatrix(eye: UnityEngine.Camera.StereoscopicEye): UnityEngine.Matrix4x4;
			CopyStereoDeviceProjectionMatrixToNonJittered(eye: UnityEngine.Camera.StereoscopicEye): void;
			GetStereoProjectionMatrix(eye: UnityEngine.Camera.StereoscopicEye): UnityEngine.Matrix4x4;
			SetStereoProjectionMatrix(eye: UnityEngine.Camera.StereoscopicEye, matrix: UnityEngine.Matrix4x4): void;
			ResetStereoProjectionMatrices(): void;
			SetStereoViewMatrix(eye: UnityEngine.Camera.StereoscopicEye, matrix: UnityEngine.Matrix4x4): void;
			ResetStereoViewMatrices(): void;
			RenderToCubemap(cubemap: UnityEngine.Cubemap, faceMask: number): boolean;
			RenderToCubemap(cubemap: UnityEngine.Cubemap): boolean;
			RenderToCubemap(cubemap: UnityEngine.RenderTexture, faceMask: number): boolean;
			RenderToCubemap(cubemap: UnityEngine.RenderTexture): boolean;
			RenderToCubemap(cubemap: UnityEngine.RenderTexture, faceMask: number, stereoEye: UnityEngine.Camera.MonoOrStereoscopicEye): boolean;
			Render(): void;
			RenderWithShader(shader: UnityEngine.Shader, replacementTag: string): void;
			RenderDontRestore(): void;
			CopyFrom(other: UnityEngine.Camera): void;
			RemoveCommandBuffers(evt: any): void;
			RemoveAllCommandBuffers(): void;
			AddCommandBuffer(evt: any, buffer: any): void;
			AddCommandBufferAsync(evt: any, buffer: any, queueType: any): void;
			RemoveCommandBuffer(evt: any, buffer: any): void;
			GetCommandBuffers(evt: any): any;
			/**[Obsolete][Error]--"Camera.GetScreenWidth has been deprecated. Use Screen.width instead (UnityUpgradable) -> Screen.width" */
			GetScreenWidth(): number;
			/**[Obsolete][Error]--"Camera.GetScreenHeight has been deprecated. Use Screen.height instead (UnityUpgradable) -> Screen.height" */
			GetScreenHeight(): number;
			/**[Obsolete][Error]--"Camera.DoClear has been deprecated (UnityUpgradable)." */
			DoClear(): void;
			/**[Obsolete]--"Camera.ResetFieldOfView has been deprecated in Unity 5.6 and will be removed in the future. Please replace it by explicitly setting the camera's FOV to 60 degrees." */
			ResetFieldOfView(): void;
			/**[Obsolete]--"Camera.SetStereoViewMatrices has been deprecated. Use SetStereoViewMatrix(StereoscopicEye eye) instead." */
			SetStereoViewMatrices(leftMatrix: UnityEngine.Matrix4x4, rightMatrix: UnityEngine.Matrix4x4): void;
			/**[Obsolete]--"Camera.SetStereoProjectionMatrices has been deprecated. Use SetStereoProjectionMatrix(StereoscopicEye eye) instead." */
			SetStereoProjectionMatrices(leftMatrix: UnityEngine.Matrix4x4, rightMatrix: UnityEngine.Matrix4x4): void;
			/**[Obsolete]--"Camera.GetStereoViewMatrices has been deprecated. Use GetStereoViewMatrix(StereoscopicEye eye) instead." */
			GetStereoViewMatrices(): UnityEngine.Matrix4x4[];
			/**[Obsolete]--"Camera.GetStereoProjectionMatrices has been deprecated. Use GetStereoProjectionMatrix(StereoscopicEye eye) instead." */
			GetStereoProjectionMatrices(): UnityEngine.Matrix4x4[];
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Color {
			r: number;
			g: number;
			b: number;
			a: number;
			static get red(): UnityEngine.Color;
			static get green(): UnityEngine.Color;
			static get blue(): UnityEngine.Color;
			static get white(): UnityEngine.Color;
			static get black(): UnityEngine.Color;
			static get yellow(): UnityEngine.Color;
			static get cyan(): UnityEngine.Color;
			static get magenta(): UnityEngine.Color;
			static get gray(): UnityEngine.Color;
			static get grey(): UnityEngine.Color;
			static get clear(): UnityEngine.Color;
			get grayscale(): number;
			get linear(): UnityEngine.Color;
			get gamma(): UnityEngine.Color;
			get maxColorComponent(): number;
			constructor(r: number, g: number, b: number, a: number);
			constructor(r: number, g: number, b: number);
			static op_Addition(a: UnityEngine.Color, b: UnityEngine.Color): UnityEngine.Color;
			static op_Subtraction(a: UnityEngine.Color, b: UnityEngine.Color): UnityEngine.Color;
			static op_Multiply(a: UnityEngine.Color, b: UnityEngine.Color): UnityEngine.Color;
			static op_Multiply(a: UnityEngine.Color, b: number): UnityEngine.Color;
			static op_Multiply(b: number, a: UnityEngine.Color): UnityEngine.Color;
			static op_Division(a: UnityEngine.Color, b: number): UnityEngine.Color;
			static op_Equality(lhs: UnityEngine.Color, rhs: UnityEngine.Color): boolean;
			static op_Inequality(lhs: UnityEngine.Color, rhs: UnityEngine.Color): boolean;
			static Lerp(a: UnityEngine.Color, b: UnityEngine.Color, t: number): UnityEngine.Color;
			static LerpUnclamped(a: UnityEngine.Color, b: UnityEngine.Color, t: number): UnityEngine.Color;
			static op_Implicit(c: UnityEngine.Color): UnityEngine.Vector4;
			static op_Implicit(v: UnityEngine.Vector4): UnityEngine.Color;
			static RGBToHSV(rgbColor: UnityEngine.Color, H: any, S: any, V: any): void;
			static HSVToRGB(H: number, S: number, V: number): UnityEngine.Color;
			static HSVToRGB(H: number, S: number, V: number, hdr: boolean): UnityEngine.Color;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.Color): boolean;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Color32 {
			r: number;
			g: number;
			b: number;
			a: number;
			constructor(r: number, g: number, b: number, a: number);
			static op_Implicit(c: UnityEngine.Color): UnityEngine.Color32;
			static op_Implicit(c: UnityEngine.Color32): UnityEngine.Color;
			static Lerp(a: UnityEngine.Color32, b: UnityEngine.Color32, t: number): UnityEngine.Color32;
			static LerpUnclamped(a: UnityEngine.Color32, b: UnityEngine.Color32, t: number): UnityEngine.Color32;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ColorUtility extends System.Object {
			constructor();
			static TryParseHtmlString(htmlString: string, color: any): boolean;
			static ToHtmlStringRGB(color: UnityEngine.Color): string;
			static ToHtmlStringRGBA(color: UnityEngine.Color): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Component extends UnityEngine.Object {
			get transform(): UnityEngine.Transform;
			get gameObject(): UnityEngine.GameObject;
			get tag(): string;
			set tag(value: string);
			/**[Obsolete][Error]--"Property rigidbody has been deprecated. Use GetComponent<Rigidbody>() instead. (UnityUpgradable)" */
			get rigidbody(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property rigidbody2D has been deprecated. Use GetComponent<Rigidbody2D>() instead. (UnityUpgradable)" */
			get rigidbody2D(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property camera has been deprecated. Use GetComponent<Camera>() instead. (UnityUpgradable)" */
			get camera(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property light has been deprecated. Use GetComponent<Light>() instead. (UnityUpgradable)" */
			get light(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property animation has been deprecated. Use GetComponent<Animation>() instead. (UnityUpgradable)" */
			get animation(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property constantForce has been deprecated. Use GetComponent<ConstantForce>() instead. (UnityUpgradable)" */
			get constantForce(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property renderer has been deprecated. Use GetComponent<Renderer>() instead. (UnityUpgradable)" */
			get renderer(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property audio has been deprecated. Use GetComponent<AudioSource>() instead. (UnityUpgradable)" */
			get audio(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property guiText has been deprecated. Use GetComponent<GUIText>() instead. (UnityUpgradable)" */
			get guiText(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property networkView has been deprecated. Use GetComponent<NetworkView>() instead. (UnityUpgradable)" */
			get networkView(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property guiElement has been deprecated. Use GetComponent<GUIElement>() instead. (UnityUpgradable)" */
			get guiElement(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property guiTexture has been deprecated. Use GetComponent<GUITexture>() instead. (UnityUpgradable)" */
			get guiTexture(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property collider has been deprecated. Use GetComponent<Collider>() instead. (UnityUpgradable)" */
			get collider(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property collider2D has been deprecated. Use GetComponent<Collider2D>() instead. (UnityUpgradable)" */
			get collider2D(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property hingeJoint has been deprecated. Use GetComponent<HingeJoint>() instead. (UnityUpgradable)" */
			get hingeJoint(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property particleSystem has been deprecated. Use GetComponent<ParticleSystem>() instead. (UnityUpgradable)" */
			get particleSystem(): UnityEngine.Component;
			constructor();
			GetComponent(type: System.Type): UnityEngine.Component;
			GetComponent(type: string): UnityEngine.Component;
			GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
			GetComponentInChildren(t: System.Type): UnityEngine.Component;
			GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
			GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
			GetComponentInParent(t: System.Type): UnityEngine.Component;
			GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
			GetComponentsInParent(t: System.Type): UnityEngine.Component[];
			GetComponents(type: System.Type): UnityEngine.Component[];
			GetComponents(type: System.Type, results: any): void;
			CompareTag(tag: string): boolean;
			SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
			SendMessageUpwards(methodName: string, value: any): void;
			SendMessageUpwards(methodName: string): void;
			SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
			SendMessage(methodName: string, value: any): void;
			SendMessage(methodName: string): void;
			SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
			SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
			BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
			BroadcastMessage(methodName: string, parameter: any): void;
			BroadcastMessage(methodName: string): void;
			BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
			/**extension method */
			GetJsBehaviour(module_name: string): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ComputeBuffer extends System.Object {
			get count(): number;
			get stride(): number;
			constructor(count: number, stride: number);
			constructor(count: number, stride: number, type: UnityEngine.ComputeBufferType);
			static CopyCount(src: UnityEngine.ComputeBuffer, dst: UnityEngine.ComputeBuffer, dstOffsetBytes: number): void;
			Dispose(): void;
			Release(): void;
			IsValid(): boolean;
			SetData(data: System.Array): void;
			SetData(data: System.Array, managedBufferStartIndex: number, computeBufferStartIndex: number, count: number): void;
			GetData(data: System.Array): void;
			GetData(data: System.Array, managedBufferStartIndex: number, computeBufferStartIndex: number, count: number): void;
			SetCounterValue(counterValue: number): void;
			GetNativeBufferPtr(): System.IntPtr;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Coroutine extends UnityEngine.YieldInstruction {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CrashReport extends System.Object {
			time: System.DateTime;
			text: string;
			static get reports(): UnityEngine.CrashReport[];
			static get lastReport(): UnityEngine.CrashReport;
			static RemoveAll(): void;
			Remove(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BoundingSphere {
			position: UnityEngine.Vector3;
			radius: number;
			constructor(pos: UnityEngine.Vector3, rad: number);
			constructor(packedSphere: UnityEngine.Vector4);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CullingGroupEvent {
			get index(): number;
			get isVisible(): boolean;
			get wasVisible(): boolean;
			get hasBecomeVisible(): boolean;
			get hasBecomeInvisible(): boolean;
			get currentDistance(): number;
			get previousDistance(): number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CullingGroup extends System.Object {
			get onStateChanged(): UnityEngine.CullingGroup.StateChanged;
			set onStateChanged(value: UnityEngine.CullingGroup.StateChanged);
			get enabled(): boolean;
			set enabled(value: boolean);
			get targetCamera(): UnityEngine.Camera;
			set targetCamera(value: UnityEngine.Camera);
			constructor();
			Dispose(): void;
			SetBoundingSpheres(array: UnityEngine.BoundingSphere[]): void;
			SetBoundingSphereCount(count: number): void;
			EraseSwapBack(index: number): void;
			QueryIndices(visible: boolean, result: number[], firstIndex: number): number;
			QueryIndices(distanceIndex: number, result: number[], firstIndex: number): number;
			QueryIndices(visible: boolean, distanceIndex: number, result: number[], firstIndex: number): number;
			IsVisible(index: number): boolean;
			GetDistance(index: number): number;
			SetBoundingDistances(distances: number[]): void;
			SetDistanceReferencePoint(point: UnityEngine.Vector3): void;
			SetDistanceReferencePoint(transform: UnityEngine.Transform): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum CursorMode { Auto = 0, ForceSoftware = 1, }
		export enum CursorLockMode { None = 0, Locked = 1, Confined = 2, }
		export class Cursor extends System.Object {
			static get visible(): boolean;
			static set visible(value: boolean);
			static get lockState(): UnityEngine.CursorLockMode;
			static set lockState(value: UnityEngine.CursorLockMode);
			constructor();
			static SetCursor(texture: UnityEngine.Texture2D, hotspot: UnityEngine.Vector2, cursorMode: UnityEngine.CursorMode): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CustomYieldInstruction extends System.Object {
			get keepWaiting(): boolean;
			get Current(): any;
			MoveNext(): boolean;
			Reset(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Debug extends System.Object {
			static get unityLogger(): UnityEngine.ILogger;
			static get developerConsoleVisible(): boolean;
			static set developerConsoleVisible(value: boolean);
			static get isDebugBuild(): boolean;
			/**[Obsolete]--"Debug.logger is obsolete. Please use Debug.unityLogger instead (UnityUpgradable) -> unityLogger" */
			static get logger(): UnityEngine.ILogger;
			constructor();
			static DrawLine(start: UnityEngine.Vector3, end: UnityEngine.Vector3, color: UnityEngine.Color, duration: number): void;
			static DrawLine(start: UnityEngine.Vector3, end: UnityEngine.Vector3, color: UnityEngine.Color): void;
			static DrawLine(start: UnityEngine.Vector3, end: UnityEngine.Vector3): void;
			static DrawLine(start: UnityEngine.Vector3, end: UnityEngine.Vector3, color: UnityEngine.Color, duration: number, depthTest: boolean): void;
			static DrawRay(start: UnityEngine.Vector3, dir: UnityEngine.Vector3, color: UnityEngine.Color, duration: number): void;
			static DrawRay(start: UnityEngine.Vector3, dir: UnityEngine.Vector3, color: UnityEngine.Color): void;
			static DrawRay(start: UnityEngine.Vector3, dir: UnityEngine.Vector3): void;
			static DrawRay(start: UnityEngine.Vector3, dir: UnityEngine.Vector3, color: UnityEngine.Color, duration: number, depthTest: boolean): void;
			static Break(): void;
			static DebugBreak(): void;
			static Log(message: any): void;
			static Log(message: any, context: any): void;
			static LogFormat(format: string, args: any): void;
			static LogFormat(context: any, format: string, args: any): void;
			static LogError(message: any): void;
			static LogError(message: any, context: any): void;
			static LogErrorFormat(format: string, args: any): void;
			static LogErrorFormat(context: any, format: string, args: any): void;
			static ClearDeveloperConsole(): void;
			static LogException(exception: any): void;
			static LogException(exception: any, context: any): void;
			static LogWarning(message: any): void;
			static LogWarning(message: any, context: any): void;
			static LogWarningFormat(format: string, args: any): void;
			static LogWarningFormat(context: any, format: string, args: any): void;
			static Assert(condition: boolean): void;
			static Assert(condition: boolean, context: any): void;
			static Assert(condition: boolean, message: any): void;
			static Assert(condition: boolean, message: string): void;
			static Assert(condition: boolean, message: any, context: any): void;
			static Assert(condition: boolean, message: string, context: any): void;
			/**[Obsolete][Error]--"Assert(bool, string, params object[]) is obsolete. Use AssertFormat(bool, string, params object[]) (UnityUpgradable) -> AssertFormat(*)" */
			static Assert(condition: boolean, format: string, args: any): void;
			static AssertFormat(condition: boolean, format: string, args: any): void;
			static AssertFormat(condition: boolean, context: any, format: string, args: any): void;
			static LogAssertion(message: any): void;
			static LogAssertion(message: any, context: any): void;
			static LogAssertionFormat(format: string, args: any): void;
			static LogAssertionFormat(context: any, format: string, args: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Display extends System.Object {
			static displays: UnityEngine.Display[];
			get renderingWidth(): number;
			get renderingHeight(): number;
			get systemWidth(): number;
			get systemHeight(): number;
			get colorBuffer(): UnityEngine.RenderBuffer;
			get depthBuffer(): UnityEngine.RenderBuffer;
			get active(): boolean;
			static get main(): UnityEngine.Display;
			/**[Obsolete]--"MultiDisplayLicense has been deprecated." */
			static MultiDisplayLicense(): boolean;
			static RelativeMouseAt(inputMouseCoordinates: UnityEngine.Vector3): UnityEngine.Vector3;
			static add_onDisplaysUpdated(value: UnityEngine.Display.DisplaysUpdatedDelegate): void;
			static remove_onDisplaysUpdated(value: UnityEngine.Display.DisplaysUpdatedDelegate): void;
			Activate(): void;
			Activate(width: number, height: number, refreshRate: number): void;
			SetParams(width: number, height: number, x: number, y: number): void;
			SetRenderingResolution(w: number, h: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EventProvider extends System.Object {
			constructor();
			static WriteCustomEvent(value: number, text: string): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ExcludeFromObjectFactoryAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ExposedPropertyResolver {
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ExposedReference$1 {
			exposedName: UnityEngine.PropertyName;
			defaultValue: any;
			Resolve(resolver: UnityEngine.IExposedPropertyTable): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FlareLayer extends UnityEngine.Behaviour {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GameObject extends UnityEngine.Object {
			get transform(): UnityEngine.Transform;
			get layer(): number;
			set layer(value: number);
			/**[Obsolete]--"GameObject.active is obsolete. Use GameObject.SetActive(), GameObject.activeSelf or GameObject.activeInHierarchy." */
			get active(): boolean;
			/**[Obsolete]--"GameObject.active is obsolete. Use GameObject.SetActive(), GameObject.activeSelf or GameObject.activeInHierarchy." */
			set active(value: boolean);
			get activeSelf(): boolean;
			get activeInHierarchy(): boolean;
			get isStatic(): boolean;
			set isStatic(value: boolean);
			get tag(): string;
			set tag(value: string);
			get scene(): UnityEngine.SceneManagement.Scene;
			get gameObject(): UnityEngine.GameObject;
			/**[Obsolete][Error]--"Property rigidbody has been deprecated. Use GetComponent<Rigidbody>() instead. (UnityUpgradable)" */
			get rigidbody(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property rigidbody2D has been deprecated. Use GetComponent<Rigidbody2D>() instead. (UnityUpgradable)" */
			get rigidbody2D(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property camera has been deprecated. Use GetComponent<Camera>() instead. (UnityUpgradable)" */
			get camera(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property light has been deprecated. Use GetComponent<Light>() instead. (UnityUpgradable)" */
			get light(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property animation has been deprecated. Use GetComponent<Animation>() instead. (UnityUpgradable)" */
			get animation(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property constantForce has been deprecated. Use GetComponent<ConstantForce>() instead. (UnityUpgradable)" */
			get constantForce(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property renderer has been deprecated. Use GetComponent<Renderer>() instead. (UnityUpgradable)" */
			get renderer(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property audio has been deprecated. Use GetComponent<AudioSource>() instead. (UnityUpgradable)" */
			get audio(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property guiText has been deprecated. Use GetComponent<GUIText>() instead. (UnityUpgradable)" */
			get guiText(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property networkView has been deprecated. Use GetComponent<NetworkView>() instead. (UnityUpgradable)" */
			get networkView(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property guiElement has been deprecated. Use GetComponent<GUIElement>() instead. (UnityUpgradable)" */
			get guiElement(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property guiTexture has been deprecated. Use GetComponent<GUITexture>() instead. (UnityUpgradable)" */
			get guiTexture(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property collider has been deprecated. Use GetComponent<Collider>() instead. (UnityUpgradable)" */
			get collider(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property collider2D has been deprecated. Use GetComponent<Collider2D>() instead. (UnityUpgradable)" */
			get collider2D(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property hingeJoint has been deprecated. Use GetComponent<HingeJoint>() instead. (UnityUpgradable)" */
			get hingeJoint(): UnityEngine.Component;
			/**[Obsolete][Error]--"Property particleSystem has been deprecated. Use GetComponent<ParticleSystem>() instead. (UnityUpgradable)" */
			get particleSystem(): UnityEngine.Component;
			constructor(name: string);
			constructor();
			constructor(name: string, components: System.Type[]);
			static CreatePrimitive(type: UnityEngine.PrimitiveType): UnityEngine.GameObject;
			static FindWithTag(tag: string): UnityEngine.GameObject;
			static FindGameObjectWithTag(tag: string): UnityEngine.GameObject;
			static FindGameObjectsWithTag(tag: string): UnityEngine.GameObject[];
			static Find(name: string): UnityEngine.GameObject;
			GetComponent(type: System.Type): UnityEngine.Component;
			GetComponent(type: string): UnityEngine.Component;
			GetComponentInChildren(type: System.Type, includeInactive: boolean): UnityEngine.Component;
			GetComponentInChildren(type: System.Type): UnityEngine.Component;
			GetComponentInParent(type: System.Type): UnityEngine.Component;
			GetComponents(type: System.Type): UnityEngine.Component[];
			GetComponents(type: System.Type, results: any): void;
			GetComponentsInChildren(type: System.Type): UnityEngine.Component[];
			GetComponentsInChildren(type: System.Type, includeInactive: boolean): UnityEngine.Component[];
			GetComponentsInParent(type: System.Type): UnityEngine.Component[];
			GetComponentsInParent(type: System.Type, includeInactive: boolean): UnityEngine.Component[];
			SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
			SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
			SendMessageUpwards(methodName: string, value: any): void;
			SendMessageUpwards(methodName: string): void;
			SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
			SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
			SendMessage(methodName: string, value: any): void;
			SendMessage(methodName: string): void;
			BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
			BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
			BroadcastMessage(methodName: string, parameter: any): void;
			BroadcastMessage(methodName: string): void;
			AddComponent(componentType: System.Type): UnityEngine.Component;
			/**[Obsolete][Error]--"GameObject.AddComponent with string argument has been deprecated. Use GameObject.AddComponent<T>() instead. (UnityUpgradable)." */
			AddComponent(className: string): UnityEngine.Component;
			SetActive(value: boolean): void;
			/**[Obsolete]--"gameObject.SetActiveRecursively() is obsolete. Use GameObject.SetActive(), which is now inherited by children." */
			SetActiveRecursively(state: boolean): void;
			CompareTag(tag: string): boolean;
			/**[Obsolete][Error]--"GameObject.SampleAnimation(AnimationClip, float) has been deprecated. Use AnimationClip.SampleAnimation(GameObject, float) instead (UnityUpgradable)." */
			SampleAnimation(clip: any, time: number): void;
			/**[Obsolete][Error]--"gameObject.PlayAnimation is not supported anymore. Use animation.Play()" */
			PlayAnimation(animation: any): void;
			/**[Obsolete][Error]--"gameObject.StopAnimation is not supported anymore. Use animation.Stop()" */
			StopAnimation(): void;
			/**extension method */
			GetJsBehaviour(module_name: string): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GeometryUtility extends System.Object {
			constructor();
			static CalculateFrustumPlanes(camera: UnityEngine.Camera): UnityEngine.Plane[];
			static CalculateFrustumPlanes(worldToProjectionMatrix: UnityEngine.Matrix4x4): UnityEngine.Plane[];
			static CalculateFrustumPlanes(camera: UnityEngine.Camera, planes: UnityEngine.Plane[]): void;
			static CalculateFrustumPlanes(worldToProjectionMatrix: UnityEngine.Matrix4x4, planes: UnityEngine.Plane[]): void;
			static CalculateBounds(positions: UnityEngine.Vector3[], transform: UnityEngine.Matrix4x4): UnityEngine.Bounds;
			static TryCreatePlaneFromPolygon(vertices: UnityEngine.Vector3[], plane: any): boolean;
			static TestPlanesAABB(planes: UnityEngine.Plane[], bounds: UnityEngine.Bounds): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Gizmos extends System.Object {
			static get color(): UnityEngine.Color;
			static set color(value: UnityEngine.Color);
			static get matrix(): UnityEngine.Matrix4x4;
			static set matrix(value: UnityEngine.Matrix4x4);
			constructor();
			static DrawLine(from: UnityEngine.Vector3, to: UnityEngine.Vector3): void;
			static DrawWireSphere(center: UnityEngine.Vector3, radius: number): void;
			static DrawSphere(center: UnityEngine.Vector3, radius: number): void;
			static DrawWireCube(center: UnityEngine.Vector3, size: UnityEngine.Vector3): void;
			static DrawCube(center: UnityEngine.Vector3, size: UnityEngine.Vector3): void;
			static DrawMesh(mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, scale: UnityEngine.Vector3): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3): void;
			static DrawMesh(mesh: UnityEngine.Mesh): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, scale: UnityEngine.Vector3): void;
			static DrawMesh(mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
			static DrawMesh(mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3): void;
			static DrawMesh(mesh: UnityEngine.Mesh, submeshIndex: number): void;
			static DrawWireMesh(mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, scale: UnityEngine.Vector3): void;
			static DrawWireMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
			static DrawWireMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3): void;
			static DrawWireMesh(mesh: UnityEngine.Mesh): void;
			static DrawWireMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, scale: UnityEngine.Vector3): void;
			static DrawWireMesh(mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
			static DrawWireMesh(mesh: UnityEngine.Mesh, submeshIndex: number, position: UnityEngine.Vector3): void;
			static DrawWireMesh(mesh: UnityEngine.Mesh, submeshIndex: number): void;
			static DrawIcon(center: UnityEngine.Vector3, name: string, allowScaling: boolean): void;
			static DrawIcon(center: UnityEngine.Vector3, name: string): void;
			static DrawGUITexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material): void;
			static DrawGUITexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture): void;
			static DrawGUITexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, mat: UnityEngine.Material): void;
			static DrawGUITexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number): void;
			static DrawFrustum(center: UnityEngine.Vector3, fov: number, maxRange: number, minRange: number, aspect: number): void;
			static DrawRay(r: UnityEngine.Ray): void;
			static DrawRay(from: UnityEngine.Vector3, direction: UnityEngine.Vector3): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GradientColorKey {
			color: UnityEngine.Color;
			time: number;
			constructor(col: UnityEngine.Color, time: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GradientAlphaKey {
			alpha: number;
			time: number;
			constructor(alpha: number, time: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum GradientMode { Blend = 0, Fixed = 1, }
		export class Gradient extends System.Object {
			get colorKeys(): UnityEngine.GradientColorKey[];
			set colorKeys(value: UnityEngine.GradientColorKey[]);
			get alphaKeys(): UnityEngine.GradientAlphaKey[];
			set alphaKeys(value: UnityEngine.GradientAlphaKey[]);
			get mode(): UnityEngine.GradientMode;
			set mode(value: UnityEngine.GradientMode);
			constructor();
			Evaluate(time: number): UnityEngine.Color;
			SetKeys(colorKeys: UnityEngine.GradientColorKey[], alphaKeys: UnityEngine.GradientAlphaKey[]): void;
			/**inherited method */
			Equals(o: any): boolean;
			Equals(other: UnityEngine.Gradient): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum FullScreenMode { ExclusiveFullScreen = 0, FullScreenWindow = 1, MaximizedWindow = 2, Windowed = 3, }
		export enum TextureCompressionQuality { Fast = 0, Normal = 50, Best = 100, }
		export class SleepTimeout extends System.Object {
			static NeverSleep: number;
			static SystemSetting: number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Screen extends System.Object {
			static get width(): number;
			static get height(): number;
			static get dpi(): number;
			static get orientation(): UnityEngine.ScreenOrientation;
			static set orientation(value: UnityEngine.ScreenOrientation);
			static get sleepTimeout(): number;
			static set sleepTimeout(value: number);
			static get autorotateToPortrait(): boolean;
			static set autorotateToPortrait(value: boolean);
			static get autorotateToPortraitUpsideDown(): boolean;
			static set autorotateToPortraitUpsideDown(value: boolean);
			static get autorotateToLandscapeLeft(): boolean;
			static set autorotateToLandscapeLeft(value: boolean);
			static get autorotateToLandscapeRight(): boolean;
			static set autorotateToLandscapeRight(value: boolean);
			static get currentResolution(): UnityEngine.Resolution;
			static get fullScreen(): boolean;
			static set fullScreen(value: boolean);
			static get fullScreenMode(): UnityEngine.FullScreenMode;
			static set fullScreenMode(value: UnityEngine.FullScreenMode);
			static get safeArea(): UnityEngine.Rect;
			static get resolutions(): UnityEngine.Resolution[];
			/**[Obsolete][Error]--"Property GetResolution has been deprecated. Use resolutions instead (UnityUpgradable) -> resolutions" */
			static get GetResolution(): UnityEngine.Resolution[];
			/**[Obsolete][Error]--"Property showCursor has been deprecated. Use Cursor.visible instead (UnityUpgradable) -> UnityEngine.Cursor.visible" */
			static get showCursor(): boolean;
			/**[Obsolete][Error]--"Property showCursor has been deprecated. Use Cursor.visible instead (UnityUpgradable) -> UnityEngine.Cursor.visible" */
			static set showCursor(value: boolean);
			/**[Obsolete]--"Use Cursor.lockState and Cursor.visible instead." */
			static get lockCursor(): boolean;
			/**[Obsolete]--"Use Cursor.lockState and Cursor.visible instead." */
			static set lockCursor(value: boolean);
			constructor();
			static SetResolution(width: number, height: number, fullscreenMode: UnityEngine.FullScreenMode, preferredRefreshRate: number): void;
			static SetResolution(width: number, height: number, fullscreenMode: UnityEngine.FullScreenMode): void;
			static SetResolution(width: number, height: number, fullscreen: boolean, preferredRefreshRate: number): void;
			static SetResolution(width: number, height: number, fullscreen: boolean): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RenderBuffer {
			GetNativeRenderBufferPtr(): System.IntPtr;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Graphics extends System.Object {
			static get activeColorGamut(): UnityEngine.ColorGamut;
			static get activeTier(): any;
			static set activeTier(value: any);
			static get activeColorBuffer(): UnityEngine.RenderBuffer;
			static get activeDepthBuffer(): UnityEngine.RenderBuffer;
			/**[Obsolete][Error]--"Property deviceName has been deprecated. Use SystemInfo.graphicsDeviceName instead (UnityUpgradable) -> UnityEngine.SystemInfo.graphicsDeviceName" */
			static get deviceName(): string;
			/**[Obsolete][Error]--"Property deviceVendor has been deprecated. Use SystemInfo.graphicsDeviceVendor instead (UnityUpgradable) -> UnityEngine.SystemInfo.graphicsDeviceVendor" */
			static get deviceVendor(): string;
			/**[Obsolete][Error]--"Property deviceVersion has been deprecated. Use SystemInfo.graphicsDeviceVersion instead (UnityUpgradable) -> UnityEngine.SystemInfo.graphicsDeviceVersion" */
			static get deviceVersion(): string;
			constructor();
			static ClearRandomWriteTargets(): void;
			static ExecuteCommandBuffer(buffer: any): void;
			static ExecuteCommandBufferAsync(buffer: any, queueType: any): void;
			static SetRenderTarget(rt: UnityEngine.RenderTexture, mipLevel: number, face: UnityEngine.CubemapFace, depthSlice: number): void;
			static SetRenderTarget(colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer, mipLevel: number, face: UnityEngine.CubemapFace, depthSlice: number): void;
			static SetRenderTarget(colorBuffers: UnityEngine.RenderBuffer[], depthBuffer: UnityEngine.RenderBuffer): void;
			static SetRenderTarget(setup: UnityEngine.RenderTargetSetup): void;
			static SetRenderTarget(rt: UnityEngine.RenderTexture): void;
			static SetRenderTarget(rt: UnityEngine.RenderTexture, mipLevel: number): void;
			static SetRenderTarget(rt: UnityEngine.RenderTexture, mipLevel: number, face: UnityEngine.CubemapFace): void;
			static SetRenderTarget(colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer): void;
			static SetRenderTarget(colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer, mipLevel: number): void;
			static SetRenderTarget(colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer, mipLevel: number, face: UnityEngine.CubemapFace): void;
			static SetRandomWriteTarget(index: number, uav: UnityEngine.RenderTexture): void;
			static SetRandomWriteTarget(index: number, uav: UnityEngine.ComputeBuffer, preserveCounterValue: boolean): void;
			static SetRandomWriteTarget(index: number, uav: UnityEngine.ComputeBuffer): void;
			static CopyTexture(src: UnityEngine.Texture, dst: UnityEngine.Texture): void;
			static CopyTexture(src: UnityEngine.Texture, srcElement: number, dst: UnityEngine.Texture, dstElement: number): void;
			static CopyTexture(src: UnityEngine.Texture, srcElement: number, srcMip: number, dst: UnityEngine.Texture, dstElement: number, dstMip: number): void;
			static CopyTexture(src: UnityEngine.Texture, srcElement: number, srcMip: number, srcX: number, srcY: number, srcWidth: number, srcHeight: number, dst: UnityEngine.Texture, dstElement: number, dstMip: number, dstX: number, dstY: number): void;
			static ConvertTexture(src: UnityEngine.Texture, dst: UnityEngine.Texture): boolean;
			static ConvertTexture(src: UnityEngine.Texture, srcElement: number, dst: UnityEngine.Texture, dstElement: number): boolean;
			static CreateGPUFence(stage: any): any;
			static CreateGPUFence(): any;
			static WaitOnGPUFence(fence: any, stage: any): void;
			static WaitOnGPUFence(fence: any): void;
			static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, color: UnityEngine.Color, mat: UnityEngine.Material, pass: number): void;
			static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material, pass: number): void;
			static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material, pass: number): void;
			static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, mat: UnityEngine.Material, pass: number): void;
			static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, color: UnityEngine.Color, mat: UnityEngine.Material): void;
			static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, color: UnityEngine.Color): void;
			static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material): void;
			static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, sourceRect: UnityEngine.Rect, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number): void;
			static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number, mat: UnityEngine.Material): void;
			static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, leftBorder: number, rightBorder: number, topBorder: number, bottomBorder: number): void;
			static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture, mat: UnityEngine.Material): void;
			static DrawTexture(screenRect: UnityEngine.Rect, texture: UnityEngine.Texture): void;
			static DrawMeshNow(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, materialIndex: number): void;
			static DrawMeshNow(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, materialIndex: number): void;
			static DrawMeshNow(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
			static DrawMeshNow(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean, useLightProbes: boolean): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, probeAnchor: UnityEngine.Transform, useLightProbes: boolean): void;
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean, useLightProbes: boolean): void;
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, probeAnchor: UnityEngine.Transform, lightProbeUsage: any, lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume): void;
			/**[Obsolete][Error]--"Method DrawMesh has been deprecated. Use Graphics.DrawMeshNow instead (UnityUpgradable) -> DrawMeshNow(*)" */
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
			/**[Obsolete][Error]--"Method DrawMesh has been deprecated. Use Graphics.DrawMeshNow instead (UnityUpgradable) -> DrawMeshNow(*)" */
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, materialIndex: number): void;
			/**[Obsolete][Error]--"Method DrawMesh has been deprecated. Use Graphics.DrawMeshNow instead (UnityUpgradable) -> DrawMeshNow(*)" */
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4): void;
			/**[Obsolete][Error]--"Method DrawMesh has been deprecated. Use Graphics.DrawMeshNow instead (UnityUpgradable) -> DrawMeshNow(*)" */
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, materialIndex: number): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean): void;
			static DrawMesh(mesh: UnityEngine.Mesh, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, probeAnchor: UnityEngine.Transform): void;
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number): void;
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera): void;
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number): void;
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock): void;
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean): void;
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: boolean, receiveShadows: boolean): void;
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any): void;
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean): void;
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, probeAnchor: UnityEngine.Transform): void;
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, probeAnchor: UnityEngine.Transform, useLightProbes: boolean): void;
			static DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, layer: number, camera: UnityEngine.Camera, submeshIndex: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, probeAnchor: UnityEngine.Transform, lightProbeUsage: any): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera, lightProbeUsage: any, lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: any, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera, lightProbeUsage: any, lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[]): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, layer: number): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera, lightProbeUsage: any): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: any): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: any, properties: UnityEngine.MaterialPropertyBlock): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: any, properties: UnityEngine.MaterialPropertyBlock, castShadows: any): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: any, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: any, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, layer: number): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: any, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera): void;
			static DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, matrices: any, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera, lightProbeUsage: any): void;
			static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera, lightProbeUsage: any, lightProbeProxyVolume: UnityEngine.LightProbeProxyVolume): void;
			static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer): void;
			static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number): void;
			static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock): void;
			static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any): void;
			static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean): void;
			static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, layer: number): void;
			static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera): void;
			static DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, bounds: UnityEngine.Bounds, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock, castShadows: any, receiveShadows: boolean, layer: number, camera: UnityEngine.Camera, lightProbeUsage: any): void;
			static DrawProcedural(topology: UnityEngine.MeshTopology, vertexCount: number, instanceCount: number): void;
			static DrawProcedural(topology: UnityEngine.MeshTopology, vertexCount: number): void;
			static DrawProceduralIndirect(topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number): void;
			static DrawProceduralIndirect(topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer): void;
			static Blit(source: UnityEngine.Texture, dest: UnityEngine.RenderTexture): void;
			static Blit(source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, scale: UnityEngine.Vector2, offset: UnityEngine.Vector2): void;
			static Blit(source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, mat: UnityEngine.Material, pass: number): void;
			static Blit(source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, mat: UnityEngine.Material): void;
			static Blit(source: UnityEngine.Texture, mat: UnityEngine.Material, pass: number): void;
			static Blit(source: UnityEngine.Texture, mat: UnityEngine.Material): void;
			static BlitMultiTap(source: UnityEngine.Texture, dest: UnityEngine.RenderTexture, mat: UnityEngine.Material, offsets: UnityEngine.Vector2[]): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GL extends System.Object {
			static TRIANGLES: number;
			static TRIANGLE_STRIP: number;
			static QUADS: number;
			static LINES: number;
			static LINE_STRIP: number;
			static get wireframe(): boolean;
			static set wireframe(value: boolean);
			static get sRGBWrite(): boolean;
			static set sRGBWrite(value: boolean);
			static get invertCulling(): boolean;
			static set invertCulling(value: boolean);
			static get modelview(): UnityEngine.Matrix4x4;
			static set modelview(value: UnityEngine.Matrix4x4);
			constructor();
			static Vertex3(x: number, y: number, z: number): void;
			static Vertex(v: UnityEngine.Vector3): void;
			static TexCoord3(x: number, y: number, z: number): void;
			static TexCoord(v: UnityEngine.Vector3): void;
			static TexCoord2(x: number, y: number): void;
			static MultiTexCoord3(unit: number, x: number, y: number, z: number): void;
			static MultiTexCoord(unit: number, v: UnityEngine.Vector3): void;
			static MultiTexCoord2(unit: number, x: number, y: number): void;
			static Color(c: UnityEngine.Color): void;
			static Flush(): void;
			static RenderTargetBarrier(): void;
			static MultMatrix(m: UnityEngine.Matrix4x4): void;
			/**[Obsolete]--"IssuePluginEvent(eventID) is deprecated. Use IssuePluginEvent(callback, eventID) instead." */
			static IssuePluginEvent(eventID: number): void;
			static IssuePluginEvent(callback: System.IntPtr, eventID: number): void;
			/**[Obsolete]--"SetRevertBackfacing(revertBackFaces) is deprecated. Use invertCulling property instead." */
			static SetRevertBackfacing(revertBackFaces: boolean): void;
			static PushMatrix(): void;
			static PopMatrix(): void;
			static LoadIdentity(): void;
			static LoadOrtho(): void;
			static LoadPixelMatrix(): void;
			static LoadPixelMatrix(left: number, right: number, bottom: number, top: number): void;
			static LoadProjectionMatrix(mat: UnityEngine.Matrix4x4): void;
			static InvalidateState(): void;
			static GetGPUProjectionMatrix(proj: UnityEngine.Matrix4x4, renderIntoTexture: boolean): UnityEngine.Matrix4x4;
			static Begin(mode: number): void;
			static End(): void;
			static Clear(clearDepth: boolean, clearColor: boolean, backgroundColor: UnityEngine.Color, depth: number): void;
			static Clear(clearDepth: boolean, clearColor: boolean, backgroundColor: UnityEngine.Color): void;
			static Viewport(pixelRect: UnityEngine.Rect): void;
			static ClearWithSkybox(clearDepth: boolean, camera: UnityEngine.Camera): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ScalableBufferManager extends System.Object {
			static get widthScaleFactor(): number;
			static get heightScaleFactor(): number;
			static ResizeBuffers(widthScale: number, heightScale: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FrameTiming {
			cpuTimePresentCalled: number;
			cpuFrameTime: number;
			cpuTimeFrameComplete: number;
			gpuFrameTime: number;
			heightScale: number;
			widthScale: number;
			syncInterval: number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FrameTimingManager extends System.Object {
			static CaptureFrameTimings(): void;
			static GetLatestTimings(numFrames: number, timings: UnityEngine.FrameTiming[]): number;
			static GetVSyncsPerSecond(): number;
			static GetGpuTimerFrequency(): number;
			static GetCpuTimerFrequency(): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LightmapData extends System.Object {
			/**[Obsolete]--"Use lightmapColor property (UnityUpgradable) -> lightmapColor" */
			get lightmapLight(): UnityEngine.Texture2D;
			/**[Obsolete]--"Use lightmapColor property (UnityUpgradable) -> lightmapColor" */
			set lightmapLight(value: UnityEngine.Texture2D);
			get lightmapColor(): UnityEngine.Texture2D;
			set lightmapColor(value: UnityEngine.Texture2D);
			get lightmapDir(): UnityEngine.Texture2D;
			set lightmapDir(value: UnityEngine.Texture2D);
			get shadowMask(): UnityEngine.Texture2D;
			set shadowMask(value: UnityEngine.Texture2D);
			/**[Obsolete][Error]--"Property LightmapData.lightmap has been deprecated. Use LightmapData.lightmapColor instead (UnityUpgradable) -> lightmapColor" */
			get lightmap(): UnityEngine.Texture2D;
			/**[Obsolete][Error]--"Property LightmapData.lightmap has been deprecated. Use LightmapData.lightmapColor instead (UnityUpgradable) -> lightmapColor" */
			set lightmap(value: UnityEngine.Texture2D);
			/**[Obsolete][Error]--"Property LightmapData.lightmapFar has been deprecated. Use LightmapData.lightmapColor instead (UnityUpgradable) -> lightmapColor" */
			get lightmapFar(): UnityEngine.Texture2D;
			/**[Obsolete][Error]--"Property LightmapData.lightmapFar has been deprecated. Use LightmapData.lightmapColor instead (UnityUpgradable) -> lightmapColor" */
			set lightmapFar(value: UnityEngine.Texture2D);
			/**[Obsolete][Error]--"Property LightmapData.lightmapNear has been deprecated. Use LightmapData.lightmapDir instead (UnityUpgradable) -> lightmapDir" */
			get lightmapNear(): UnityEngine.Texture2D;
			/**[Obsolete][Error]--"Property LightmapData.lightmapNear has been deprecated. Use LightmapData.lightmapDir instead (UnityUpgradable) -> lightmapDir" */
			set lightmapNear(value: UnityEngine.Texture2D);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LightmapSettings extends UnityEngine.Object {
			static get lightmaps(): UnityEngine.LightmapData[];
			static set lightmaps(value: UnityEngine.LightmapData[]);
			static get lightmapsMode(): UnityEngine.LightmapsMode;
			static set lightmapsMode(value: UnityEngine.LightmapsMode);
			static get lightProbes(): UnityEngine.LightProbes;
			static set lightProbes(value: UnityEngine.LightProbes);
			/**[Obsolete]--"Use lightmapsMode instead." */
			static get lightmapsModeLegacy(): UnityEngine.LightmapsModeLegacy;
			/**[Obsolete]--"Use lightmapsMode instead." */
			static set lightmapsModeLegacy(value: UnityEngine.LightmapsModeLegacy);
			/**[Obsolete]--"Use QualitySettings.desiredColorSpace instead." */
			static get bakedColorSpace(): UnityEngine.ColorSpace;
			/**[Obsolete]--"Use QualitySettings.desiredColorSpace instead." */
			static set bakedColorSpace(value: UnityEngine.ColorSpace);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LightProbes extends UnityEngine.Object {
			get positions(): UnityEngine.Vector3[];
			get bakedProbes(): any;
			set bakedProbes(value: any);
			get count(): number;
			get cellCount(): number;
			/**[Obsolete][Error]--"Use bakedProbes instead." */
			get coefficients(): number[];
			/**[Obsolete][Error]--"Use bakedProbes instead." */
			set coefficients(value: number[]);
			static GetInterpolatedProbe(position: UnityEngine.Vector3, renderer: UnityEngine.Renderer, probe: any): void;
			static CalculateInterpolatedLightAndOcclusionProbes(positions: UnityEngine.Vector3[], lightProbes: any, occlusionProbes: UnityEngine.Vector4[]): void;
			static CalculateInterpolatedLightAndOcclusionProbes(positions: any, lightProbes: any, occlusionProbes: any): void;
			/**[Obsolete][Error]--"Use GetInterpolatedProbe instead." */
			GetInterpolatedLightProbe(position: UnityEngine.Vector3, renderer: UnityEngine.Renderer, coefficients: number[]): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Resolution {
			get width(): number;
			set width(value: number);
			get height(): number;
			set height(value: number);
			get refreshRate(): number;
			set refreshRate(value: number);
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RenderTargetSetup {
			color: UnityEngine.RenderBuffer[];
			depth: UnityEngine.RenderBuffer;
			mipLevel: number;
			cubemapFace: UnityEngine.CubemapFace;
			depthSlice: number;
			colorLoad: any;
			colorStore: any;
			depthLoad: any;
			depthStore: any;
			constructor(color: UnityEngine.RenderBuffer[], depth: UnityEngine.RenderBuffer, mip: number, face: UnityEngine.CubemapFace, colorLoad: any, colorStore: any, depthLoad: any, depthStore: any);
			constructor(color: UnityEngine.RenderBuffer, depth: UnityEngine.RenderBuffer);
			constructor(color: UnityEngine.RenderBuffer, depth: UnityEngine.RenderBuffer, mipLevel: number);
			constructor(color: UnityEngine.RenderBuffer, depth: UnityEngine.RenderBuffer, mipLevel: number, face: UnityEngine.CubemapFace);
			constructor(color: UnityEngine.RenderBuffer, depth: UnityEngine.RenderBuffer, mipLevel: number, face: UnityEngine.CubemapFace, depthSlice: number);
			constructor(color: UnityEngine.RenderBuffer[], depth: UnityEngine.RenderBuffer);
			constructor(color: UnityEngine.RenderBuffer[], depth: UnityEngine.RenderBuffer, mipLevel: number);
			constructor(color: UnityEngine.RenderBuffer[], depth: UnityEngine.RenderBuffer, mip: number, face: UnityEngine.CubemapFace);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class QualitySettings extends UnityEngine.Object {
			/**[Obsolete]--"Use GetQualityLevel and SetQualityLevel" */
			static get currentLevel(): UnityEngine.QualityLevel;
			/**[Obsolete]--"Use GetQualityLevel and SetQualityLevel" */
			static set currentLevel(value: UnityEngine.QualityLevel);
			static get pixelLightCount(): number;
			static set pixelLightCount(value: number);
			static get shadows(): UnityEngine.ShadowQuality;
			static set shadows(value: UnityEngine.ShadowQuality);
			static get shadowProjection(): UnityEngine.ShadowProjection;
			static set shadowProjection(value: UnityEngine.ShadowProjection);
			static get shadowCascades(): number;
			static set shadowCascades(value: number);
			static get shadowDistance(): number;
			static set shadowDistance(value: number);
			static get shadowResolution(): UnityEngine.ShadowResolution;
			static set shadowResolution(value: UnityEngine.ShadowResolution);
			static get shadowmaskMode(): UnityEngine.ShadowmaskMode;
			static set shadowmaskMode(value: UnityEngine.ShadowmaskMode);
			static get shadowNearPlaneOffset(): number;
			static set shadowNearPlaneOffset(value: number);
			static get shadowCascade2Split(): number;
			static set shadowCascade2Split(value: number);
			static get shadowCascade4Split(): UnityEngine.Vector3;
			static set shadowCascade4Split(value: UnityEngine.Vector3);
			static get lodBias(): number;
			static set lodBias(value: number);
			static get anisotropicFiltering(): UnityEngine.AnisotropicFiltering;
			static set anisotropicFiltering(value: UnityEngine.AnisotropicFiltering);
			static get masterTextureLimit(): number;
			static set masterTextureLimit(value: number);
			static get maximumLODLevel(): number;
			static set maximumLODLevel(value: number);
			static get particleRaycastBudget(): number;
			static set particleRaycastBudget(value: number);
			static get softParticles(): boolean;
			static set softParticles(value: boolean);
			static get softVegetation(): boolean;
			static set softVegetation(value: boolean);
			static get vSyncCount(): number;
			static set vSyncCount(value: number);
			static get antiAliasing(): number;
			static set antiAliasing(value: number);
			static get asyncUploadTimeSlice(): number;
			static set asyncUploadTimeSlice(value: number);
			static get asyncUploadBufferSize(): number;
			static set asyncUploadBufferSize(value: number);
			static get asyncUploadPersistentBuffer(): boolean;
			static set asyncUploadPersistentBuffer(value: boolean);
			static get realtimeReflectionProbes(): boolean;
			static set realtimeReflectionProbes(value: boolean);
			static get billboardsFaceCameraPosition(): boolean;
			static set billboardsFaceCameraPosition(value: boolean);
			static get resolutionScalingFixedDPIFactor(): number;
			static set resolutionScalingFixedDPIFactor(value: number);
			static get blendWeights(): UnityEngine.BlendWeights;
			static set blendWeights(value: UnityEngine.BlendWeights);
			static get streamingMipmapsActive(): boolean;
			static set streamingMipmapsActive(value: boolean);
			static get streamingMipmapsMemoryBudget(): number;
			static set streamingMipmapsMemoryBudget(value: number);
			static get streamingMipmapsRenderersPerFrame(): number;
			static set streamingMipmapsRenderersPerFrame(value: number);
			static get streamingMipmapsMaxLevelReduction(): number;
			static set streamingMipmapsMaxLevelReduction(value: number);
			static get streamingMipmapsAddAllCameras(): boolean;
			static set streamingMipmapsAddAllCameras(value: boolean);
			static get streamingMipmapsMaxFileIORequests(): number;
			static set streamingMipmapsMaxFileIORequests(value: number);
			static get maxQueuedFrames(): number;
			static set maxQueuedFrames(value: number);
			static get names(): string[];
			static get desiredColorSpace(): UnityEngine.ColorSpace;
			static get activeColorSpace(): UnityEngine.ColorSpace;
			static IncreaseLevel(applyExpensiveChanges: boolean): void;
			static IncreaseLevel(): void;
			static DecreaseLevel(applyExpensiveChanges: boolean): void;
			static DecreaseLevel(): void;
			static SetQualityLevel(index: number): void;
			static SetQualityLevel(index: number, applyExpensiveChanges: boolean): void;
			static GetQualityLevel(): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RendererExtensions extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ImageEffectTransformsToLDR extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ImageEffectAllowedInSceneView extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ImageEffectOpaque extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ImageEffectAfterScale extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Mesh extends UnityEngine.Object {
			/**[Obsolete][Error]--"Property Mesh.uv1 has been deprecated. Use Mesh.uv2 instead (UnityUpgradable) -> uv2" */
			get uv1(): UnityEngine.Vector2[];
			/**[Obsolete][Error]--"Property Mesh.uv1 has been deprecated. Use Mesh.uv2 instead (UnityUpgradable) -> uv2" */
			set uv1(value: UnityEngine.Vector2[]);
			get indexFormat(): any;
			set indexFormat(value: any);
			get vertexBufferCount(): number;
			get blendShapeCount(): number;
			get boneWeights(): UnityEngine.BoneWeight[];
			set boneWeights(value: UnityEngine.BoneWeight[]);
			get bindposes(): UnityEngine.Matrix4x4[];
			set bindposes(value: UnityEngine.Matrix4x4[]);
			get isReadable(): boolean;
			get vertexCount(): number;
			get subMeshCount(): number;
			set subMeshCount(value: number);
			get bounds(): UnityEngine.Bounds;
			set bounds(value: UnityEngine.Bounds);
			get vertices(): UnityEngine.Vector3[];
			set vertices(value: UnityEngine.Vector3[]);
			get normals(): UnityEngine.Vector3[];
			set normals(value: UnityEngine.Vector3[]);
			get tangents(): UnityEngine.Vector4[];
			set tangents(value: UnityEngine.Vector4[]);
			get uv(): UnityEngine.Vector2[];
			set uv(value: UnityEngine.Vector2[]);
			get uv2(): UnityEngine.Vector2[];
			set uv2(value: UnityEngine.Vector2[]);
			get uv3(): UnityEngine.Vector2[];
			set uv3(value: UnityEngine.Vector2[]);
			get uv4(): UnityEngine.Vector2[];
			set uv4(value: UnityEngine.Vector2[]);
			get uv5(): UnityEngine.Vector2[];
			set uv5(value: UnityEngine.Vector2[]);
			get uv6(): UnityEngine.Vector2[];
			set uv6(value: UnityEngine.Vector2[]);
			get uv7(): UnityEngine.Vector2[];
			set uv7(value: UnityEngine.Vector2[]);
			get uv8(): UnityEngine.Vector2[];
			set uv8(value: UnityEngine.Vector2[]);
			get colors(): UnityEngine.Color[];
			set colors(value: UnityEngine.Color[]);
			get colors32(): UnityEngine.Color32[];
			set colors32(value: UnityEngine.Color32[]);
			get triangles(): number[];
			set triangles(value: number[]);
			constructor();
			GetNativeVertexBufferPtr(index: number): System.IntPtr;
			GetNativeIndexBufferPtr(): System.IntPtr;
			ClearBlendShapes(): void;
			GetBlendShapeName(shapeIndex: number): string;
			GetBlendShapeIndex(blendShapeName: string): number;
			GetBlendShapeFrameCount(shapeIndex: number): number;
			GetBlendShapeFrameWeight(shapeIndex: number, frameIndex: number): number;
			GetBlendShapeFrameVertices(shapeIndex: number, frameIndex: number, deltaVertices: UnityEngine.Vector3[], deltaNormals: UnityEngine.Vector3[], deltaTangents: UnityEngine.Vector3[]): void;
			AddBlendShapeFrame(shapeName: string, frameWeight: number, deltaVertices: UnityEngine.Vector3[], deltaNormals: UnityEngine.Vector3[], deltaTangents: UnityEngine.Vector3[]): void;
			GetUVDistributionMetric(uvSetIndex: number): number;
			GetVertices(vertices: any): void;
			SetVertices(inVertices: any): void;
			GetNormals(normals: any): void;
			SetNormals(inNormals: any): void;
			GetTangents(tangents: any): void;
			SetTangents(inTangents: any): void;
			GetColors(colors: any): void;
			GetColors(colors: any): void;
			SetColors(inColors: any): void;
			SetColors(inColors: any): void;
			SetUVs(channel: number, uvs: any): void;
			SetUVs(channel: number, uvs: any): void;
			SetUVs(channel: number, uvs: any): void;
			GetUVs(channel: number, uvs: any): void;
			GetUVs(channel: number, uvs: any): void;
			GetUVs(channel: number, uvs: any): void;
			GetTriangles(submesh: number): number[];
			GetTriangles(submesh: number, applyBaseVertex: boolean): number[];
			GetTriangles(triangles: any, submesh: number): void;
			GetTriangles(triangles: any, submesh: number, applyBaseVertex: boolean): void;
			GetIndices(submesh: number): number[];
			GetIndices(submesh: number, applyBaseVertex: boolean): number[];
			GetIndices(indices: any, submesh: number): void;
			GetIndices(indices: any, submesh: number, applyBaseVertex: boolean): void;
			GetIndexStart(submesh: number): number;
			GetIndexCount(submesh: number): number;
			GetBaseVertex(submesh: number): number;
			SetTriangles(triangles: number[], submesh: number): void;
			SetTriangles(triangles: number[], submesh: number, calculateBounds: boolean): void;
			SetTriangles(triangles: number[], submesh: number, calculateBounds: boolean, baseVertex: number): void;
			SetTriangles(triangles: any, submesh: number): void;
			SetTriangles(triangles: any, submesh: number, calculateBounds: boolean): void;
			SetTriangles(triangles: any, submesh: number, calculateBounds: boolean, baseVertex: number): void;
			SetIndices(indices: number[], topology: UnityEngine.MeshTopology, submesh: number): void;
			SetIndices(indices: number[], topology: UnityEngine.MeshTopology, submesh: number, calculateBounds: boolean): void;
			SetIndices(indices: number[], topology: UnityEngine.MeshTopology, submesh: number, calculateBounds: boolean, baseVertex: number): void;
			GetBindposes(bindposes: any): void;
			GetBoneWeights(boneWeights: any): void;
			Clear(keepVertexLayout: boolean): void;
			Clear(): void;
			RecalculateBounds(): void;
			RecalculateNormals(): void;
			RecalculateTangents(): void;
			MarkDynamic(): void;
			UploadMeshData(markNoLongerReadable: boolean): void;
			GetTopology(submesh: number): UnityEngine.MeshTopology;
			CombineMeshes(combine: UnityEngine.CombineInstance[], mergeSubMeshes: boolean, useMatrices: boolean, hasLightmapData: boolean): void;
			CombineMeshes(combine: UnityEngine.CombineInstance[], mergeSubMeshes: boolean, useMatrices: boolean): void;
			CombineMeshes(combine: UnityEngine.CombineInstance[], mergeSubMeshes: boolean): void;
			CombineMeshes(combine: UnityEngine.CombineInstance[]): void;
			/**[Obsolete][Error]--"This method is no longer supported (UnityUpgradable)" */
			Optimize(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Renderer extends UnityEngine.Component {
			/**[Obsolete][Error]--"Property lightmapTilingOffset has been deprecated. Use lightmapScaleOffset (UnityUpgradable) -> lightmapScaleOffset" */
			get lightmapTilingOffset(): UnityEngine.Vector4;
			/**[Obsolete][Error]--"Property lightmapTilingOffset has been deprecated. Use lightmapScaleOffset (UnityUpgradable) -> lightmapScaleOffset" */
			set lightmapTilingOffset(value: UnityEngine.Vector4);
			/**[Obsolete][Error]--"Use probeAnchor instead (UnityUpgradable) -> probeAnchor" */
			get lightProbeAnchor(): UnityEngine.Transform;
			/**[Obsolete][Error]--"Use probeAnchor instead (UnityUpgradable) -> probeAnchor" */
			set lightProbeAnchor(value: UnityEngine.Transform);
			/**[Obsolete]--"Use shadowCastingMode instead." */
			get castShadows(): boolean;
			/**[Obsolete]--"Use shadowCastingMode instead." */
			set castShadows(value: boolean);
			/**[Obsolete]--"Use motionVectorGenerationMode instead." */
			get motionVectors(): boolean;
			/**[Obsolete]--"Use motionVectorGenerationMode instead." */
			set motionVectors(value: boolean);
			/**[Obsolete]--"Use lightProbeUsage instead." */
			get useLightProbes(): boolean;
			/**[Obsolete]--"Use lightProbeUsage instead." */
			set useLightProbes(value: boolean);
			get bounds(): UnityEngine.Bounds;
			get enabled(): boolean;
			set enabled(value: boolean);
			get isVisible(): boolean;
			get shadowCastingMode(): any;
			set shadowCastingMode(value: any);
			get receiveShadows(): boolean;
			set receiveShadows(value: boolean);
			get motionVectorGenerationMode(): UnityEngine.MotionVectorGenerationMode;
			set motionVectorGenerationMode(value: UnityEngine.MotionVectorGenerationMode);
			get lightProbeUsage(): any;
			set lightProbeUsage(value: any);
			get reflectionProbeUsage(): any;
			set reflectionProbeUsage(value: any);
			get renderingLayerMask(): number;
			set renderingLayerMask(value: number);
			get rendererPriority(): number;
			set rendererPriority(value: number);
			get sortingLayerName(): string;
			set sortingLayerName(value: string);
			get sortingLayerID(): number;
			set sortingLayerID(value: number);
			get sortingOrder(): number;
			set sortingOrder(value: number);
			get allowOcclusionWhenDynamic(): boolean;
			set allowOcclusionWhenDynamic(value: boolean);
			get isPartOfStaticBatch(): boolean;
			get worldToLocalMatrix(): UnityEngine.Matrix4x4;
			get localToWorldMatrix(): UnityEngine.Matrix4x4;
			get lightProbeProxyVolumeOverride(): UnityEngine.GameObject;
			set lightProbeProxyVolumeOverride(value: UnityEngine.GameObject);
			get probeAnchor(): UnityEngine.Transform;
			set probeAnchor(value: UnityEngine.Transform);
			get lightmapIndex(): number;
			set lightmapIndex(value: number);
			get realtimeLightmapIndex(): number;
			set realtimeLightmapIndex(value: number);
			get lightmapScaleOffset(): UnityEngine.Vector4;
			set lightmapScaleOffset(value: UnityEngine.Vector4);
			get realtimeLightmapScaleOffset(): UnityEngine.Vector4;
			set realtimeLightmapScaleOffset(value: UnityEngine.Vector4);
			get materials(): UnityEngine.Material[];
			set materials(value: UnityEngine.Material[]);
			get material(): UnityEngine.Material;
			set material(value: UnityEngine.Material);
			get sharedMaterial(): UnityEngine.Material;
			set sharedMaterial(value: UnityEngine.Material);
			get sharedMaterials(): UnityEngine.Material[];
			set sharedMaterials(value: UnityEngine.Material[]);
			constructor();
			HasPropertyBlock(): boolean;
			SetPropertyBlock(properties: UnityEngine.MaterialPropertyBlock): void;
			SetPropertyBlock(properties: UnityEngine.MaterialPropertyBlock, materialIndex: number): void;
			GetPropertyBlock(properties: UnityEngine.MaterialPropertyBlock): void;
			GetPropertyBlock(properties: UnityEngine.MaterialPropertyBlock, materialIndex: number): void;
			GetMaterials(m: any): void;
			GetSharedMaterials(m: any): void;
			GetClosestReflectionProbes(result: any): void;
			/**extension method */
			UpdateGIMaterials(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Projector extends UnityEngine.Behaviour {
			/**[Obsolete][Error]--"Property isOrthoGraphic has been deprecated. Use orthographic instead (UnityUpgradable) -> orthographic" */
			get isOrthoGraphic(): boolean;
			/**[Obsolete][Error]--"Property isOrthoGraphic has been deprecated. Use orthographic instead (UnityUpgradable) -> orthographic" */
			set isOrthoGraphic(value: boolean);
			/**[Obsolete][Error]--"Property orthoGraphicSize has been deprecated. Use orthographicSize instead (UnityUpgradable) -> orthographicSize" */
			get orthoGraphicSize(): number;
			/**[Obsolete][Error]--"Property orthoGraphicSize has been deprecated. Use orthographicSize instead (UnityUpgradable) -> orthographicSize" */
			set orthoGraphicSize(value: number);
			get nearClipPlane(): number;
			set nearClipPlane(value: number);
			get farClipPlane(): number;
			set farClipPlane(value: number);
			get fieldOfView(): number;
			set fieldOfView(value: number);
			get aspectRatio(): number;
			set aspectRatio(value: number);
			get orthographic(): boolean;
			set orthographic(value: boolean);
			get orthographicSize(): number;
			set orthographicSize(value: number);
			get ignoreLayers(): number;
			set ignoreLayers(value: number);
			get material(): UnityEngine.Material;
			set material(value: UnityEngine.Material);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Shader extends UnityEngine.Object {
			/**[Obsolete]--"Use Graphics.activeTier instead (UnityUpgradable) -> UnityEngine.Graphics.activeTier" */
			static get globalShaderHardwareTier(): any;
			/**[Obsolete]--"Use Graphics.activeTier instead (UnityUpgradable) -> UnityEngine.Graphics.activeTier" */
			static set globalShaderHardwareTier(value: any);
			get maximumLOD(): number;
			set maximumLOD(value: number);
			static get globalMaximumLOD(): number;
			static set globalMaximumLOD(value: number);
			get isSupported(): boolean;
			static get globalRenderPipeline(): string;
			static set globalRenderPipeline(value: string);
			get renderQueue(): number;
			/**[Obsolete][Error]--"SetGlobalTexGenMode is not supported anymore. Use programmable shaders to achieve the same effect." */
			static SetGlobalTexGenMode(propertyName: string, mode: UnityEngine.TexGenMode): void;
			/**[Obsolete][Error]--"SetGlobalTextureMatrixName is not supported anymore. Use programmable shaders to achieve the same effect." */
			static SetGlobalTextureMatrixName(propertyName: string, matrixName: string): void;
			static Find(name: string): UnityEngine.Shader;
			static EnableKeyword(keyword: string): void;
			static DisableKeyword(keyword: string): void;
			static IsKeywordEnabled(keyword: string): boolean;
			static WarmupAllShaders(): void;
			static PropertyToID(name: string): number;
			static SetGlobalFloat(name: string, value: number): void;
			static SetGlobalFloat(nameID: number, value: number): void;
			static SetGlobalInt(name: string, value: number): void;
			static SetGlobalInt(nameID: number, value: number): void;
			static SetGlobalVector(name: string, value: UnityEngine.Vector4): void;
			static SetGlobalVector(nameID: number, value: UnityEngine.Vector4): void;
			static SetGlobalColor(name: string, value: UnityEngine.Color): void;
			static SetGlobalColor(nameID: number, value: UnityEngine.Color): void;
			static SetGlobalMatrix(name: string, value: UnityEngine.Matrix4x4): void;
			static SetGlobalMatrix(nameID: number, value: UnityEngine.Matrix4x4): void;
			static SetGlobalTexture(name: string, value: UnityEngine.Texture): void;
			static SetGlobalTexture(nameID: number, value: UnityEngine.Texture): void;
			static SetGlobalBuffer(name: string, value: UnityEngine.ComputeBuffer): void;
			static SetGlobalBuffer(nameID: number, value: UnityEngine.ComputeBuffer): void;
			static SetGlobalFloatArray(name: string, values: any): void;
			static SetGlobalFloatArray(nameID: number, values: any): void;
			static SetGlobalFloatArray(name: string, values: number[]): void;
			static SetGlobalFloatArray(nameID: number, values: number[]): void;
			static SetGlobalVectorArray(name: string, values: any): void;
			static SetGlobalVectorArray(nameID: number, values: any): void;
			static SetGlobalVectorArray(name: string, values: UnityEngine.Vector4[]): void;
			static SetGlobalVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
			static SetGlobalMatrixArray(name: string, values: any): void;
			static SetGlobalMatrixArray(nameID: number, values: any): void;
			static SetGlobalMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): void;
			static SetGlobalMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
			static GetGlobalFloat(name: string): number;
			static GetGlobalFloat(nameID: number): number;
			static GetGlobalInt(name: string): number;
			static GetGlobalInt(nameID: number): number;
			static GetGlobalVector(name: string): UnityEngine.Vector4;
			static GetGlobalVector(nameID: number): UnityEngine.Vector4;
			static GetGlobalColor(name: string): UnityEngine.Color;
			static GetGlobalColor(nameID: number): UnityEngine.Color;
			static GetGlobalMatrix(name: string): UnityEngine.Matrix4x4;
			static GetGlobalMatrix(nameID: number): UnityEngine.Matrix4x4;
			static GetGlobalTexture(name: string): UnityEngine.Texture;
			static GetGlobalTexture(nameID: number): UnityEngine.Texture;
			static GetGlobalFloatArray(name: string): number[];
			static GetGlobalFloatArray(nameID: number): number[];
			static GetGlobalFloatArray(name: string, values: any): void;
			static GetGlobalFloatArray(nameID: number, values: any): void;
			static GetGlobalVectorArray(name: string): UnityEngine.Vector4[];
			static GetGlobalVectorArray(nameID: number): UnityEngine.Vector4[];
			static GetGlobalVectorArray(name: string, values: any): void;
			static GetGlobalVectorArray(nameID: number, values: any): void;
			static GetGlobalMatrixArray(name: string): UnityEngine.Matrix4x4[];
			static GetGlobalMatrixArray(nameID: number): UnityEngine.Matrix4x4[];
			static GetGlobalMatrixArray(name: string, values: any): void;
			static GetGlobalMatrixArray(nameID: number, values: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum LightmapsModeLegacy { Single = 0, Dual = 1, Directional = 2, }
		export class TrailRenderer extends UnityEngine.Renderer {
			/**[Obsolete]--"Use positionCount instead (UnityUpgradable) -> positionCount" */
			get numPositions(): number;
			get time(): number;
			set time(value: number);
			get startWidth(): number;
			set startWidth(value: number);
			get endWidth(): number;
			set endWidth(value: number);
			get widthMultiplier(): number;
			set widthMultiplier(value: number);
			get autodestruct(): boolean;
			set autodestruct(value: boolean);
			get emitting(): boolean;
			set emitting(value: boolean);
			get numCornerVertices(): number;
			set numCornerVertices(value: number);
			get numCapVertices(): number;
			set numCapVertices(value: number);
			get minVertexDistance(): number;
			set minVertexDistance(value: number);
			get startColor(): UnityEngine.Color;
			set startColor(value: UnityEngine.Color);
			get endColor(): UnityEngine.Color;
			set endColor(value: UnityEngine.Color);
			get positionCount(): number;
			get shadowBias(): number;
			set shadowBias(value: number);
			get generateLightingData(): boolean;
			set generateLightingData(value: boolean);
			get textureMode(): UnityEngine.LineTextureMode;
			set textureMode(value: UnityEngine.LineTextureMode);
			get alignment(): UnityEngine.LineAlignment;
			set alignment(value: UnityEngine.LineAlignment);
			get widthCurve(): UnityEngine.AnimationCurve;
			set widthCurve(value: UnityEngine.AnimationCurve);
			get colorGradient(): UnityEngine.Gradient;
			set colorGradient(value: UnityEngine.Gradient);
			constructor();
			SetPosition(index: number, position: UnityEngine.Vector3): void;
			GetPosition(index: number): UnityEngine.Vector3;
			Clear(): void;
			BakeMesh(mesh: UnityEngine.Mesh, useTransform?: boolean): void;
			BakeMesh(mesh: UnityEngine.Mesh, camera: UnityEngine.Camera, useTransform?: boolean): void;
			GetPositions(positions: UnityEngine.Vector3[]): number;
			SetPositions(positions: UnityEngine.Vector3[]): void;
			AddPosition(position: UnityEngine.Vector3): void;
			AddPositions(positions: UnityEngine.Vector3[]): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LineRenderer extends UnityEngine.Renderer {
			/**[Obsolete]--"Use positionCount instead (UnityUpgradable) -> positionCount" */
			get numPositions(): number;
			/**[Obsolete]--"Use positionCount instead (UnityUpgradable) -> positionCount" */
			set numPositions(value: number);
			get startWidth(): number;
			set startWidth(value: number);
			get endWidth(): number;
			set endWidth(value: number);
			get widthMultiplier(): number;
			set widthMultiplier(value: number);
			get numCornerVertices(): number;
			set numCornerVertices(value: number);
			get numCapVertices(): number;
			set numCapVertices(value: number);
			get useWorldSpace(): boolean;
			set useWorldSpace(value: boolean);
			get loop(): boolean;
			set loop(value: boolean);
			get startColor(): UnityEngine.Color;
			set startColor(value: UnityEngine.Color);
			get endColor(): UnityEngine.Color;
			set endColor(value: UnityEngine.Color);
			get positionCount(): number;
			set positionCount(value: number);
			get shadowBias(): number;
			set shadowBias(value: number);
			get generateLightingData(): boolean;
			set generateLightingData(value: boolean);
			get textureMode(): UnityEngine.LineTextureMode;
			set textureMode(value: UnityEngine.LineTextureMode);
			get alignment(): UnityEngine.LineAlignment;
			set alignment(value: UnityEngine.LineAlignment);
			get widthCurve(): UnityEngine.AnimationCurve;
			set widthCurve(value: UnityEngine.AnimationCurve);
			get colorGradient(): UnityEngine.Gradient;
			set colorGradient(value: UnityEngine.Gradient);
			constructor();
			/**[Obsolete]--"Use startWidth, endWidth or widthCurve instead." */
			SetWidth(start: number, end: number): void;
			/**[Obsolete]--"Use startColor, endColor or colorGradient instead." */
			SetColors(start: UnityEngine.Color, end: UnityEngine.Color): void;
			/**[Obsolete]--"Use positionCount instead." */
			SetVertexCount(count: number): void;
			SetPosition(index: number, position: UnityEngine.Vector3): void;
			GetPosition(index: number): UnityEngine.Vector3;
			Simplify(tolerance: number): void;
			BakeMesh(mesh: UnityEngine.Mesh, useTransform?: boolean): void;
			BakeMesh(mesh: UnityEngine.Mesh, camera: UnityEngine.Camera, useTransform?: boolean): void;
			GetPositions(positions: UnityEngine.Vector3[]): number;
			SetPositions(positions: UnityEngine.Vector3[]): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MaterialPropertyBlock extends System.Object {
			get isEmpty(): boolean;
			constructor();
			/**[Obsolete]--"Use SetFloat instead (UnityUpgradable) -> SetFloat(*)" */
			AddFloat(name: string, value: number): void;
			/**[Obsolete]--"Use SetFloat instead (UnityUpgradable) -> SetFloat(*)" */
			AddFloat(nameID: number, value: number): void;
			/**[Obsolete]--"Use SetVector instead (UnityUpgradable) -> SetVector(*)" */
			AddVector(name: string, value: UnityEngine.Vector4): void;
			/**[Obsolete]--"Use SetVector instead (UnityUpgradable) -> SetVector(*)" */
			AddVector(nameID: number, value: UnityEngine.Vector4): void;
			/**[Obsolete]--"Use SetColor instead (UnityUpgradable) -> SetColor(*)" */
			AddColor(name: string, value: UnityEngine.Color): void;
			/**[Obsolete]--"Use SetColor instead (UnityUpgradable) -> SetColor(*)" */
			AddColor(nameID: number, value: UnityEngine.Color): void;
			/**[Obsolete]--"Use SetMatrix instead (UnityUpgradable) -> SetMatrix(*)" */
			AddMatrix(name: string, value: UnityEngine.Matrix4x4): void;
			/**[Obsolete]--"Use SetMatrix instead (UnityUpgradable) -> SetMatrix(*)" */
			AddMatrix(nameID: number, value: UnityEngine.Matrix4x4): void;
			/**[Obsolete]--"Use SetTexture instead (UnityUpgradable) -> SetTexture(*)" */
			AddTexture(name: string, value: UnityEngine.Texture): void;
			/**[Obsolete]--"Use SetTexture instead (UnityUpgradable) -> SetTexture(*)" */
			AddTexture(nameID: number, value: UnityEngine.Texture): void;
			Clear(): void;
			SetFloat(name: string, value: number): void;
			SetFloat(nameID: number, value: number): void;
			SetInt(name: string, value: number): void;
			SetInt(nameID: number, value: number): void;
			SetVector(name: string, value: UnityEngine.Vector4): void;
			SetVector(nameID: number, value: UnityEngine.Vector4): void;
			SetColor(name: string, value: UnityEngine.Color): void;
			SetColor(nameID: number, value: UnityEngine.Color): void;
			SetMatrix(name: string, value: UnityEngine.Matrix4x4): void;
			SetMatrix(nameID: number, value: UnityEngine.Matrix4x4): void;
			SetBuffer(name: string, value: UnityEngine.ComputeBuffer): void;
			SetBuffer(nameID: number, value: UnityEngine.ComputeBuffer): void;
			SetTexture(name: string, value: UnityEngine.Texture): void;
			SetTexture(nameID: number, value: UnityEngine.Texture): void;
			SetFloatArray(name: string, values: any): void;
			SetFloatArray(nameID: number, values: any): void;
			SetFloatArray(name: string, values: number[]): void;
			SetFloatArray(nameID: number, values: number[]): void;
			SetVectorArray(name: string, values: any): void;
			SetVectorArray(nameID: number, values: any): void;
			SetVectorArray(name: string, values: UnityEngine.Vector4[]): void;
			SetVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
			SetMatrixArray(name: string, values: any): void;
			SetMatrixArray(nameID: number, values: any): void;
			SetMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): void;
			SetMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
			GetFloat(name: string): number;
			GetFloat(nameID: number): number;
			GetInt(name: string): number;
			GetInt(nameID: number): number;
			GetVector(name: string): UnityEngine.Vector4;
			GetVector(nameID: number): UnityEngine.Vector4;
			GetColor(name: string): UnityEngine.Color;
			GetColor(nameID: number): UnityEngine.Color;
			GetMatrix(name: string): UnityEngine.Matrix4x4;
			GetMatrix(nameID: number): UnityEngine.Matrix4x4;
			GetTexture(name: string): UnityEngine.Texture;
			GetTexture(nameID: number): UnityEngine.Texture;
			GetFloatArray(name: string): number[];
			GetFloatArray(nameID: number): number[];
			GetFloatArray(name: string, values: any): void;
			GetFloatArray(nameID: number, values: any): void;
			GetVectorArray(name: string): UnityEngine.Vector4[];
			GetVectorArray(nameID: number): UnityEngine.Vector4[];
			GetVectorArray(name: string, values: any): void;
			GetVectorArray(nameID: number, values: any): void;
			GetMatrixArray(name: string): UnityEngine.Matrix4x4[];
			GetMatrixArray(nameID: number): UnityEngine.Matrix4x4[];
			GetMatrixArray(name: string, values: any): void;
			GetMatrixArray(nameID: number, values: any): void;
			CopySHCoefficientArraysFrom(lightProbes: any): void;
			CopySHCoefficientArraysFrom(lightProbes: any): void;
			CopySHCoefficientArraysFrom(lightProbes: any, sourceStart: number, destStart: number, count: number): void;
			CopySHCoefficientArraysFrom(lightProbes: any, sourceStart: number, destStart: number, count: number): void;
			CopyProbeOcclusionArrayFrom(occlusionProbes: any): void;
			CopyProbeOcclusionArrayFrom(occlusionProbes: UnityEngine.Vector4[]): void;
			CopyProbeOcclusionArrayFrom(occlusionProbes: any, sourceStart: number, destStart: number, count: number): void;
			CopyProbeOcclusionArrayFrom(occlusionProbes: UnityEngine.Vector4[], sourceStart: number, destStart: number, count: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RenderSettings extends UnityEngine.Object {
			/**[Obsolete]--"Use RenderSettings.ambientIntensity instead (UnityUpgradable) -> ambientIntensity" */
			static get ambientSkyboxAmount(): number;
			/**[Obsolete]--"Use RenderSettings.ambientIntensity instead (UnityUpgradable) -> ambientIntensity" */
			static set ambientSkyboxAmount(value: number);
			static get fog(): boolean;
			static set fog(value: boolean);
			static get fogStartDistance(): number;
			static set fogStartDistance(value: number);
			static get fogEndDistance(): number;
			static set fogEndDistance(value: number);
			static get fogMode(): UnityEngine.FogMode;
			static set fogMode(value: UnityEngine.FogMode);
			static get fogColor(): UnityEngine.Color;
			static set fogColor(value: UnityEngine.Color);
			static get fogDensity(): number;
			static set fogDensity(value: number);
			static get ambientMode(): any;
			static set ambientMode(value: any);
			static get ambientSkyColor(): UnityEngine.Color;
			static set ambientSkyColor(value: UnityEngine.Color);
			static get ambientEquatorColor(): UnityEngine.Color;
			static set ambientEquatorColor(value: UnityEngine.Color);
			static get ambientGroundColor(): UnityEngine.Color;
			static set ambientGroundColor(value: UnityEngine.Color);
			static get ambientIntensity(): number;
			static set ambientIntensity(value: number);
			static get ambientLight(): UnityEngine.Color;
			static set ambientLight(value: UnityEngine.Color);
			static get subtractiveShadowColor(): UnityEngine.Color;
			static set subtractiveShadowColor(value: UnityEngine.Color);
			static get skybox(): UnityEngine.Material;
			static set skybox(value: UnityEngine.Material);
			static get sun(): UnityEngine.Light;
			static set sun(value: UnityEngine.Light);
			static get ambientProbe(): any;
			static set ambientProbe(value: any);
			static get customReflection(): UnityEngine.Cubemap;
			static set customReflection(value: UnityEngine.Cubemap);
			static get reflectionIntensity(): number;
			static set reflectionIntensity(value: number);
			static get reflectionBounces(): number;
			static set reflectionBounces(value: number);
			static get defaultReflectionMode(): any;
			static set defaultReflectionMode(value: any);
			static get defaultReflectionResolution(): number;
			static set defaultReflectionResolution(value: number);
			static get haloStrength(): number;
			static set haloStrength(value: number);
			static get flareStrength(): number;
			static set flareStrength(value: number);
			static get flareFadeSpeed(): number;
			static set flareFadeSpeed(value: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Material extends UnityEngine.Object {
			get shader(): UnityEngine.Shader;
			set shader(value: UnityEngine.Shader);
			get color(): UnityEngine.Color;
			set color(value: UnityEngine.Color);
			get mainTexture(): UnityEngine.Texture;
			set mainTexture(value: UnityEngine.Texture);
			get mainTextureOffset(): UnityEngine.Vector2;
			set mainTextureOffset(value: UnityEngine.Vector2);
			get mainTextureScale(): UnityEngine.Vector2;
			set mainTextureScale(value: UnityEngine.Vector2);
			get renderQueue(): number;
			set renderQueue(value: number);
			get globalIlluminationFlags(): UnityEngine.MaterialGlobalIlluminationFlags;
			set globalIlluminationFlags(value: UnityEngine.MaterialGlobalIlluminationFlags);
			get doubleSidedGI(): boolean;
			set doubleSidedGI(value: boolean);
			get enableInstancing(): boolean;
			set enableInstancing(value: boolean);
			get passCount(): number;
			get shaderKeywords(): string[];
			set shaderKeywords(value: string[]);
			constructor(shader: UnityEngine.Shader);
			constructor(source: UnityEngine.Material);
			constructor(contents: string);
			/**[Obsolete]--"Creating materials from shader source string will be removed in the future. Use Shader assets instead." */
			static Create(scriptContents: string): UnityEngine.Material;
			HasProperty(nameID: number): boolean;
			HasProperty(name: string): boolean;
			EnableKeyword(keyword: string): void;
			DisableKeyword(keyword: string): void;
			IsKeywordEnabled(keyword: string): boolean;
			SetShaderPassEnabled(passName: string, enabled: boolean): void;
			GetShaderPassEnabled(passName: string): boolean;
			GetPassName(pass: number): string;
			FindPass(passName: string): number;
			SetOverrideTag(tag: string, val: string): void;
			GetTag(tag: string, searchFallbacks: boolean, defaultValue: string): string;
			GetTag(tag: string, searchFallbacks: boolean): string;
			Lerp(start: UnityEngine.Material, end: UnityEngine.Material, t: number): void;
			SetPass(pass: number): boolean;
			CopyPropertiesFromMaterial(mat: UnityEngine.Material): void;
			GetTexturePropertyNames(): string[];
			GetTexturePropertyNames(outNames: any): void;
			GetTexturePropertyNameIDs(): number[];
			GetTexturePropertyNameIDs(outNames: any): void;
			SetFloat(name: string, value: number): void;
			SetFloat(nameID: number, value: number): void;
			SetInt(name: string, value: number): void;
			SetInt(nameID: number, value: number): void;
			SetColor(name: string, value: UnityEngine.Color): void;
			SetColor(nameID: number, value: UnityEngine.Color): void;
			SetVector(name: string, value: UnityEngine.Vector4): void;
			SetVector(nameID: number, value: UnityEngine.Vector4): void;
			SetMatrix(name: string, value: UnityEngine.Matrix4x4): void;
			SetMatrix(nameID: number, value: UnityEngine.Matrix4x4): void;
			SetTexture(name: string, value: UnityEngine.Texture): void;
			SetTexture(nameID: number, value: UnityEngine.Texture): void;
			SetBuffer(name: string, value: UnityEngine.ComputeBuffer): void;
			SetBuffer(nameID: number, value: UnityEngine.ComputeBuffer): void;
			SetFloatArray(name: string, values: any): void;
			SetFloatArray(nameID: number, values: any): void;
			SetFloatArray(name: string, values: number[]): void;
			SetFloatArray(nameID: number, values: number[]): void;
			SetColorArray(name: string, values: any): void;
			SetColorArray(nameID: number, values: any): void;
			SetColorArray(name: string, values: UnityEngine.Color[]): void;
			SetColorArray(nameID: number, values: UnityEngine.Color[]): void;
			SetVectorArray(name: string, values: any): void;
			SetVectorArray(nameID: number, values: any): void;
			SetVectorArray(name: string, values: UnityEngine.Vector4[]): void;
			SetVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
			SetMatrixArray(name: string, values: any): void;
			SetMatrixArray(nameID: number, values: any): void;
			SetMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): void;
			SetMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
			GetFloat(name: string): number;
			GetFloat(nameID: number): number;
			GetInt(name: string): number;
			GetInt(nameID: number): number;
			GetColor(name: string): UnityEngine.Color;
			GetColor(nameID: number): UnityEngine.Color;
			GetVector(name: string): UnityEngine.Vector4;
			GetVector(nameID: number): UnityEngine.Vector4;
			GetMatrix(name: string): UnityEngine.Matrix4x4;
			GetMatrix(nameID: number): UnityEngine.Matrix4x4;
			GetTexture(name: string): UnityEngine.Texture;
			GetTexture(nameID: number): UnityEngine.Texture;
			GetFloatArray(name: string): number[];
			GetFloatArray(nameID: number): number[];
			GetFloatArray(name: string, values: any): void;
			GetFloatArray(nameID: number, values: any): void;
			GetColorArray(name: string): UnityEngine.Color[];
			GetColorArray(nameID: number): UnityEngine.Color[];
			GetColorArray(name: string, values: any): void;
			GetColorArray(nameID: number, values: any): void;
			GetVectorArray(name: string): UnityEngine.Vector4[];
			GetVectorArray(nameID: number): UnityEngine.Vector4[];
			GetVectorArray(name: string, values: any): void;
			GetVectorArray(nameID: number, values: any): void;
			GetMatrixArray(name: string): UnityEngine.Matrix4x4[];
			GetMatrixArray(nameID: number): UnityEngine.Matrix4x4[];
			GetMatrixArray(name: string, values: any): void;
			GetMatrixArray(nameID: number, values: any): void;
			SetTextureOffset(name: string, value: UnityEngine.Vector2): void;
			SetTextureOffset(nameID: number, value: UnityEngine.Vector2): void;
			SetTextureScale(name: string, value: UnityEngine.Vector2): void;
			SetTextureScale(nameID: number, value: UnityEngine.Vector2): void;
			GetTextureOffset(name: string): UnityEngine.Vector2;
			GetTextureOffset(nameID: number): UnityEngine.Vector2;
			GetTextureScale(name: string): UnityEngine.Vector2;
			GetTextureScale(nameID: number): UnityEngine.Vector2;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class OcclusionPortal extends UnityEngine.Component {
			get open(): boolean;
			set open(value: boolean);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class OcclusionArea extends UnityEngine.Component {
			get center(): UnityEngine.Vector3;
			set center(value: UnityEngine.Vector3);
			get size(): UnityEngine.Vector3;
			set size(value: UnityEngine.Vector3);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Flare extends UnityEngine.Object {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LensFlare extends UnityEngine.Behaviour {
			get brightness(): number;
			set brightness(value: number);
			get fadeSpeed(): number;
			set fadeSpeed(value: number);
			get color(): UnityEngine.Color;
			set color(value: UnityEngine.Color);
			get flare(): UnityEngine.Flare;
			set flare(value: UnityEngine.Flare);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LightBakingOutput {
			probeOcclusionLightIndex: number;
			occlusionMaskChannel: number;
			lightmapBakeType: UnityEngine.LightmapBakeType;
			mixedLightingMode: UnityEngine.MixedLightingMode;
			isBaked: boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum LightShadowCasterMode { Default = 0, NonLightmappedOnly = 1, Everything = 2, }
		export class Light extends UnityEngine.Behaviour {
			get type(): UnityEngine.LightType;
			set type(value: UnityEngine.LightType);
			get spotAngle(): number;
			set spotAngle(value: number);
			get color(): UnityEngine.Color;
			set color(value: UnityEngine.Color);
			get colorTemperature(): number;
			set colorTemperature(value: number);
			get intensity(): number;
			set intensity(value: number);
			get bounceIntensity(): number;
			set bounceIntensity(value: number);
			get shadowCustomResolution(): number;
			set shadowCustomResolution(value: number);
			get shadowBias(): number;
			set shadowBias(value: number);
			get shadowNormalBias(): number;
			set shadowNormalBias(value: number);
			get shadowNearPlane(): number;
			set shadowNearPlane(value: number);
			get range(): number;
			set range(value: number);
			get flare(): UnityEngine.Flare;
			set flare(value: UnityEngine.Flare);
			get bakingOutput(): UnityEngine.LightBakingOutput;
			set bakingOutput(value: UnityEngine.LightBakingOutput);
			get cullingMask(): number;
			set cullingMask(value: number);
			get lightShadowCasterMode(): UnityEngine.LightShadowCasterMode;
			set lightShadowCasterMode(value: UnityEngine.LightShadowCasterMode);
			get shadowRadius(): number;
			set shadowRadius(value: number);
			get shadowAngle(): number;
			set shadowAngle(value: number);
			get shadows(): UnityEngine.LightShadows;
			set shadows(value: UnityEngine.LightShadows);
			get shadowStrength(): number;
			set shadowStrength(value: number);
			get shadowResolution(): any;
			set shadowResolution(value: any);
			/**[Obsolete][Error]--"Shadow softness is removed in Unity 5.0+" */
			get shadowSoftness(): number;
			/**[Obsolete][Error]--"Shadow softness is removed in Unity 5.0+" */
			set shadowSoftness(value: number);
			/**[Obsolete][Error]--"Shadow softness is removed in Unity 5.0+" */
			get shadowSoftnessFade(): number;
			/**[Obsolete][Error]--"Shadow softness is removed in Unity 5.0+" */
			set shadowSoftnessFade(value: number);
			get layerShadowCullDistances(): number[];
			set layerShadowCullDistances(value: number[]);
			get cookieSize(): number;
			set cookieSize(value: number);
			get cookie(): UnityEngine.Texture;
			set cookie(value: UnityEngine.Texture);
			get renderMode(): UnityEngine.LightRenderMode;
			set renderMode(value: UnityEngine.LightRenderMode);
			/**[Obsolete][Error]--"warning bakedIndex has been removed please use bakingOutput.isBaked instead." */
			get bakedIndex(): number;
			/**[Obsolete][Error]--"warning bakedIndex has been removed please use bakingOutput.isBaked instead." */
			set bakedIndex(value: number);
			get areaSize(): UnityEngine.Vector2;
			set areaSize(value: UnityEngine.Vector2);
			get lightmapBakeType(): UnityEngine.LightmapBakeType;
			set lightmapBakeType(value: UnityEngine.LightmapBakeType);
			get commandBufferCount(): number;
			/**[Obsolete]--"Use QualitySettings.pixelLightCount instead." */
			static get pixelLightCount(): number;
			/**[Obsolete]--"Use QualitySettings.pixelLightCount instead." */
			static set pixelLightCount(value: number);
			/**[Obsolete][Error]--"light.shadowConstantBias was removed, use light.shadowBias" */
			get shadowConstantBias(): number;
			/**[Obsolete][Error]--"light.shadowConstantBias was removed, use light.shadowBias" */
			set shadowConstantBias(value: number);
			/**[Obsolete][Error]--"light.shadowObjectSizeBias was removed, use light.shadowBias" */
			get shadowObjectSizeBias(): number;
			/**[Obsolete][Error]--"light.shadowObjectSizeBias was removed, use light.shadowBias" */
			set shadowObjectSizeBias(value: number);
			/**[Obsolete][Error]--"light.attenuate was removed; all lights always attenuate now" */
			get attenuate(): boolean;
			/**[Obsolete][Error]--"light.attenuate was removed; all lights always attenuate now" */
			set attenuate(value: boolean);
			/**[Obsolete][Error]--"Light.lightmappingMode has been deprecated. Use Light.lightmapBakeType instead (UnityUpgradable) -> lightmapBakeType" */
			get lightmappingMode(): UnityEngine.LightmappingMode;
			/**[Obsolete][Error]--"Light.lightmappingMode has been deprecated. Use Light.lightmapBakeType instead (UnityUpgradable) -> lightmapBakeType" */
			set lightmappingMode(value: UnityEngine.LightmappingMode);
			/**[Obsolete]--"Light.isBaked is no longer supported. Use Light.bakingOutput.isBaked (and other members of Light.bakingOutput) instead." */
			get isBaked(): boolean;
			/**[Obsolete]--"Light.alreadyLightmapped is no longer supported. Use Light.bakingOutput instead. Allowing to describe mixed light on top of realtime and baked ones." */
			get alreadyLightmapped(): boolean;
			/**[Obsolete]--"Light.alreadyLightmapped is no longer supported. Use Light.bakingOutput instead. Allowing to describe mixed light on top of realtime and baked ones." */
			set alreadyLightmapped(value: boolean);
			constructor();
			static GetLights(type: UnityEngine.LightType, layer: number): UnityEngine.Light[];
			Reset(): void;
			SetLightDirty(): void;
			AddCommandBuffer(evt: any, buffer: any): void;
			AddCommandBuffer(evt: any, buffer: any, shadowPassMask: any): void;
			AddCommandBufferAsync(evt: any, buffer: any, queueType: any): void;
			AddCommandBufferAsync(evt: any, buffer: any, shadowPassMask: any, queueType: any): void;
			RemoveCommandBuffer(evt: any, buffer: any): void;
			RemoveCommandBuffers(evt: any): void;
			RemoveAllCommandBuffers(): void;
			GetCommandBuffers(evt: any): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Skybox extends UnityEngine.Behaviour {
			get material(): UnityEngine.Material;
			set material(value: UnityEngine.Material);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MeshFilter extends UnityEngine.Component {
			get sharedMesh(): UnityEngine.Mesh;
			set sharedMesh(value: UnityEngine.Mesh);
			get mesh(): UnityEngine.Mesh;
			set mesh(value: UnityEngine.Mesh);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum RenderingPath { UsePlayerSettings = -1, VertexLit = 0, Forward = 1, DeferredLighting = 2, DeferredShading = 3, }
		export enum TransparencySortMode { Default = 0, Perspective = 1, Orthographic = 2, CustomAxis = 3, }
		export enum StereoTargetEyeMask { None = 0, Left = 1, Right = 2, Both = 3, }
		export enum CameraType { Game = 1, SceneView = 2, Preview = 4, VR = 8, Reflection = 16, }
		export enum ComputeBufferType { Default = 0, Raw = 1, Append = 2, Counter = 4, DrawIndirect = 256, IndirectArguments = 256, GPUMemory = 512, }
		export enum LightType { Spot = 0, Directional = 1, Point = 2, Area = 3, Rectangle = 3, Disc = 4, }
		export enum LightRenderMode { Auto = 0, ForcePixel = 1, ForceVertex = 2, }
		export enum LightShadows { None = 0, Hard = 1, Soft = 2, }
		export enum FogMode { Linear = 1, Exponential = 2, ExponentialSquared = 3, }
		export enum LightmapBakeType { Realtime = 4, Baked = 2, Mixed = 1, }
		export enum MixedLightingMode { IndirectOnly = 0, Shadowmask = 2, Subtractive = 1, }
		export enum QualityLevel { Fastest = 0, Fast = 1, Simple = 2, Good = 3, Beautiful = 4, Fantastic = 5, }
		export enum ShadowProjection { CloseFit = 0, StableFit = 1, }
		export enum ShadowQuality { Disable = 0, HardOnly = 1, All = 2, }
		export enum ShadowResolution { Low = 0, Medium = 1, High = 2, VeryHigh = 3, }
		export enum ShadowmaskMode { Shadowmask = 0, DistanceShadowmask = 1, }
		export enum CameraClearFlags { Skybox = 1, Color = 2, SolidColor = 2, Depth = 3, Nothing = 4, }
		export enum DepthTextureMode { None = 0, Depth = 1, DepthNormals = 2, MotionVectors = 4, }
		export enum TexGenMode { None = 0, SphereMap = 1, Object = 2, EyeLinear = 3, CubeReflect = 4, CubeNormal = 5, }
		export enum AnisotropicFiltering { Disable = 0, Enable = 1, ForceEnable = 2, }
		export enum BlendWeights { OneBone = 1, TwoBones = 2, FourBones = 4, }
		export enum MeshTopology { Triangles = 0, Quads = 2, Lines = 3, LineStrip = 4, Points = 5, }
		export enum SkinQuality { Auto = 0, Bone1 = 1, Bone2 = 2, Bone4 = 4, }
		export enum ColorSpace { Uninitialized = -1, Gamma = 0, Linear = 1, }
		export enum ColorGamut { sRGB = 0, Rec709 = 1, Rec2020 = 2, DisplayP3 = 3, HDR10 = 4, DolbyHDR = 5, }
		export enum ScreenOrientation { Unknown = 0, Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, AutoRotation = 5, Landscape = 3, }
		export enum FilterMode { Point = 0, Bilinear = 1, Trilinear = 2, }
		export enum TextureWrapMode { Repeat = 0, Clamp = 1, Mirror = 2, MirrorOnce = 3, }
		export enum NPOTSupport { None = 0, Restricted = 1, Full = 2, }
		export enum TextureFormat { Alpha8 = 1, ARGB4444 = 2, RGB24 = 3, RGBA32 = 4, ARGB32 = 5, RGB565 = 7, R16 = 9, DXT1 = 10, DXT5 = 12, RGBA4444 = 13, BGRA32 = 14, RHalf = 15, RGHalf = 16, RGBAHalf = 17, RFloat = 18, RGFloat = 19, RGBAFloat = 20, YUY2 = 21, RGB9e5Float = 22, BC4 = 26, BC5 = 27, BC6H = 24, BC7 = 25, DXT1Crunched = 28, DXT5Crunched = 29, PVRTC_RGB2 = 30, PVRTC_RGBA2 = 31, PVRTC_RGB4 = 32, PVRTC_RGBA4 = 33, ETC_RGB4 = 34, ATC_RGB4 = -127, ATC_RGBA8 = -127, EAC_R = 41, EAC_R_SIGNED = 42, EAC_RG = 43, EAC_RG_SIGNED = 44, ETC2_RGB = 45, ETC2_RGBA1 = 46, ETC2_RGBA8 = 47, ASTC_RGB_4x4 = 48, ASTC_RGB_5x5 = 49, ASTC_RGB_6x6 = 50, ASTC_RGB_8x8 = 51, ASTC_RGB_10x10 = 52, ASTC_RGB_12x12 = 53, ASTC_RGBA_4x4 = 54, ASTC_RGBA_5x5 = 55, ASTC_RGBA_6x6 = 56, ASTC_RGBA_8x8 = 57, ASTC_RGBA_10x10 = 58, ASTC_RGBA_12x12 = 59, ETC_RGB4_3DS = 60, ETC_RGBA8_3DS = 61, RG16 = 62, R8 = 63, ETC_RGB4Crunched = 64, ETC2_RGBA8Crunched = 65, PVRTC_2BPP_RGB = -127, PVRTC_2BPP_RGBA = -127, PVRTC_4BPP_RGB = -127, PVRTC_4BPP_RGBA = -127, }
		export enum CubemapFace { Unknown = -1, PositiveX = 0, NegativeX = 1, PositiveY = 2, NegativeY = 3, PositiveZ = 4, NegativeZ = 5, }
		export enum RenderTextureFormat { ARGB32 = 0, Depth = 1, ARGBHalf = 2, Shadowmap = 3, RGB565 = 4, ARGB4444 = 5, ARGB1555 = 6, Default = 7, ARGB2101010 = 8, DefaultHDR = 9, ARGB64 = 10, ARGBFloat = 11, RGFloat = 12, RGHalf = 13, RFloat = 14, RHalf = 15, R8 = 16, ARGBInt = 17, RGInt = 18, RInt = 19, BGRA32 = 20, RGB111110Float = 22, RG32 = 23, RGBAUShort = 24, RG16 = 25, BGRA10101010_XR = 26, BGR101010_XR = 27, R16 = 28, }
		export enum VRTextureUsage { None = 0, OneEye = 1, TwoEyes = 2, }
		export enum RenderTextureCreationFlags { MipMap = 1, AutoGenerateMips = 2, SRGB = 4, EyeTexture = 8, EnableRandomWrite = 16, CreatedFromScript = 32, AllowVerticalFlip = 128, NoResolvedColorSurface = 256, DynamicallyScalable = 1024, BindMS = 2048, }
		export enum RenderTextureReadWrite { Default = 0, Linear = 1, sRGB = 2, }
		export enum RenderTextureMemoryless { None = 0, Color = 1, Depth = 2, MSAA = 4, }
		export enum LightmapsMode { NonDirectional = 0, CombinedDirectional = 1, SeparateDirectional = 2, Single = 0, Dual = 1, Directional = 2, }
		export enum MaterialGlobalIlluminationFlags { None = 0, RealtimeEmissive = 1, BakedEmissive = 2, EmissiveIsBlack = 4, AnyEmissive = 3, }
		export class LightProbeProxyVolume extends UnityEngine.Behaviour {
			static get isFeatureSupported(): boolean;
			get boundsGlobal(): UnityEngine.Bounds;
			get sizeCustom(): UnityEngine.Vector3;
			set sizeCustom(value: UnityEngine.Vector3);
			get originCustom(): UnityEngine.Vector3;
			set originCustom(value: UnityEngine.Vector3);
			get probeDensity(): number;
			set probeDensity(value: number);
			get gridResolutionX(): number;
			set gridResolutionX(value: number);
			get gridResolutionY(): number;
			set gridResolutionY(value: number);
			get gridResolutionZ(): number;
			set gridResolutionZ(value: number);
			get boundingBoxMode(): UnityEngine.LightProbeProxyVolume.BoundingBoxMode;
			set boundingBoxMode(value: UnityEngine.LightProbeProxyVolume.BoundingBoxMode);
			get resolutionMode(): UnityEngine.LightProbeProxyVolume.ResolutionMode;
			set resolutionMode(value: UnityEngine.LightProbeProxyVolume.ResolutionMode);
			get probePositionMode(): UnityEngine.LightProbeProxyVolume.ProbePositionMode;
			set probePositionMode(value: UnityEngine.LightProbeProxyVolume.ProbePositionMode);
			get refreshMode(): UnityEngine.LightProbeProxyVolume.RefreshMode;
			set refreshMode(value: UnityEngine.LightProbeProxyVolume.RefreshMode);
			get qualityMode(): UnityEngine.LightProbeProxyVolume.QualityMode;
			set qualityMode(value: UnityEngine.LightProbeProxyVolume.QualityMode);
			constructor();
			Update(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum CustomRenderTextureInitializationSource { TextureAndColor = 0, Material = 1, }
		export enum CustomRenderTextureUpdateMode { OnLoad = 0, Realtime = 1, OnDemand = 2, }
		export enum CustomRenderTextureUpdateZoneSpace { Normalized = 0, Pixel = 1, }
		export enum MotionVectorGenerationMode { Camera = 0, Object = 1, ForceNoMotion = 2, }
		export enum LineTextureMode { Stretch = 0, Tile = 1, DistributePerSegment = 2, RepeatPerSegment = 3, }
		export enum LineAlignment { View = 0, Local = 1, TransformZ = 1, }
		export class SkinnedMeshRenderer extends UnityEngine.Renderer {
			get quality(): UnityEngine.SkinQuality;
			set quality(value: UnityEngine.SkinQuality);
			get updateWhenOffscreen(): boolean;
			set updateWhenOffscreen(value: boolean);
			get forceMatrixRecalculationPerRender(): boolean;
			set forceMatrixRecalculationPerRender(value: boolean);
			get rootBone(): UnityEngine.Transform;
			set rootBone(value: UnityEngine.Transform);
			get bones(): UnityEngine.Transform[];
			set bones(value: UnityEngine.Transform[]);
			get sharedMesh(): UnityEngine.Mesh;
			set sharedMesh(value: UnityEngine.Mesh);
			get skinnedMotionVectors(): boolean;
			set skinnedMotionVectors(value: boolean);
			get localBounds(): UnityEngine.Bounds;
			set localBounds(value: UnityEngine.Bounds);
			constructor();
			GetBlendShapeWeight(index: number): number;
			SetBlendShapeWeight(index: number, value: number): void;
			BakeMesh(mesh: UnityEngine.Mesh): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MeshRenderer extends UnityEngine.Renderer {
			get additionalVertexStreams(): UnityEngine.Mesh;
			set additionalVertexStreams(value: UnityEngine.Mesh);
			get subMeshStartIndex(): number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RectOffset extends System.Object {
			get left(): number;
			set left(value: number);
			get right(): number;
			set right(value: number);
			get top(): number;
			set top(value: number);
			get bottom(): number;
			set bottom(value: number);
			get horizontal(): number;
			get vertical(): number;
			constructor();
			constructor(left: number, right: number, top: number, bottom: number);
			Add(rect: UnityEngine.Rect): UnityEngine.Rect;
			Remove(rect: UnityEngine.Rect): UnityEngine.Rect;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GUIElement extends UnityEngine.Behaviour {
			constructor();
			HitTest(screenPosition: UnityEngine.Vector3): boolean;
			HitTest(screenPosition: UnityEngine.Vector3, camera: UnityEngine.Camera): boolean;
			GetScreenRect(camera: UnityEngine.Camera): UnityEngine.Rect;
			GetScreenRect(): UnityEngine.Rect;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GUITexture extends UnityEngine.GUIElement {
			get color(): UnityEngine.Color;
			set color(value: UnityEngine.Color);
			get texture(): UnityEngine.Texture;
			set texture(value: UnityEngine.Texture);
			get pixelInset(): UnityEngine.Rect;
			set pixelInset(value: UnityEngine.Rect);
			get border(): UnityEngine.RectOffset;
			set border(value: UnityEngine.RectOffset);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GUILayer extends UnityEngine.Behaviour {
			constructor();
			HitTest(screenPosition: UnityEngine.Vector3): UnityEngine.GUIElement;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum FullScreenMovieControlMode { Full = 0, Minimal = 1, CancelOnInput = 2, Hidden = 3, }
		export enum FullScreenMovieScalingMode { None = 0, AspectFit = 1, AspectFill = 2, Fill = 3, }
		export enum AndroidActivityIndicatorStyle { DontShow = -1, Large = 0, InversedLarge = 1, Small = 2, InversedSmall = 3, }
		export class Handheld extends System.Object {
			/**[Obsolete]--"Property Handheld.use32BitDisplayBuffer has been deprecated. Modifying it has no effect, use PlayerSettings instead." */
			static get use32BitDisplayBuffer(): boolean;
			/**[Obsolete]--"Property Handheld.use32BitDisplayBuffer has been deprecated. Modifying it has no effect, use PlayerSettings instead." */
			static set use32BitDisplayBuffer(value: boolean);
			constructor();
			static PlayFullScreenMovie(path: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.FullScreenMovieControlMode, scalingMode: UnityEngine.FullScreenMovieScalingMode): boolean;
			static PlayFullScreenMovie(path: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.FullScreenMovieControlMode): boolean;
			static PlayFullScreenMovie(path: string, bgColor: UnityEngine.Color): boolean;
			static PlayFullScreenMovie(path: string): boolean;
			static Vibrate(): void;
			static SetActivityIndicatorStyle(style: any): void;
			static SetActivityIndicatorStyle(style: UnityEngine.AndroidActivityIndicatorStyle): void;
			static GetActivityIndicatorStyle(): number;
			static StartActivityIndicator(): void;
			static StopActivityIndicator(): void;
			static ClearShaderCache(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TouchScreenKeyboard extends System.Object {
			static get isSupported(): boolean;
			get text(): string;
			set text(value: string);
			static get hideInput(): boolean;
			static set hideInput(value: boolean);
			get active(): boolean;
			set active(value: boolean);
			/**[Obsolete]--"Property done is deprecated, use status instead" */
			get done(): boolean;
			/**[Obsolete]--"Property wasCanceled is deprecated, use status instead." */
			get wasCanceled(): boolean;
			get status(): UnityEngine.TouchScreenKeyboard.Status;
			get characterLimit(): number;
			set characterLimit(value: number);
			get canGetSelection(): boolean;
			get canSetSelection(): boolean;
			get selection(): UnityEngine.RangeInt;
			set selection(value: UnityEngine.RangeInt);
			get type(): UnityEngine.TouchScreenKeyboardType;
			get targetDisplay(): number;
			set targetDisplay(value: number);
			static get area(): UnityEngine.Rect;
			static get visible(): boolean;
			constructor(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean, textPlaceholder: string, characterLimit: number);
			static Open(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean, textPlaceholder: string, characterLimit: number): UnityEngine.TouchScreenKeyboard;
			static Open(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean, textPlaceholder: string): UnityEngine.TouchScreenKeyboard;
			static Open(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean, alert: boolean): UnityEngine.TouchScreenKeyboard;
			static Open(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean, secure: boolean): UnityEngine.TouchScreenKeyboard;
			static Open(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean, multiline: boolean): UnityEngine.TouchScreenKeyboard;
			static Open(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType, autocorrection: boolean): UnityEngine.TouchScreenKeyboard;
			static Open(text: string, keyboardType: UnityEngine.TouchScreenKeyboardType): UnityEngine.TouchScreenKeyboard;
			static Open(text: string): UnityEngine.TouchScreenKeyboard;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Hash128 {
			get isValid(): boolean;
			constructor(u32_0: number, u32_1: number, u32_2: number, u32_3: number);
			constructor(u64_0: number, u64_1: number);
			static Parse(hashString: string): UnityEngine.Hash128;
			static Compute(hashString: string): UnityEngine.Hash128;
			static op_Equality(hash1: UnityEngine.Hash128, hash2: UnityEngine.Hash128): boolean;
			static op_Inequality(hash1: UnityEngine.Hash128, hash2: UnityEngine.Hash128): boolean;
			static op_LessThan(x: UnityEngine.Hash128, y: UnityEngine.Hash128): boolean;
			static op_GreaterThan(x: UnityEngine.Hash128, y: UnityEngine.Hash128): boolean;
			CompareTo(rhs: UnityEngine.Hash128): number;
			CompareTo(obj: any): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(obj: UnityEngine.Hash128): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HashUtilities extends System.Object {
			static AppendHash(inHash: any, outHash: any): void;
			static QuantisedMatrixHash(value: any, hash: any): void;
			static QuantisedVectorHash(value: any, hash: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HashUnsafeUtilities extends System.Object {
			static ComputeHash128(data: any, dataSize: number, hash1: any, hash2: any): void;
			static ComputeHash128(data: any, dataSize: number, hash: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface IExposedPropertyTable {
			SetReferenceValue(id: UnityEngine.PropertyName, value: any): void;
			GetReferenceValue(id: UnityEngine.PropertyName, idValid: any): any;
			ClearReferenceValue(id: UnityEngine.PropertyName): void;
		}
		export enum TouchPhase { Began = 0, Moved = 1, Stationary = 2, Ended = 3, Canceled = 4, }
		export enum IMECompositionMode { Auto = 0, On = 1, Off = 2, }
		export enum TouchType { Direct = 0, Indirect = 1, Stylus = 2, }
		export class Touch {
			get fingerId(): number;
			set fingerId(value: number);
			get position(): UnityEngine.Vector2;
			set position(value: UnityEngine.Vector2);
			get rawPosition(): UnityEngine.Vector2;
			set rawPosition(value: UnityEngine.Vector2);
			get deltaPosition(): UnityEngine.Vector2;
			set deltaPosition(value: UnityEngine.Vector2);
			get deltaTime(): number;
			set deltaTime(value: number);
			get tapCount(): number;
			set tapCount(value: number);
			get phase(): UnityEngine.TouchPhase;
			set phase(value: UnityEngine.TouchPhase);
			get pressure(): number;
			set pressure(value: number);
			get maximumPossiblePressure(): number;
			set maximumPossiblePressure(value: number);
			get type(): UnityEngine.TouchType;
			set type(value: UnityEngine.TouchType);
			get altitudeAngle(): number;
			set altitudeAngle(value: number);
			get azimuthAngle(): number;
			set azimuthAngle(value: number);
			get radius(): number;
			set radius(value: number);
			get radiusVariance(): number;
			set radiusVariance(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum DeviceOrientation { Unknown = 0, Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, FaceUp = 5, FaceDown = 6, }
		export class AccelerationEvent {
			get acceleration(): UnityEngine.Vector3;
			get deltaTime(): number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Gyroscope extends System.Object {
			get rotationRate(): UnityEngine.Vector3;
			get rotationRateUnbiased(): UnityEngine.Vector3;
			get gravity(): UnityEngine.Vector3;
			get userAcceleration(): UnityEngine.Vector3;
			get attitude(): UnityEngine.Quaternion;
			get enabled(): boolean;
			set enabled(value: boolean);
			get updateInterval(): number;
			set updateInterval(value: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LocationInfo {
			get latitude(): number;
			get longitude(): number;
			get altitude(): number;
			get horizontalAccuracy(): number;
			get verticalAccuracy(): number;
			get timestamp(): number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum LocationServiceStatus { Stopped = 0, Initializing = 1, Running = 2, Failed = 3, }
		export class LocationService extends System.Object {
			get isEnabledByUser(): boolean;
			get status(): UnityEngine.LocationServiceStatus;
			get lastData(): UnityEngine.LocationInfo;
			constructor();
			Start(desiredAccuracyInMeters: number, updateDistanceInMeters: number): void;
			Start(desiredAccuracyInMeters: number): void;
			Start(): void;
			Stop(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Compass extends System.Object {
			get magneticHeading(): number;
			get trueHeading(): number;
			get headingAccuracy(): number;
			get rawVector(): UnityEngine.Vector3;
			get timestamp(): number;
			get enabled(): boolean;
			set enabled(value: boolean);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Input extends System.Object {
			static get simulateMouseWithTouches(): boolean;
			static set simulateMouseWithTouches(value: boolean);
			static get anyKey(): boolean;
			static get anyKeyDown(): boolean;
			static get inputString(): string;
			static get mousePosition(): UnityEngine.Vector3;
			static get mouseScrollDelta(): UnityEngine.Vector2;
			static get imeCompositionMode(): UnityEngine.IMECompositionMode;
			static set imeCompositionMode(value: UnityEngine.IMECompositionMode);
			static get compositionString(): string;
			static get imeIsSelected(): boolean;
			static get compositionCursorPos(): UnityEngine.Vector2;
			static set compositionCursorPos(value: UnityEngine.Vector2);
			/**[Obsolete]--"eatKeyPressOnTextFieldFocus property is deprecated, and only provided to support legacy behavior." */
			static get eatKeyPressOnTextFieldFocus(): boolean;
			/**[Obsolete]--"eatKeyPressOnTextFieldFocus property is deprecated, and only provided to support legacy behavior." */
			static set eatKeyPressOnTextFieldFocus(value: boolean);
			static get mousePresent(): boolean;
			static get touchCount(): number;
			static get touchPressureSupported(): boolean;
			static get stylusTouchSupported(): boolean;
			static get touchSupported(): boolean;
			static get multiTouchEnabled(): boolean;
			static set multiTouchEnabled(value: boolean);
			/**[Obsolete]--"isGyroAvailable property is deprecated. Please use SystemInfo.supportsGyroscope instead." */
			static get isGyroAvailable(): boolean;
			static get deviceOrientation(): UnityEngine.DeviceOrientation;
			static get acceleration(): UnityEngine.Vector3;
			static get compensateSensors(): boolean;
			static set compensateSensors(value: boolean);
			static get accelerationEventCount(): number;
			static get backButtonLeavesApp(): boolean;
			static set backButtonLeavesApp(value: boolean);
			static get location(): UnityEngine.LocationService;
			static get compass(): UnityEngine.Compass;
			static get gyro(): UnityEngine.Gyroscope;
			static get touches(): UnityEngine.Touch[];
			static get accelerationEvents(): UnityEngine.AccelerationEvent[];
			constructor();
			static GetAxis(axisName: string): number;
			static GetAxisRaw(axisName: string): number;
			static GetButton(buttonName: string): boolean;
			static GetButtonDown(buttonName: string): boolean;
			static GetButtonUp(buttonName: string): boolean;
			static GetMouseButton(button: number): boolean;
			static GetMouseButtonDown(button: number): boolean;
			static GetMouseButtonUp(button: number): boolean;
			static ResetInputAxes(): void;
			static IsJoystickPreconfigured(joystickName: string): boolean;
			static GetJoystickNames(): string[];
			static GetTouch(index: number): UnityEngine.Touch;
			static GetAccelerationEvent(index: number): UnityEngine.AccelerationEvent;
			static GetKey(key: UnityEngine.KeyCode): boolean;
			static GetKey(name: string): boolean;
			static GetKeyUp(key: UnityEngine.KeyCode): boolean;
			static GetKeyUp(name: string): boolean;
			static GetKeyDown(key: UnityEngine.KeyCode): boolean;
			static GetKeyDown(name: string): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum KeyCode { None = 0, Backspace = 8, Delete = 127, Tab = 9, Clear = 12, Return = 13, Pause = 19, Escape = 27, Space = 32, Keypad0 = 256, Keypad1 = 257, Keypad2 = 258, Keypad3 = 259, Keypad4 = 260, Keypad5 = 261, Keypad6 = 262, Keypad7 = 263, Keypad8 = 264, Keypad9 = 265, KeypadPeriod = 266, KeypadDivide = 267, KeypadMultiply = 268, KeypadMinus = 269, KeypadPlus = 270, KeypadEnter = 271, KeypadEquals = 272, UpArrow = 273, DownArrow = 274, RightArrow = 275, LeftArrow = 276, Insert = 277, Home = 278, End = 279, PageUp = 280, PageDown = 281, F1 = 282, F2 = 283, F3 = 284, F4 = 285, F5 = 286, F6 = 287, F7 = 288, F8 = 289, F9 = 290, F10 = 291, F11 = 292, F12 = 293, F13 = 294, F14 = 295, F15 = 296, Alpha0 = 48, Alpha1 = 49, Alpha2 = 50, Alpha3 = 51, Alpha4 = 52, Alpha5 = 53, Alpha6 = 54, Alpha7 = 55, Alpha8 = 56, Alpha9 = 57, Exclaim = 33, DoubleQuote = 34, Hash = 35, Dollar = 36, Percent = 37, Ampersand = 38, Quote = 39, LeftParen = 40, RightParen = 41, Asterisk = 42, Plus = 43, Comma = 44, Minus = 45, Period = 46, Slash = 47, Colon = 58, Semicolon = 59, Less = 60, Equals = 61, Greater = 62, Question = 63, At = 64, LeftBracket = 91, Backslash = 92, RightBracket = 93, Caret = 94, Underscore = 95, BackQuote = 96, A = 97, B = 98, C = 99, D = 100, E = 101, F = 102, G = 103, H = 104, I = 105, J = 106, K = 107, L = 108, M = 109, N = 110, O = 111, P = 112, Q = 113, R = 114, S = 115, T = 116, U = 117, V = 118, W = 119, X = 120, Y = 121, Z = 122, LeftCurlyBracket = 123, Pipe = 124, RightCurlyBracket = 125, Tilde = 126, Numlock = 300, CapsLock = 301, ScrollLock = 302, RightShift = 303, LeftShift = 304, RightControl = 305, LeftControl = 306, RightAlt = 307, LeftAlt = 308, LeftCommand = 310, LeftApple = 310, LeftWindows = 311, RightCommand = 309, RightApple = 309, RightWindows = 312, AltGr = 313, Help = 315, Print = 316, SysReq = 317, Break = 318, Menu = 319, Mouse0 = 323, Mouse1 = 324, Mouse2 = 325, Mouse3 = 326, Mouse4 = 327, Mouse5 = 328, Mouse6 = 329, JoystickButton0 = 330, JoystickButton1 = 331, JoystickButton2 = 332, JoystickButton3 = 333, JoystickButton4 = 334, JoystickButton5 = 335, JoystickButton6 = 336, JoystickButton7 = 337, JoystickButton8 = 338, JoystickButton9 = 339, JoystickButton10 = 340, JoystickButton11 = 341, JoystickButton12 = 342, JoystickButton13 = 343, JoystickButton14 = 344, JoystickButton15 = 345, JoystickButton16 = 346, JoystickButton17 = 347, JoystickButton18 = 348, JoystickButton19 = 349, Joystick1Button0 = 350, Joystick1Button1 = 351, Joystick1Button2 = 352, Joystick1Button3 = 353, Joystick1Button4 = 354, Joystick1Button5 = 355, Joystick1Button6 = 356, Joystick1Button7 = 357, Joystick1Button8 = 358, Joystick1Button9 = 359, Joystick1Button10 = 360, Joystick1Button11 = 361, Joystick1Button12 = 362, Joystick1Button13 = 363, Joystick1Button14 = 364, Joystick1Button15 = 365, Joystick1Button16 = 366, Joystick1Button17 = 367, Joystick1Button18 = 368, Joystick1Button19 = 369, Joystick2Button0 = 370, Joystick2Button1 = 371, Joystick2Button2 = 372, Joystick2Button3 = 373, Joystick2Button4 = 374, Joystick2Button5 = 375, Joystick2Button6 = 376, Joystick2Button7 = 377, Joystick2Button8 = 378, Joystick2Button9 = 379, Joystick2Button10 = 380, Joystick2Button11 = 381, Joystick2Button12 = 382, Joystick2Button13 = 383, Joystick2Button14 = 384, Joystick2Button15 = 385, Joystick2Button16 = 386, Joystick2Button17 = 387, Joystick2Button18 = 388, Joystick2Button19 = 389, Joystick3Button0 = 390, Joystick3Button1 = 391, Joystick3Button2 = 392, Joystick3Button3 = 393, Joystick3Button4 = 394, Joystick3Button5 = 395, Joystick3Button6 = 396, Joystick3Button7 = 397, Joystick3Button8 = 398, Joystick3Button9 = 399, Joystick3Button10 = 400, Joystick3Button11 = 401, Joystick3Button12 = 402, Joystick3Button13 = 403, Joystick3Button14 = 404, Joystick3Button15 = 405, Joystick3Button16 = 406, Joystick3Button17 = 407, Joystick3Button18 = 408, Joystick3Button19 = 409, Joystick4Button0 = 410, Joystick4Button1 = 411, Joystick4Button2 = 412, Joystick4Button3 = 413, Joystick4Button4 = 414, Joystick4Button5 = 415, Joystick4Button6 = 416, Joystick4Button7 = 417, Joystick4Button8 = 418, Joystick4Button9 = 419, Joystick4Button10 = 420, Joystick4Button11 = 421, Joystick4Button12 = 422, Joystick4Button13 = 423, Joystick4Button14 = 424, Joystick4Button15 = 425, Joystick4Button16 = 426, Joystick4Button17 = 427, Joystick4Button18 = 428, Joystick4Button19 = 429, Joystick5Button0 = 430, Joystick5Button1 = 431, Joystick5Button2 = 432, Joystick5Button3 = 433, Joystick5Button4 = 434, Joystick5Button5 = 435, Joystick5Button6 = 436, Joystick5Button7 = 437, Joystick5Button8 = 438, Joystick5Button9 = 439, Joystick5Button10 = 440, Joystick5Button11 = 441, Joystick5Button12 = 442, Joystick5Button13 = 443, Joystick5Button14 = 444, Joystick5Button15 = 445, Joystick5Button16 = 446, Joystick5Button17 = 447, Joystick5Button18 = 448, Joystick5Button19 = 449, Joystick6Button0 = 450, Joystick6Button1 = 451, Joystick6Button2 = 452, Joystick6Button3 = 453, Joystick6Button4 = 454, Joystick6Button5 = 455, Joystick6Button6 = 456, Joystick6Button7 = 457, Joystick6Button8 = 458, Joystick6Button9 = 459, Joystick6Button10 = 460, Joystick6Button11 = 461, Joystick6Button12 = 462, Joystick6Button13 = 463, Joystick6Button14 = 464, Joystick6Button15 = 465, Joystick6Button16 = 466, Joystick6Button17 = 467, Joystick6Button18 = 468, Joystick6Button19 = 469, Joystick7Button0 = 470, Joystick7Button1 = 471, Joystick7Button2 = 472, Joystick7Button3 = 473, Joystick7Button4 = 474, Joystick7Button5 = 475, Joystick7Button6 = 476, Joystick7Button7 = 477, Joystick7Button8 = 478, Joystick7Button9 = 479, Joystick7Button10 = 480, Joystick7Button11 = 481, Joystick7Button12 = 482, Joystick7Button13 = 483, Joystick7Button14 = 484, Joystick7Button15 = 485, Joystick7Button16 = 486, Joystick7Button17 = 487, Joystick7Button18 = 488, Joystick7Button19 = 489, Joystick8Button0 = 490, Joystick8Button1 = 491, Joystick8Button2 = 492, Joystick8Button3 = 493, Joystick8Button4 = 494, Joystick8Button5 = 495, Joystick8Button6 = 496, Joystick8Button7 = 497, Joystick8Button8 = 498, Joystick8Button9 = 499, Joystick8Button10 = 500, Joystick8Button11 = 501, Joystick8Button12 = 502, Joystick8Button13 = 503, Joystick8Button14 = 504, Joystick8Button15 = 505, Joystick8Button16 = 506, Joystick8Button17 = 507, Joystick8Button18 = 508, Joystick8Button19 = 509, }
		export class LayerMask {
			get value(): number;
			set value(value: number);
			static op_Implicit(mask: UnityEngine.LayerMask): number;
			static op_Implicit(intVal: number): UnityEngine.LayerMask;
			static LayerToName(layer: number): string;
			static NameToLayer(layerName: string): number;
			static GetMask(layerNames: string[]): number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum LightmappingMode { Realtime = 4, Baked = 2, Mixed = 1, }
		export class LightProbeGroup extends UnityEngine.Behaviour {
			get probePositions(): UnityEngine.Vector3[];
			set probePositions(value: UnityEngine.Vector3[]);
			get dering(): boolean;
			set dering(value: boolean);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LineUtility extends System.Object {
			constructor();
			static Simplify(points: any, tolerance: number, pointsToKeep: any): void;
			static Simplify(points: any, tolerance: number, simplifiedPoints: any): void;
			static Simplify(points: any, tolerance: number, pointsToKeep: any): void;
			static Simplify(points: any, tolerance: number, simplifiedPoints: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum LODFadeMode { None = 0, CrossFade = 1, SpeedTree = 2, }
		export class LOD {
			screenRelativeTransitionHeight: number;
			fadeTransitionWidth: number;
			renderers: UnityEngine.Renderer[];
			constructor(screenRelativeTransitionHeight: number, renderers: UnityEngine.Renderer[]);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LODGroup extends UnityEngine.Component {
			get localReferencePoint(): UnityEngine.Vector3;
			set localReferencePoint(value: UnityEngine.Vector3);
			get size(): number;
			set size(value: number);
			get lodCount(): number;
			get fadeMode(): UnityEngine.LODFadeMode;
			set fadeMode(value: UnityEngine.LODFadeMode);
			get animateCrossFading(): boolean;
			set animateCrossFading(value: boolean);
			get enabled(): boolean;
			set enabled(value: boolean);
			static get crossFadeAnimationDuration(): number;
			static set crossFadeAnimationDuration(value: number);
			constructor();
			RecalculateBounds(): void;
			GetLODs(): UnityEngine.LOD[];
			/**[Obsolete]--"Use SetLODs instead." */
			SetLODS(lods: UnityEngine.LOD[]): void;
			SetLODs(lods: UnityEngine.LOD[]): void;
			ForceLOD(index: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FrustumPlanes {
			left: number;
			right: number;
			bottom: number;
			top: number;
			zNear: number;
			zFar: number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Matrix4x4 {
			m00: number;
			m10: number;
			m20: number;
			m30: number;
			m01: number;
			m11: number;
			m21: number;
			m31: number;
			m02: number;
			m12: number;
			m22: number;
			m32: number;
			m03: number;
			m13: number;
			m23: number;
			m33: number;
			get rotation(): UnityEngine.Quaternion;
			get lossyScale(): UnityEngine.Vector3;
			get isIdentity(): boolean;
			get determinant(): number;
			get decomposeProjection(): UnityEngine.FrustumPlanes;
			get inverse(): UnityEngine.Matrix4x4;
			get transpose(): UnityEngine.Matrix4x4;
			static get zero(): UnityEngine.Matrix4x4;
			static get identity(): UnityEngine.Matrix4x4;
			constructor(column0: UnityEngine.Vector4, column1: UnityEngine.Vector4, column2: UnityEngine.Vector4, column3: UnityEngine.Vector4);
			static Determinant(m: UnityEngine.Matrix4x4): number;
			static TRS(pos: UnityEngine.Vector3, q: UnityEngine.Quaternion, s: UnityEngine.Vector3): UnityEngine.Matrix4x4;
			static Inverse(m: UnityEngine.Matrix4x4): UnityEngine.Matrix4x4;
			static Transpose(m: UnityEngine.Matrix4x4): UnityEngine.Matrix4x4;
			static Ortho(left: number, right: number, bottom: number, top: number, zNear: number, zFar: number): UnityEngine.Matrix4x4;
			static Perspective(fov: number, aspect: number, zNear: number, zFar: number): UnityEngine.Matrix4x4;
			static LookAt(from: UnityEngine.Vector3, to: UnityEngine.Vector3, up: UnityEngine.Vector3): UnityEngine.Matrix4x4;
			static Frustum(left: number, right: number, bottom: number, top: number, zNear: number, zFar: number): UnityEngine.Matrix4x4;
			static Frustum(fp: UnityEngine.FrustumPlanes): UnityEngine.Matrix4x4;
			static op_Multiply(lhs: UnityEngine.Matrix4x4, rhs: UnityEngine.Matrix4x4): UnityEngine.Matrix4x4;
			static op_Multiply(lhs: UnityEngine.Matrix4x4, vector: UnityEngine.Vector4): UnityEngine.Vector4;
			static op_Equality(lhs: UnityEngine.Matrix4x4, rhs: UnityEngine.Matrix4x4): boolean;
			static op_Inequality(lhs: UnityEngine.Matrix4x4, rhs: UnityEngine.Matrix4x4): boolean;
			static Scale(vector: UnityEngine.Vector3): UnityEngine.Matrix4x4;
			static Translate(vector: UnityEngine.Vector3): UnityEngine.Matrix4x4;
			static Rotate(q: UnityEngine.Quaternion): UnityEngine.Matrix4x4;
			ValidTRS(): boolean;
			SetTRS(pos: UnityEngine.Vector3, q: UnityEngine.Quaternion, s: UnityEngine.Vector3): void;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.Matrix4x4): boolean;
			GetColumn(index: number): UnityEngine.Vector4;
			GetRow(index: number): UnityEngine.Vector4;
			SetColumn(index: number, column: UnityEngine.Vector4): void;
			SetRow(index: number, row: UnityEngine.Vector4): void;
			MultiplyPoint(point: UnityEngine.Vector3): UnityEngine.Vector3;
			MultiplyPoint3x4(point: UnityEngine.Vector3): UnityEngine.Vector3;
			MultiplyVector(vector: UnityEngine.Vector3): UnityEngine.Vector3;
			TransformPlane(plane: UnityEngine.Plane): UnityEngine.Plane;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Vector3 {
			static kEpsilon: number;
			static kEpsilonNormalSqrt: number;
			x: number;
			y: number;
			z: number;
			get normalized(): UnityEngine.Vector3;
			get magnitude(): number;
			get sqrMagnitude(): number;
			static get zero(): UnityEngine.Vector3;
			static get one(): UnityEngine.Vector3;
			static get forward(): UnityEngine.Vector3;
			static get back(): UnityEngine.Vector3;
			static get up(): UnityEngine.Vector3;
			static get down(): UnityEngine.Vector3;
			static get left(): UnityEngine.Vector3;
			static get right(): UnityEngine.Vector3;
			static get positiveInfinity(): UnityEngine.Vector3;
			static get negativeInfinity(): UnityEngine.Vector3;
			/**[Obsolete]--"Use Vector3.forward instead." */
			static get fwd(): UnityEngine.Vector3;
			constructor(x: number, y: number, z: number);
			constructor(x: number, y: number);
			static Slerp(a: UnityEngine.Vector3, b: UnityEngine.Vector3, t: number): UnityEngine.Vector3;
			static SlerpUnclamped(a: UnityEngine.Vector3, b: UnityEngine.Vector3, t: number): UnityEngine.Vector3;
			static OrthoNormalize(normal: any, tangent: any): void;
			static OrthoNormalize(normal: any, tangent: any, binormal: any): void;
			static RotateTowards(current: UnityEngine.Vector3, target: UnityEngine.Vector3, maxRadiansDelta: number, maxMagnitudeDelta: number): UnityEngine.Vector3;
			static Lerp(a: UnityEngine.Vector3, b: UnityEngine.Vector3, t: number): UnityEngine.Vector3;
			static LerpUnclamped(a: UnityEngine.Vector3, b: UnityEngine.Vector3, t: number): UnityEngine.Vector3;
			static MoveTowards(current: UnityEngine.Vector3, target: UnityEngine.Vector3, maxDistanceDelta: number): UnityEngine.Vector3;
			static SmoothDamp(current: UnityEngine.Vector3, target: UnityEngine.Vector3, currentVelocity: any, smoothTime: number, maxSpeed: number): UnityEngine.Vector3;
			static SmoothDamp(current: UnityEngine.Vector3, target: UnityEngine.Vector3, currentVelocity: any, smoothTime: number): UnityEngine.Vector3;
			static SmoothDamp(current: UnityEngine.Vector3, target: UnityEngine.Vector3, currentVelocity: any, smoothTime: number, maxSpeed: number, deltaTime: number): UnityEngine.Vector3;
			static Scale(a: UnityEngine.Vector3, b: UnityEngine.Vector3): UnityEngine.Vector3;
			Scale(scale: UnityEngine.Vector3): void;
			static Cross(lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3): UnityEngine.Vector3;
			static Reflect(inDirection: UnityEngine.Vector3, inNormal: UnityEngine.Vector3): UnityEngine.Vector3;
			static Normalize(value: UnityEngine.Vector3): UnityEngine.Vector3;
			Normalize(): void;
			static Dot(lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3): number;
			static Project(vector: UnityEngine.Vector3, onNormal: UnityEngine.Vector3): UnityEngine.Vector3;
			static ProjectOnPlane(vector: UnityEngine.Vector3, planeNormal: UnityEngine.Vector3): UnityEngine.Vector3;
			static Angle(from: UnityEngine.Vector3, to: UnityEngine.Vector3): number;
			static SignedAngle(from: UnityEngine.Vector3, to: UnityEngine.Vector3, axis: UnityEngine.Vector3): number;
			static Distance(a: UnityEngine.Vector3, b: UnityEngine.Vector3): number;
			static ClampMagnitude(vector: UnityEngine.Vector3, maxLength: number): UnityEngine.Vector3;
			static Magnitude(vector: UnityEngine.Vector3): number;
			static SqrMagnitude(vector: UnityEngine.Vector3): number;
			static Min(lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3): UnityEngine.Vector3;
			static Max(lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3): UnityEngine.Vector3;
			static op_Addition(a: UnityEngine.Vector3, b: UnityEngine.Vector3): UnityEngine.Vector3;
			static op_Subtraction(a: UnityEngine.Vector3, b: UnityEngine.Vector3): UnityEngine.Vector3;
			static op_UnaryNegation(a: UnityEngine.Vector3): UnityEngine.Vector3;
			static op_Multiply(a: UnityEngine.Vector3, d: number): UnityEngine.Vector3;
			static op_Multiply(d: number, a: UnityEngine.Vector3): UnityEngine.Vector3;
			static op_Division(a: UnityEngine.Vector3, d: number): UnityEngine.Vector3;
			static op_Equality(lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3): boolean;
			static op_Inequality(lhs: UnityEngine.Vector3, rhs: UnityEngine.Vector3): boolean;
			/**[Obsolete]--"Use Vector3.Angle instead. AngleBetween uses radians instead of degrees and was deprecated for this reason" */
			static AngleBetween(from: UnityEngine.Vector3, to: UnityEngine.Vector3): number;
			/**[Obsolete]--"Use Vector3.ProjectOnPlane instead." */
			static Exclude(excludeThis: UnityEngine.Vector3, fromThat: UnityEngine.Vector3): UnityEngine.Vector3;
			Set(newX: number, newY: number, newZ: number): void;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.Vector3): boolean;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Quaternion {
			x: number;
			y: number;
			z: number;
			w: number;
			static kEpsilon: number;
			static get identity(): UnityEngine.Quaternion;
			get eulerAngles(): UnityEngine.Vector3;
			set eulerAngles(value: UnityEngine.Vector3);
			get normalized(): UnityEngine.Quaternion;
			constructor(x: number, y: number, z: number, w: number);
			static FromToRotation(fromDirection: UnityEngine.Vector3, toDirection: UnityEngine.Vector3): UnityEngine.Quaternion;
			static Inverse(rotation: UnityEngine.Quaternion): UnityEngine.Quaternion;
			static Slerp(a: UnityEngine.Quaternion, b: UnityEngine.Quaternion, t: number): UnityEngine.Quaternion;
			static SlerpUnclamped(a: UnityEngine.Quaternion, b: UnityEngine.Quaternion, t: number): UnityEngine.Quaternion;
			static Lerp(a: UnityEngine.Quaternion, b: UnityEngine.Quaternion, t: number): UnityEngine.Quaternion;
			static LerpUnclamped(a: UnityEngine.Quaternion, b: UnityEngine.Quaternion, t: number): UnityEngine.Quaternion;
			static AngleAxis(angle: number, axis: UnityEngine.Vector3): UnityEngine.Quaternion;
			static LookRotation(forward: UnityEngine.Vector3, upwards: UnityEngine.Vector3): UnityEngine.Quaternion;
			static LookRotation(forward: UnityEngine.Vector3): UnityEngine.Quaternion;
			static op_Multiply(lhs: UnityEngine.Quaternion, rhs: UnityEngine.Quaternion): UnityEngine.Quaternion;
			static op_Multiply(rotation: UnityEngine.Quaternion, point: UnityEngine.Vector3): UnityEngine.Vector3;
			static op_Equality(lhs: UnityEngine.Quaternion, rhs: UnityEngine.Quaternion): boolean;
			static op_Inequality(lhs: UnityEngine.Quaternion, rhs: UnityEngine.Quaternion): boolean;
			static Dot(a: UnityEngine.Quaternion, b: UnityEngine.Quaternion): number;
			static Angle(a: UnityEngine.Quaternion, b: UnityEngine.Quaternion): number;
			static Euler(x: number, y: number, z: number): UnityEngine.Quaternion;
			static Euler(euler: UnityEngine.Vector3): UnityEngine.Quaternion;
			static RotateTowards(from: UnityEngine.Quaternion, to: UnityEngine.Quaternion, maxDegreesDelta: number): UnityEngine.Quaternion;
			static Normalize(q: UnityEngine.Quaternion): UnityEngine.Quaternion;
			Normalize(): void;
			/**[Obsolete]--"Use Quaternion.Euler instead. This function was deprecated because it uses radians instead of degrees." */
			static EulerRotation(x: number, y: number, z: number): UnityEngine.Quaternion;
			/**[Obsolete]--"Use Quaternion.Euler instead. This function was deprecated because it uses radians instead of degrees." */
			static EulerRotation(euler: UnityEngine.Vector3): UnityEngine.Quaternion;
			/**[Obsolete]--"Use Quaternion.Euler instead. This function was deprecated because it uses radians instead of degrees." */
			static EulerAngles(x: number, y: number, z: number): UnityEngine.Quaternion;
			/**[Obsolete]--"Use Quaternion.Euler instead. This function was deprecated because it uses radians instead of degrees." */
			static EulerAngles(euler: UnityEngine.Vector3): UnityEngine.Quaternion;
			/**[Obsolete]--"Use Quaternion.eulerAngles instead. This function was deprecated because it uses radians instead of degrees." */
			static ToEulerAngles(rotation: UnityEngine.Quaternion): UnityEngine.Vector3;
			/**[Obsolete]--"Use Quaternion.eulerAngles instead. This function was deprecated because it uses radians instead of degrees." */
			ToEulerAngles(): UnityEngine.Vector3;
			/**[Obsolete]--"Use Quaternion.AngleAxis instead. This function was deprecated because it uses radians instead of degrees" */
			static AxisAngle(axis: UnityEngine.Vector3, angle: number): UnityEngine.Quaternion;
			Set(newX: number, newY: number, newZ: number, newW: number): void;
			SetLookRotation(view: UnityEngine.Vector3): void;
			SetLookRotation(view: UnityEngine.Vector3, up: UnityEngine.Vector3): void;
			ToAngleAxis(angle: any, axis: any): void;
			SetFromToRotation(fromDirection: UnityEngine.Vector3, toDirection: UnityEngine.Vector3): void;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.Quaternion): boolean;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			/**[Obsolete]--"Use Quaternion.Euler instead. This function was deprecated because it uses radians instead of degrees." */
			SetEulerRotation(x: number, y: number, z: number): void;
			/**[Obsolete]--"Use Quaternion.Euler instead. This function was deprecated because it uses radians instead of degrees." */
			SetEulerRotation(euler: UnityEngine.Vector3): void;
			/**[Obsolete]--"Use Quaternion.eulerAngles instead. This function was deprecated because it uses radians instead of degrees." */
			ToEuler(): UnityEngine.Vector3;
			/**[Obsolete]--"Use Quaternion.ToAngleAxis instead. This function was deprecated because it uses radians instead of degrees." */
			ToAxisAngle(axis: any, angle: any): void;
			/**[Obsolete]--"Use Quaternion.Euler instead. This function was deprecated because it uses radians instead of degrees." */
			SetEulerAngles(x: number, y: number, z: number): void;
			/**[Obsolete]--"Use Quaternion.Euler instead. This function was deprecated because it uses radians instead of degrees." */
			SetEulerAngles(euler: UnityEngine.Vector3): void;
			/**[Obsolete]--"Use Quaternion.AngleAxis instead. This function was deprecated because it uses radians instead of degrees." */
			SetAxisAngle(axis: UnityEngine.Vector3, angle: number): void;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Mathf {
			static PI: number;
			static Infinity: number;
			static NegativeInfinity: number;
			static Deg2Rad: number;
			static Rad2Deg: number;
			static Epsilon: number;
			static ClosestPowerOfTwo(value: number): number;
			static IsPowerOfTwo(value: number): boolean;
			static NextPowerOfTwo(value: number): number;
			static GammaToLinearSpace(value: number): number;
			static LinearToGammaSpace(value: number): number;
			static CorrelatedColorTemperatureToRGB(kelvin: number): UnityEngine.Color;
			static FloatToHalf(val: number): number;
			static HalfToFloat(val: number): number;
			static PerlinNoise(x: number, y: number): number;
			static Sin(f: number): number;
			static Cos(f: number): number;
			static Tan(f: number): number;
			static Asin(f: number): number;
			static Acos(f: number): number;
			static Atan(f: number): number;
			static Atan2(y: number, x: number): number;
			static Sqrt(f: number): number;
			static Abs(f: number): number;
			static Abs(value: number): number;
			static Min(a: number, b: number): number;
			static Min(values: number[]): number;
			static Min(a: number, b: number): number;
			static Min(values: number[]): number;
			static Max(a: number, b: number): number;
			static Max(values: number[]): number;
			static Max(a: number, b: number): number;
			static Max(values: number[]): number;
			static Pow(f: number, p: number): number;
			static Exp(power: number): number;
			static Log(f: number, p: number): number;
			static Log(f: number): number;
			static Log10(f: number): number;
			static Ceil(f: number): number;
			static Floor(f: number): number;
			static Round(f: number): number;
			static CeilToInt(f: number): number;
			static FloorToInt(f: number): number;
			static RoundToInt(f: number): number;
			static Sign(f: number): number;
			static Clamp(value: number, min: number, max: number): number;
			static Clamp(value: number, min: number, max: number): number;
			static Clamp01(value: number): number;
			static Lerp(a: number, b: number, t: number): number;
			static LerpUnclamped(a: number, b: number, t: number): number;
			static LerpAngle(a: number, b: number, t: number): number;
			static MoveTowards(current: number, target: number, maxDelta: number): number;
			static MoveTowardsAngle(current: number, target: number, maxDelta: number): number;
			static SmoothStep(from: number, to: number, t: number): number;
			static Gamma(value: number, absmax: number, gamma: number): number;
			static Approximately(a: number, b: number): boolean;
			static SmoothDamp(current: number, target: number, currentVelocity: any, smoothTime: number, maxSpeed: number): number;
			static SmoothDamp(current: number, target: number, currentVelocity: any, smoothTime: number): number;
			static SmoothDamp(current: number, target: number, currentVelocity: any, smoothTime: number, maxSpeed: number, deltaTime: number): number;
			static SmoothDampAngle(current: number, target: number, currentVelocity: any, smoothTime: number, maxSpeed: number): number;
			static SmoothDampAngle(current: number, target: number, currentVelocity: any, smoothTime: number): number;
			static SmoothDampAngle(current: number, target: number, currentVelocity: any, smoothTime: number, maxSpeed: number, deltaTime: number): number;
			static Repeat(t: number, length: number): number;
			static PingPong(t: number, length: number): number;
			static InverseLerp(a: number, b: number, value: number): number;
			static DeltaAngle(current: number, target: number): number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BoneWeight {
			get weight0(): number;
			set weight0(value: number);
			get weight1(): number;
			set weight1(value: number);
			get weight2(): number;
			set weight2(value: number);
			get weight3(): number;
			set weight3(value: number);
			get boneIndex0(): number;
			set boneIndex0(value: number);
			get boneIndex1(): number;
			set boneIndex1(value: number);
			get boneIndex2(): number;
			set boneIndex2(value: number);
			get boneIndex3(): number;
			set boneIndex3(value: number);
			static op_Equality(lhs: UnityEngine.BoneWeight, rhs: UnityEngine.BoneWeight): boolean;
			static op_Inequality(lhs: UnityEngine.BoneWeight, rhs: UnityEngine.BoneWeight): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.BoneWeight): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CombineInstance {
			get mesh(): UnityEngine.Mesh;
			set mesh(value: UnityEngine.Mesh);
			get subMeshIndex(): number;
			set subMeshIndex(value: number);
			get transform(): UnityEngine.Matrix4x4;
			set transform(value: UnityEngine.Matrix4x4);
			get lightmapScaleOffset(): UnityEngine.Vector4;
			set lightmapScaleOffset(value: UnityEngine.Vector4);
			get realtimeLightmapScaleOffset(): UnityEngine.Vector4;
			set realtimeLightmapScaleOffset(value: UnityEngine.Vector4);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MonoBehaviour extends UnityEngine.Behaviour {
			get useGUILayout(): boolean;
			set useGUILayout(value: boolean);
			get runInEditMode(): boolean;
			set runInEditMode(value: boolean);
			constructor();
			static print(message: any): void;
			IsInvoking(): boolean;
			IsInvoking(methodName: string): boolean;
			CancelInvoke(): void;
			CancelInvoke(methodName: string): void;
			Invoke(methodName: string, time: number): void;
			InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
			StartCoroutine(methodName: string): UnityEngine.Coroutine;
			StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
			StartCoroutine(routine: any): UnityEngine.Coroutine;
			/**[Obsolete]--"StartCoroutine_Auto has been deprecated. Use StartCoroutine instead (UnityUpgradable) -> StartCoroutine([mscorlib] System.Collections.IEnumerator)" */
			StartCoroutine_Auto(routine: any): UnityEngine.Coroutine;
			StopCoroutine(routine: any): void;
			StopCoroutine(routine: UnityEngine.Coroutine): void;
			StopCoroutine(methodName: string): void;
			StopAllCoroutines(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum RPCMode { }
		export enum ConnectionTesterStatus { }
		export enum NetworkConnectionError { }
		export enum NetworkDisconnection { }
		export enum MasterServerEvent { }
		export enum NetworkStateSynchronization { }
		export enum NetworkPeerType { }
		export enum NetworkLogLevel { }
		export class NetworkPlayer {
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get ipAddress(): string;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get port(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get guid(): string;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get externalIP(): string;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get externalPort(): number;
			constructor(ip: string, port: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkViewID {
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get unassigned(): UnityEngine.NetworkViewID;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get isMine(): boolean;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get owner(): UnityEngine.NetworkPlayer;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkView extends UnityEngine.Behaviour {
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get observed(): UnityEngine.Component;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set observed(value: UnityEngine.Component);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get stateSynchronization(): UnityEngine.NetworkStateSynchronization;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set stateSynchronization(value: UnityEngine.NetworkStateSynchronization);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get viewID(): UnityEngine.NetworkViewID;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set viewID(value: UnityEngine.NetworkViewID);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get group(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set group(value: number);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get isMine(): boolean;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get owner(): UnityEngine.NetworkPlayer;
			constructor();
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			RPC(name: string, mode: UnityEngine.RPCMode, args: any): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			RPC(name: string, target: UnityEngine.NetworkPlayer, args: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Network extends System.Object {
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get incomingPassword(): string;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set incomingPassword(value: string);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get logLevel(): UnityEngine.NetworkLogLevel;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set logLevel(value: UnityEngine.NetworkLogLevel);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get connections(): UnityEngine.NetworkPlayer[];
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get player(): UnityEngine.NetworkPlayer;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get isClient(): boolean;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get isServer(): boolean;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get peerType(): UnityEngine.NetworkPeerType;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get sendRate(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set sendRate(value: number);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get isMessageQueueRunning(): boolean;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set isMessageQueueRunning(value: boolean);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get time(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get minimumAllocatableViewIDs(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set minimumAllocatableViewIDs(value: number);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get useNat(): boolean;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set useNat(value: boolean);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get natFacilitatorIP(): string;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set natFacilitatorIP(value: string);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get natFacilitatorPort(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set natFacilitatorPort(value: number);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get connectionTesterIP(): string;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set connectionTesterIP(value: string);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get connectionTesterPort(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set connectionTesterPort(value: number);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get maxConnections(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set maxConnections(value: number);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get proxyIP(): string;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set proxyIP(value: string);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get proxyPort(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set proxyPort(value: number);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get useProxy(): boolean;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set useProxy(value: boolean);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get proxyPassword(): string;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set proxyPassword(value: string);
			constructor();
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static InitializeServer(connections: number, listenPort: number, useNat: boolean): UnityEngine.NetworkConnectionError;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static InitializeServer(connections: number, listenPort: number): UnityEngine.NetworkConnectionError;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static InitializeSecurity(): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static Connect(IP: string, remotePort: number): UnityEngine.NetworkConnectionError;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static Connect(IP: string, remotePort: number, password: string): UnityEngine.NetworkConnectionError;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static Connect(IPs: string[], remotePort: number): UnityEngine.NetworkConnectionError;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static Connect(IPs: string[], remotePort: number, password: string): UnityEngine.NetworkConnectionError;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static Connect(GUID: string): UnityEngine.NetworkConnectionError;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static Connect(GUID: string, password: string): UnityEngine.NetworkConnectionError;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static Connect(hostData: UnityEngine.HostData): UnityEngine.NetworkConnectionError;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static Connect(hostData: UnityEngine.HostData, password: string): UnityEngine.NetworkConnectionError;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static Disconnect(): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static Disconnect(timeout: number): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static CloseConnection(target: UnityEngine.NetworkPlayer, sendDisconnectionNotification: boolean): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static AllocateViewID(): UnityEngine.NetworkViewID;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static Instantiate(prefab: any, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, group: number): any;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static Destroy(viewID: UnityEngine.NetworkViewID): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static Destroy(gameObject: UnityEngine.GameObject): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static DestroyPlayerObjects(playerID: UnityEngine.NetworkPlayer): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static RemoveRPCs(playerID: UnityEngine.NetworkPlayer): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static RemoveRPCs(playerID: UnityEngine.NetworkPlayer, group: number): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static RemoveRPCs(viewID: UnityEngine.NetworkViewID): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static RemoveRPCsInGroup(group: number): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static SetLevelPrefix(prefix: number): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static GetLastPing(player: UnityEngine.NetworkPlayer): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static GetAveragePing(player: UnityEngine.NetworkPlayer): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static SetReceivingEnabled(player: UnityEngine.NetworkPlayer, group: number, enabled: boolean): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static SetSendingEnabled(group: number, enabled: boolean): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static SetSendingEnabled(player: UnityEngine.NetworkPlayer, group: number, enabled: boolean): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static TestConnection(): UnityEngine.ConnectionTesterStatus;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static TestConnection(forceTest: boolean): UnityEngine.ConnectionTesterStatus;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static TestConnectionNAT(): UnityEngine.ConnectionTesterStatus;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static TestConnectionNAT(forceTest: boolean): UnityEngine.ConnectionTesterStatus;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static HavePublicAddress(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BitStream extends System.Object {
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get isReading(): boolean;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get isWriting(): boolean;
			constructor();
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			Serialize(value: any): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			Serialize(value: any): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			Serialize(value: any): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			Serialize(value: any): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			Serialize(value: any): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			Serialize(value: any, maxDelta: number): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			Serialize(value: any): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			Serialize(value: any, maxDelta: number): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			Serialize(value: any): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			Serialize(value: any, maxDelta: number): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			Serialize(value: any): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			Serialize(viewID: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RPC extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HostData extends System.Object {
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get useNat(): boolean;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set useNat(value: boolean);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get gameType(): string;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set gameType(value: string);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get gameName(): string;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set gameName(value: string);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get connectedPlayers(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set connectedPlayers(value: number);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get playerLimit(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set playerLimit(value: number);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get ip(): string[];
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set ip(value: string[]);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get port(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set port(value: number);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get passwordProtected(): boolean;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set passwordProtected(value: boolean);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get comment(): string;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set comment(value: string);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get guid(): string;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			set guid(value: string);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MasterServer extends System.Object {
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get ipAddress(): string;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set ipAddress(value: string);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get port(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set port(value: number);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get updateRate(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set updateRate(value: number);
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static get dedicatedServer(): boolean;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static set dedicatedServer(value: boolean);
			constructor();
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static RequestHostList(gameTypeName: string): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static PollHostList(): UnityEngine.HostData[];
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static RegisterHost(gameTypeName: string, gameName: string): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static RegisterHost(gameTypeName: string, gameName: string, comment: string): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static UnregisterHost(): void;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			static ClearHostList(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkMessageInfo {
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get timestamp(): number;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get sender(): UnityEngine.NetworkPlayer;
			/**[Obsolete][Error]--"The legacy networking system has been removed in Unity 2018.2. Use Unity Multiplayer and NetworkIdentity instead." */
			get networkView(): UnityEngine.NetworkView;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Ping extends System.Object {
			get isDone(): boolean;
			get time(): number;
			get ip(): string;
			constructor(address: string);
			DestroyPing(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Plane {
			get normal(): UnityEngine.Vector3;
			set normal(value: UnityEngine.Vector3);
			get distance(): number;
			set distance(value: number);
			get flipped(): UnityEngine.Plane;
			constructor(inNormal: UnityEngine.Vector3, inPoint: UnityEngine.Vector3);
			constructor(inNormal: UnityEngine.Vector3, d: number);
			constructor(a: UnityEngine.Vector3, b: UnityEngine.Vector3, c: UnityEngine.Vector3);
			SetNormalAndPosition(inNormal: UnityEngine.Vector3, inPoint: UnityEngine.Vector3): void;
			Set3Points(a: UnityEngine.Vector3, b: UnityEngine.Vector3, c: UnityEngine.Vector3): void;
			Flip(): void;
			Translate(translation: UnityEngine.Vector3): void;
			static Translate(plane: UnityEngine.Plane, translation: UnityEngine.Vector3): UnityEngine.Plane;
			ClosestPointOnPlane(point: UnityEngine.Vector3): UnityEngine.Vector3;
			GetDistanceToPoint(point: UnityEngine.Vector3): number;
			GetSide(point: UnityEngine.Vector3): boolean;
			SameSide(inPt0: UnityEngine.Vector3, inPt1: UnityEngine.Vector3): boolean;
			Raycast(ray: UnityEngine.Ray, enter: any): boolean;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PlayerPrefs extends System.Object {
			constructor();
			static SetInt(key: string, value: number): void;
			static GetInt(key: string, defaultValue: number): number;
			static GetInt(key: string): number;
			static SetFloat(key: string, value: number): void;
			static GetFloat(key: string, defaultValue: number): number;
			static GetFloat(key: string): number;
			static SetString(key: string, value: string): void;
			static GetString(key: string, defaultValue: string): string;
			static GetString(key: string): string;
			static HasKey(key: string): boolean;
			static DeleteKey(key: string): void;
			static DeleteAll(): void;
			static Save(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Pose {
			position: UnityEngine.Vector3;
			rotation: UnityEngine.Quaternion;
			get forward(): UnityEngine.Vector3;
			get right(): UnityEngine.Vector3;
			get up(): UnityEngine.Vector3;
			static get identity(): UnityEngine.Pose;
			constructor(position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion);
			static op_Equality(a: UnityEngine.Pose, b: UnityEngine.Pose): boolean;
			static op_Inequality(a: UnityEngine.Pose, b: UnityEngine.Pose): boolean;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			GetTransformedBy(lhs: UnityEngine.Pose): UnityEngine.Pose;
			GetTransformedBy(lhs: UnityEngine.Transform): UnityEngine.Pose;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: UnityEngine.Pose): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PropertyAttribute extends System.Attribute {
			get order(): number;
			set order(value: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ContextMenuItemAttribute extends UnityEngine.PropertyAttribute {
			name: string;
			function: string;
			constructor(name: string, func: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TooltipAttribute extends UnityEngine.PropertyAttribute {
			tooltip: string;
			constructor(tooltip: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SpaceAttribute extends UnityEngine.PropertyAttribute {
			height: number;
			constructor();
			constructor(height: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HeaderAttribute extends UnityEngine.PropertyAttribute {
			header: string;
			constructor(header: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RangeAttribute extends UnityEngine.PropertyAttribute {
			min: number;
			max: number;
			constructor(min: number, max: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MinAttribute extends UnityEngine.PropertyAttribute {
			min: number;
			constructor(min: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MultilineAttribute extends UnityEngine.PropertyAttribute {
			lines: number;
			constructor();
			constructor(lines: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TextAreaAttribute extends UnityEngine.PropertyAttribute {
			minLines: number;
			maxLines: number;
			constructor();
			constructor(minLines: number, maxLines: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ColorUsageAttribute extends UnityEngine.PropertyAttribute {
			showAlpha: boolean;
			hdr: boolean;
			/**[Obsolete]--"This field is no longer used for anything." */
			minBrightness: number;
			/**[Obsolete]--"This field is no longer used for anything." */
			maxBrightness: number;
			/**[Obsolete]--"This field is no longer used for anything." */
			minExposureValue: number;
			/**[Obsolete]--"This field is no longer used for anything." */
			maxExposureValue: number;
			constructor(showAlpha: boolean);
			constructor(showAlpha: boolean, hdr: boolean);
			constructor(showAlpha: boolean, hdr: boolean, minBrightness: number, maxBrightness: number, minExposureValue: number, maxExposureValue: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GradientUsageAttribute extends UnityEngine.PropertyAttribute {
			hdr: boolean;
			constructor(hdr: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DelayedAttribute extends UnityEngine.PropertyAttribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PropertyName {
			constructor(name: string);
			constructor(other: UnityEngine.PropertyName);
			constructor(id: number);
			static IsNullOrEmpty(prop: UnityEngine.PropertyName): boolean;
			static op_Equality(lhs: UnityEngine.PropertyName, rhs: UnityEngine.PropertyName): boolean;
			static op_Inequality(lhs: UnityEngine.PropertyName, rhs: UnityEngine.PropertyName): boolean;
			static op_Implicit(name: string): UnityEngine.PropertyName;
			static op_Implicit(id: number): UnityEngine.PropertyName;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.PropertyName): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Random extends System.Object {
			/**[Obsolete]--"Deprecated. Use InitState() function or Random.state property instead." */
			static get seed(): number;
			/**[Obsolete]--"Deprecated. Use InitState() function or Random.state property instead." */
			static set seed(value: number);
			static get state(): UnityEngine.Random.State;
			static set state(value: UnityEngine.Random.State);
			static get value(): number;
			static get insideUnitSphere(): UnityEngine.Vector3;
			static get insideUnitCircle(): UnityEngine.Vector2;
			static get onUnitSphere(): UnityEngine.Vector3;
			static get rotation(): UnityEngine.Quaternion;
			static get rotationUniform(): UnityEngine.Quaternion;
			constructor();
			static InitState(seed: number): void;
			static Range(min: number, max: number): number;
			static Range(min: number, max: number): number;
			/**[Obsolete]--"Use Random.Range instead" */
			static RandomRange(min: number, max: number): number;
			/**[Obsolete]--"Use Random.Range instead" */
			static RandomRange(min: number, max: number): number;
			static ColorHSV(): UnityEngine.Color;
			static ColorHSV(hueMin: number, hueMax: number): UnityEngine.Color;
			static ColorHSV(hueMin: number, hueMax: number, saturationMin: number, saturationMax: number): UnityEngine.Color;
			static ColorHSV(hueMin: number, hueMax: number, saturationMin: number, saturationMax: number, valueMin: number, valueMax: number): UnityEngine.Color;
			static ColorHSV(hueMin: number, hueMax: number, saturationMin: number, saturationMax: number, valueMin: number, valueMax: number, alphaMin: number, alphaMax: number): UnityEngine.Color;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RangeInt {
			start: number;
			length: number;
			get end(): number;
			constructor(start: number, length: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Ray {
			get origin(): UnityEngine.Vector3;
			set origin(value: UnityEngine.Vector3);
			get direction(): UnityEngine.Vector3;
			set direction(value: UnityEngine.Vector3);
			constructor(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3);
			GetPoint(distance: number): UnityEngine.Vector3;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Ray2D {
			get origin(): UnityEngine.Vector2;
			set origin(value: UnityEngine.Vector2);
			get direction(): UnityEngine.Vector2;
			set direction(value: UnityEngine.Vector2);
			constructor(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2);
			GetPoint(distance: number): UnityEngine.Vector2;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Rect {
			static get zero(): UnityEngine.Rect;
			get x(): number;
			set x(value: number);
			get y(): number;
			set y(value: number);
			get position(): UnityEngine.Vector2;
			set position(value: UnityEngine.Vector2);
			get center(): UnityEngine.Vector2;
			set center(value: UnityEngine.Vector2);
			get min(): UnityEngine.Vector2;
			set min(value: UnityEngine.Vector2);
			get max(): UnityEngine.Vector2;
			set max(value: UnityEngine.Vector2);
			get width(): number;
			set width(value: number);
			get height(): number;
			set height(value: number);
			get size(): UnityEngine.Vector2;
			set size(value: UnityEngine.Vector2);
			get xMin(): number;
			set xMin(value: number);
			get yMin(): number;
			set yMin(value: number);
			get xMax(): number;
			set xMax(value: number);
			get yMax(): number;
			set yMax(value: number);
			/**[Obsolete]--"use xMin" */
			get left(): number;
			/**[Obsolete]--"use xMax" */
			get right(): number;
			/**[Obsolete]--"use yMin" */
			get top(): number;
			/**[Obsolete]--"use yMax" */
			get bottom(): number;
			constructor(x: number, y: number, width: number, height: number);
			constructor(position: UnityEngine.Vector2, size: UnityEngine.Vector2);
			constructor(source: UnityEngine.Rect);
			static MinMaxRect(xmin: number, ymin: number, xmax: number, ymax: number): UnityEngine.Rect;
			static NormalizedToPoint(rectangle: UnityEngine.Rect, normalizedRectCoordinates: UnityEngine.Vector2): UnityEngine.Vector2;
			static PointToNormalized(rectangle: UnityEngine.Rect, point: UnityEngine.Vector2): UnityEngine.Vector2;
			static op_Inequality(lhs: UnityEngine.Rect, rhs: UnityEngine.Rect): boolean;
			static op_Equality(lhs: UnityEngine.Rect, rhs: UnityEngine.Rect): boolean;
			Set(x: number, y: number, width: number, height: number): void;
			Contains(point: UnityEngine.Vector2): boolean;
			Contains(point: UnityEngine.Vector3): boolean;
			Contains(point: UnityEngine.Vector3, allowInverse: boolean): boolean;
			Overlaps(other: UnityEngine.Rect): boolean;
			Overlaps(other: UnityEngine.Rect, allowInverse: boolean): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.Rect): boolean;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RectInt {
			get x(): number;
			set x(value: number);
			get y(): number;
			set y(value: number);
			get center(): UnityEngine.Vector2;
			get min(): UnityEngine.Vector2Int;
			set min(value: UnityEngine.Vector2Int);
			get max(): UnityEngine.Vector2Int;
			set max(value: UnityEngine.Vector2Int);
			get width(): number;
			set width(value: number);
			get height(): number;
			set height(value: number);
			get xMin(): number;
			set xMin(value: number);
			get yMin(): number;
			set yMin(value: number);
			get xMax(): number;
			set xMax(value: number);
			get yMax(): number;
			set yMax(value: number);
			get position(): UnityEngine.Vector2Int;
			set position(value: UnityEngine.Vector2Int);
			get size(): UnityEngine.Vector2Int;
			set size(value: UnityEngine.Vector2Int);
			get allPositionsWithin(): UnityEngine.RectInt.PositionEnumerator;
			constructor(xMin: number, yMin: number, width: number, height: number);
			constructor(position: UnityEngine.Vector2Int, size: UnityEngine.Vector2Int);
			SetMinMax(minPosition: UnityEngine.Vector2Int, maxPosition: UnityEngine.Vector2Int): void;
			ClampToBounds(bounds: UnityEngine.RectInt): void;
			Contains(position: UnityEngine.Vector2Int): boolean;
			/**inherited method */
			ToString(): string;
			Equals(other: UnityEngine.RectInt): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ReflectionProbe extends UnityEngine.Behaviour {
			/**[Obsolete][Error]--"type property has been deprecated. Starting with Unity 5.4, the only supported reflection probe type is Cube." */
			get type(): any;
			/**[Obsolete][Error]--"type property has been deprecated. Starting with Unity 5.4, the only supported reflection probe type is Cube." */
			set type(value: any);
			get size(): UnityEngine.Vector3;
			set size(value: UnityEngine.Vector3);
			get center(): UnityEngine.Vector3;
			set center(value: UnityEngine.Vector3);
			get nearClipPlane(): number;
			set nearClipPlane(value: number);
			get farClipPlane(): number;
			set farClipPlane(value: number);
			get intensity(): number;
			set intensity(value: number);
			get bounds(): UnityEngine.Bounds;
			get hdr(): boolean;
			set hdr(value: boolean);
			get shadowDistance(): number;
			set shadowDistance(value: number);
			get resolution(): number;
			set resolution(value: number);
			get cullingMask(): number;
			set cullingMask(value: number);
			get clearFlags(): any;
			set clearFlags(value: any);
			get backgroundColor(): UnityEngine.Color;
			set backgroundColor(value: UnityEngine.Color);
			get blendDistance(): number;
			set blendDistance(value: number);
			get boxProjection(): boolean;
			set boxProjection(value: boolean);
			get mode(): any;
			set mode(value: any);
			get importance(): number;
			set importance(value: number);
			get refreshMode(): any;
			set refreshMode(value: any);
			get timeSlicingMode(): any;
			set timeSlicingMode(value: any);
			get bakedTexture(): UnityEngine.Texture;
			set bakedTexture(value: UnityEngine.Texture);
			get customBakedTexture(): UnityEngine.Texture;
			set customBakedTexture(value: UnityEngine.Texture);
			get realtimeTexture(): UnityEngine.RenderTexture;
			set realtimeTexture(value: UnityEngine.RenderTexture);
			get texture(): UnityEngine.Texture;
			get textureHDRDecodeValues(): UnityEngine.Vector4;
			static get minBakedCubemapResolution(): number;
			static get maxBakedCubemapResolution(): number;
			static get defaultTextureHDRDecodeValues(): UnityEngine.Vector4;
			static get defaultTexture(): UnityEngine.Texture;
			constructor();
			static BlendCubemap(src: UnityEngine.Texture, dst: UnityEngine.Texture, blend: number, target: UnityEngine.RenderTexture): boolean;
			static add_reflectionProbeChanged(value: System.Action$2): void;
			static remove_reflectionProbeChanged(value: System.Action$2): void;
			static add_defaultReflectionSet(value: System.Action$1): void;
			static remove_defaultReflectionSet(value: System.Action$1): void;
			Reset(): void;
			RenderProbe(): number;
			RenderProbe(targetTexture: UnityEngine.RenderTexture): number;
			IsFinishedRendering(renderId: number): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ResourceRequest extends UnityEngine.AsyncOperation {
			get asset(): any;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Resources extends System.Object {
			constructor();
			static FindObjectsOfTypeAll(type: System.Type): any;
			static Load(path: string): any;
			static Load(path: string, systemTypeInstance: System.Type): any;
			static LoadAsync(path: string): UnityEngine.ResourceRequest;
			static LoadAsync(path: string, type: System.Type): UnityEngine.ResourceRequest;
			static LoadAll(path: string, systemTypeInstance: System.Type): any;
			static LoadAll(path: string): any;
			static GetBuiltinResource(type: System.Type, path: string): any;
			static UnloadAsset(assetToUnload: any): void;
			static UnloadUnusedAssets(): UnityEngine.AsyncOperation;
			/**[Obsolete][Error]--"Use AssetDatabase.LoadAssetAtPath instead (UnityUpgradable) -> * [UnityEditor] UnityEditor.AssetDatabase.LoadAssetAtPath(*)" */
			static LoadAssetAtPath(assetPath: string, type: System.Type): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum RuntimeInitializeLoadType { AfterSceneLoad = 0, BeforeSceneLoad = 1, }
		export class RuntimeInitializeOnLoadMethodAttribute {
			get loadType(): UnityEngine.RuntimeInitializeLoadType;
			set loadType(value: UnityEngine.RuntimeInitializeLoadType);
			constructor();
			constructor(loadType: UnityEngine.RuntimeInitializeLoadType);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Match(obj: any): boolean;
			/**inherited method */
			IsDefaultAttribute(): boolean;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ScriptableObject extends UnityEngine.Object {
			constructor();
			static CreateInstance(className: string): UnityEngine.ScriptableObject;
			static CreateInstance(type: System.Type): UnityEngine.ScriptableObject;
			/**[Obsolete]--"Use EditorUtility.SetDirty instead" */
			SetDirty(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Security extends System.Object {
			constructor();
			/**[Obsolete][Error]--"This was an internal method which is no longer used" */
			static LoadAndVerifyAssembly(assemblyData: Uint8Array, authorizationKey: string): System.Reflection.Assembly;
			/**[Obsolete][Error]--"This was an internal method which is no longer used" */
			static LoadAndVerifyAssembly(assemblyData: Uint8Array): System.Reflection.Assembly;
			/**[Obsolete][Error]--"Security.PrefetchSocketPolicy is no longer supported, since the Unity Web Player is no longer supported by Unity." */
			static PrefetchSocketPolicy(ip: string, atPort: number): boolean;
			/**[Obsolete][Error]--"Security.PrefetchSocketPolicy is no longer supported, since the Unity Web Player is no longer supported by Unity." */
			static PrefetchSocketPolicy(ip: string, atPort: number, timeout: number): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Types extends System.Object {
			/**[Obsolete][Error]--"This was an internal method which is no longer used" */
			static GetType(typeName: string, assemblyName: string): System.Type;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SelectionBaseAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SerializePrivateVariables extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SerializeField extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PreferBinarySerialization extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface ISerializationCallbackReceiver {
			OnBeforeSerialize(): void;
			OnAfterDeserialize(): void;
		}
		export class ShaderVariantCollection extends UnityEngine.Object {
			get shaderCount(): number;
			get variantCount(): number;
			get isWarmedUp(): boolean;
			constructor();
			Clear(): void;
			WarmUp(): void;
			Add(variant: UnityEngine.ShaderVariantCollection.ShaderVariant): boolean;
			Remove(variant: UnityEngine.ShaderVariantCollection.ShaderVariant): boolean;
			Contains(variant: UnityEngine.ShaderVariantCollection.ShaderVariant): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ComputeShader extends UnityEngine.Object {
			FindKernel(name: string): number;
			HasKernel(name: string): boolean;
			SetFloat(nameID: number, val: number): void;
			SetFloat(name: string, val: number): void;
			SetInt(nameID: number, val: number): void;
			SetInt(name: string, val: number): void;
			SetVector(nameID: number, val: UnityEngine.Vector4): void;
			SetVector(name: string, val: UnityEngine.Vector4): void;
			SetMatrix(nameID: number, val: UnityEngine.Matrix4x4): void;
			SetMatrix(name: string, val: UnityEngine.Matrix4x4): void;
			SetVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
			SetVectorArray(name: string, values: UnityEngine.Vector4[]): void;
			SetMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
			SetMatrixArray(name: string, values: UnityEngine.Matrix4x4[]): void;
			SetTexture(kernelIndex: number, nameID: number, texture: UnityEngine.Texture, mipLevel: number): void;
			SetTexture(kernelIndex: number, nameID: number, texture: UnityEngine.Texture): void;
			SetTexture(kernelIndex: number, name: string, texture: UnityEngine.Texture): void;
			SetTexture(kernelIndex: number, name: string, texture: UnityEngine.Texture, mipLevel: number): void;
			SetTextureFromGlobal(kernelIndex: number, nameID: number, globalTextureNameID: number): void;
			SetTextureFromGlobal(kernelIndex: number, name: string, globalTextureName: string): void;
			SetBuffer(kernelIndex: number, nameID: number, buffer: UnityEngine.ComputeBuffer): void;
			SetBuffer(kernelIndex: number, name: string, buffer: UnityEngine.ComputeBuffer): void;
			GetKernelThreadGroupSizes(kernelIndex: number, x: any, y: any, z: any): void;
			Dispatch(kernelIndex: number, threadGroupsX: number, threadGroupsY: number, threadGroupsZ: number): void;
			SetFloats(name: string, values: number[]): void;
			SetFloats(nameID: number, values: number[]): void;
			SetInts(name: string, values: number[]): void;
			SetInts(nameID: number, values: number[]): void;
			SetBool(name: string, val: boolean): void;
			SetBool(nameID: number, val: boolean): void;
			DispatchIndirect(kernelIndex: number, argsBuffer: UnityEngine.ComputeBuffer, argsOffset: number): void;
			DispatchIndirect(kernelIndex: number, argsBuffer: UnityEngine.ComputeBuffer): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SortingLayer {
			get id(): number;
			get name(): string;
			get value(): number;
			static get layers(): UnityEngine.SortingLayer[];
			static GetLayerValueFromID(id: number): number;
			static GetLayerValueFromName(name: string): number;
			static NameToID(name: string): number;
			static IDToName(id: number): string;
			static IsValid(id: number): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StackTraceUtility extends System.Object {
			static ExtractStackTrace(): string;
			static ExtractStringFromException(exception: any): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum BatteryStatus { Unknown = 0, Charging = 1, Discharging = 2, NotCharging = 3, Full = 4, }
		export enum OperatingSystemFamily { Other = 0, MacOSX = 1, Windows = 2, Linux = 3, }
		export enum DeviceType { Unknown = 0, Handheld = 1, Console = 2, Desktop = 3, }
		export class SystemInfo extends System.Object {
			static unsupportedIdentifier: string;
			static get batteryLevel(): number;
			static get batteryStatus(): UnityEngine.BatteryStatus;
			static get operatingSystem(): string;
			static get operatingSystemFamily(): UnityEngine.OperatingSystemFamily;
			static get processorType(): string;
			static get processorFrequency(): number;
			static get processorCount(): number;
			static get systemMemorySize(): number;
			static get deviceUniqueIdentifier(): string;
			static get deviceName(): string;
			static get deviceModel(): string;
			static get supportsAccelerometer(): boolean;
			static get supportsGyroscope(): boolean;
			static get supportsLocationService(): boolean;
			static get supportsVibration(): boolean;
			static get supportsAudio(): boolean;
			static get deviceType(): UnityEngine.DeviceType;
			static get graphicsMemorySize(): number;
			static get graphicsDeviceName(): string;
			static get graphicsDeviceVendor(): string;
			static get graphicsDeviceID(): number;
			static get graphicsDeviceVendorID(): number;
			static get graphicsDeviceType(): any;
			static get graphicsUVStartsAtTop(): boolean;
			static get graphicsDeviceVersion(): string;
			static get graphicsShaderLevel(): number;
			static get graphicsMultiThreaded(): boolean;
			static get hasHiddenSurfaceRemovalOnGPU(): boolean;
			static get hasDynamicUniformArrayIndexingInFragmentShaders(): boolean;
			static get supportsShadows(): boolean;
			static get supportsRawShadowDepthSampling(): boolean;
			/**[Obsolete]--"supportsRenderTextures always returns true, no need to call it" */
			static get supportsRenderTextures(): boolean;
			static get supportsMotionVectors(): boolean;
			static get supportsRenderToCubemap(): boolean;
			static get supportsImageEffects(): boolean;
			static get supports3DTextures(): boolean;
			static get supports2DArrayTextures(): boolean;
			static get supports3DRenderTextures(): boolean;
			static get supportsCubemapArrayTextures(): boolean;
			static get copyTextureSupport(): any;
			static get supportsComputeShaders(): boolean;
			static get supportsInstancing(): boolean;
			static get supportsHardwareQuadTopology(): boolean;
			static get supports32bitsIndexBuffer(): boolean;
			static get supportsSparseTextures(): boolean;
			static get supportedRenderTargetCount(): number;
			static get supportsSeparatedRenderTargetsBlend(): boolean;
			static get supportsMultisampledTextures(): number;
			static get supportsMultisampleAutoResolve(): boolean;
			static get supportsTextureWrapMirrorOnce(): number;
			static get usesReversedZBuffer(): boolean;
			/**[Obsolete]--"supportsStencil always returns true, no need to call it" */
			static get supportsStencil(): number;
			static get npotSupport(): UnityEngine.NPOTSupport;
			static get maxTextureSize(): number;
			static get maxCubemapSize(): number;
			static get supportsAsyncCompute(): boolean;
			static get supportsGPUFence(): boolean;
			static get supportsAsyncGPUReadback(): boolean;
			static get supportsMipStreaming(): boolean;
			/**[Obsolete]--"graphicsPixelFillrate is no longer supported in Unity 5.0+." */
			static get graphicsPixelFillrate(): number;
			/**[Obsolete]--"Vertex program support is required in Unity 5.0+" */
			static get supportsVertexPrograms(): boolean;
			constructor();
			static SupportsRenderTextureFormat(format: UnityEngine.RenderTextureFormat): boolean;
			static SupportsBlendingOnRenderTextureFormat(format: UnityEngine.RenderTextureFormat): boolean;
			static SupportsTextureFormat(format: UnityEngine.TextureFormat): boolean;
			static IsFormatSupported(format: any, usage: any): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TextAsset extends UnityEngine.Object {
			get text(): string;
			get bytes(): Uint8Array;
			constructor();
			constructor(text: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Texture extends UnityEngine.Object {
			static get masterTextureLimit(): number;
			static set masterTextureLimit(value: number);
			static get anisotropicFiltering(): UnityEngine.AnisotropicFiltering;
			static set anisotropicFiltering(value: UnityEngine.AnisotropicFiltering);
			get width(): number;
			set width(value: number);
			get height(): number;
			set height(value: number);
			get dimension(): any;
			set dimension(value: any);
			get isReadable(): boolean;
			get wrapMode(): UnityEngine.TextureWrapMode;
			set wrapMode(value: UnityEngine.TextureWrapMode);
			get wrapModeU(): UnityEngine.TextureWrapMode;
			set wrapModeU(value: UnityEngine.TextureWrapMode);
			get wrapModeV(): UnityEngine.TextureWrapMode;
			set wrapModeV(value: UnityEngine.TextureWrapMode);
			get wrapModeW(): UnityEngine.TextureWrapMode;
			set wrapModeW(value: UnityEngine.TextureWrapMode);
			get filterMode(): UnityEngine.FilterMode;
			set filterMode(value: UnityEngine.FilterMode);
			get anisoLevel(): number;
			set anisoLevel(value: number);
			get mipMapBias(): number;
			set mipMapBias(value: number);
			get texelSize(): UnityEngine.Vector2;
			get updateCount(): number;
			get imageContentsHash(): UnityEngine.Hash128;
			set imageContentsHash(value: UnityEngine.Hash128);
			static get totalTextureMemory(): number;
			static get desiredTextureMemory(): number;
			static get targetTextureMemory(): number;
			static get currentTextureMemory(): number;
			static get nonStreamingTextureMemory(): number;
			static get streamingMipmapUploadCount(): number;
			static get streamingRendererCount(): number;
			static get streamingTextureCount(): number;
			static get nonStreamingTextureCount(): number;
			static get streamingTexturePendingLoadCount(): number;
			static get streamingTextureLoadingCount(): number;
			static get streamingTextureForceLoadAll(): boolean;
			static set streamingTextureForceLoadAll(value: boolean);
			static get streamingTextureDiscardUnusedMips(): boolean;
			static set streamingTextureDiscardUnusedMips(value: boolean);
			static SetGlobalAnisotropicFilteringLimits(forcedMin: number, globalMax: number): void;
			static SetStreamingTextureMaterialDebugProperties(): void;
			GetNativeTexturePtr(): System.IntPtr;
			/**[Obsolete]--"Use GetNativeTexturePtr instead." */
			GetNativeTextureID(): number;
			IncrementUpdateCount(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Texture2D extends UnityEngine.Texture {
			get mipmapCount(): number;
			get format(): UnityEngine.TextureFormat;
			static get whiteTexture(): UnityEngine.Texture2D;
			static get blackTexture(): UnityEngine.Texture2D;
			get isReadable(): boolean;
			get streamingMipmaps(): boolean;
			get streamingMipmapsPriority(): number;
			get requestedMipmapLevel(): number;
			set requestedMipmapLevel(value: number);
			get desiredMipmapLevel(): number;
			get loadingMipmapLevel(): number;
			get loadedMipmapLevel(): number;
			get alphaIsTransparency(): boolean;
			set alphaIsTransparency(value: boolean);
			constructor(width: number, height: number, format: any, flags: any);
			constructor(width: number, height: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean, linear: boolean);
			constructor(width: number, height: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean);
			constructor(width: number, height: number);
			static CreateExternalTexture(width: number, height: number, format: UnityEngine.TextureFormat, mipChain: boolean, linear: boolean, nativeTex: System.IntPtr): UnityEngine.Texture2D;
			static GenerateAtlas(sizes: UnityEngine.Vector2[], padding: number, atlasSize: number, results: any): boolean;
			Compress(highQuality: boolean): void;
			ClearRequestedMipmapLevel(): void;
			IsRequestedMipmapLevelLoaded(): boolean;
			UpdateExternalTexture(nativeTex: System.IntPtr): void;
			GetRawTextureData(): Uint8Array;
			GetPixels(x: number, y: number, blockWidth: number, blockHeight: number, miplevel: number): UnityEngine.Color[];
			GetPixels(x: number, y: number, blockWidth: number, blockHeight: number): UnityEngine.Color[];
			GetPixels(miplevel: number): UnityEngine.Color[];
			GetPixels(): UnityEngine.Color[];
			GetPixels32(miplevel: number): UnityEngine.Color32[];
			GetPixels32(): UnityEngine.Color32[];
			PackTextures(textures: UnityEngine.Texture2D[], padding: number, maximumAtlasSize: number, makeNoLongerReadable: boolean): UnityEngine.Rect[];
			PackTextures(textures: UnityEngine.Texture2D[], padding: number, maximumAtlasSize: number): UnityEngine.Rect[];
			PackTextures(textures: UnityEngine.Texture2D[], padding: number): UnityEngine.Rect[];
			SetPixel(x: number, y: number, color: UnityEngine.Color): void;
			SetPixels(x: number, y: number, blockWidth: number, blockHeight: number, colors: UnityEngine.Color[], miplevel: number): void;
			SetPixels(x: number, y: number, blockWidth: number, blockHeight: number, colors: UnityEngine.Color[]): void;
			SetPixels(colors: UnityEngine.Color[], miplevel: number): void;
			SetPixels(colors: UnityEngine.Color[]): void;
			GetPixel(x: number, y: number): UnityEngine.Color;
			GetPixelBilinear(x: number, y: number): UnityEngine.Color;
			LoadRawTextureData(data: System.IntPtr, size: number): void;
			LoadRawTextureData(data: Uint8Array): void;
			Apply(updateMipmaps: boolean, makeNoLongerReadable: boolean): void;
			Apply(updateMipmaps: boolean): void;
			Apply(): void;
			Resize(width: number, height: number): boolean;
			Resize(width: number, height: number, format: UnityEngine.TextureFormat, hasMipMap: boolean): boolean;
			ReadPixels(source: UnityEngine.Rect, destX: number, destY: number, recalculateMipMaps: boolean): void;
			ReadPixels(source: UnityEngine.Rect, destX: number, destY: number): void;
			SetPixels32(colors: UnityEngine.Color32[], miplevel: number): void;
			SetPixels32(colors: UnityEngine.Color32[]): void;
			SetPixels32(x: number, y: number, blockWidth: number, blockHeight: number, colors: UnityEngine.Color32[], miplevel: number): void;
			SetPixels32(x: number, y: number, blockWidth: number, blockHeight: number, colors: UnityEngine.Color32[]): void;
			/**extension method */
			EncodeToTGA(): Uint8Array;
			/**extension method */
			EncodeToPNG(): Uint8Array;
			/**extension method */
			EncodeToJPG(quality: number): Uint8Array;
			/**extension method */
			EncodeToJPG(): Uint8Array;
			/**extension method */
			EncodeToEXR(flags: UnityEngine.Texture2D.EXRFlags): Uint8Array;
			/**extension method */
			EncodeToEXR(): Uint8Array;
			/**extension method */
			LoadImage(data: Uint8Array, markNonReadable: boolean): boolean;
			/**extension method */
			LoadImage(data: Uint8Array): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Cubemap extends UnityEngine.Texture {
			get mipmapCount(): number;
			get format(): UnityEngine.TextureFormat;
			get isReadable(): boolean;
			constructor(width: number, format: any, flags: any);
			constructor(width: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean);
			static CreateExternalTexture(width: number, format: UnityEngine.TextureFormat, mipmap: boolean, nativeTex: System.IntPtr): UnityEngine.Cubemap;
			SmoothEdges(smoothRegionWidthInPixels: number): void;
			SmoothEdges(): void;
			GetPixels(face: UnityEngine.CubemapFace, miplevel: number): UnityEngine.Color[];
			GetPixels(face: UnityEngine.CubemapFace): UnityEngine.Color[];
			SetPixels(colors: UnityEngine.Color[], face: UnityEngine.CubemapFace, miplevel: number): void;
			SetPixels(colors: UnityEngine.Color[], face: UnityEngine.CubemapFace): void;
			SetPixel(face: UnityEngine.CubemapFace, x: number, y: number, color: UnityEngine.Color): void;
			GetPixel(face: UnityEngine.CubemapFace, x: number, y: number): UnityEngine.Color;
			Apply(updateMipmaps: boolean, makeNoLongerReadable: boolean): void;
			Apply(updateMipmaps: boolean): void;
			Apply(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Texture3D extends UnityEngine.Texture {
			get depth(): number;
			get format(): UnityEngine.TextureFormat;
			get isReadable(): boolean;
			constructor(width: number, height: number, depth: number, format: any, flags: any);
			constructor(width: number, height: number, depth: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean);
			GetPixels(miplevel: number): UnityEngine.Color[];
			GetPixels(): UnityEngine.Color[];
			GetPixels32(miplevel: number): UnityEngine.Color32[];
			GetPixels32(): UnityEngine.Color32[];
			SetPixels(colors: UnityEngine.Color[], miplevel: number): void;
			SetPixels(colors: UnityEngine.Color[]): void;
			SetPixels32(colors: UnityEngine.Color32[], miplevel: number): void;
			SetPixels32(colors: UnityEngine.Color32[]): void;
			Apply(updateMipmaps: boolean, makeNoLongerReadable: boolean): void;
			Apply(updateMipmaps: boolean): void;
			Apply(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Texture2DArray extends UnityEngine.Texture {
			get depth(): number;
			get format(): UnityEngine.TextureFormat;
			get isReadable(): boolean;
			constructor(width: number, height: number, depth: number, format: any, flags: any);
			constructor(width: number, height: number, depth: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean, linear: boolean);
			constructor(width: number, height: number, depth: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean);
			GetPixels(arrayElement: number, miplevel: number): UnityEngine.Color[];
			GetPixels(arrayElement: number): UnityEngine.Color[];
			GetPixels32(arrayElement: number, miplevel: number): UnityEngine.Color32[];
			GetPixels32(arrayElement: number): UnityEngine.Color32[];
			SetPixels(colors: UnityEngine.Color[], arrayElement: number, miplevel: number): void;
			SetPixels(colors: UnityEngine.Color[], arrayElement: number): void;
			SetPixels32(colors: UnityEngine.Color32[], arrayElement: number, miplevel: number): void;
			SetPixels32(colors: UnityEngine.Color32[], arrayElement: number): void;
			Apply(updateMipmaps: boolean, makeNoLongerReadable: boolean): void;
			Apply(updateMipmaps: boolean): void;
			Apply(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CubemapArray extends UnityEngine.Texture {
			get cubemapCount(): number;
			get format(): UnityEngine.TextureFormat;
			get isReadable(): boolean;
			constructor(width: number, cubemapCount: number, format: any, flags: any);
			constructor(width: number, cubemapCount: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean, linear: boolean);
			constructor(width: number, cubemapCount: number, textureFormat: UnityEngine.TextureFormat, mipChain: boolean);
			GetPixels(face: UnityEngine.CubemapFace, arrayElement: number, miplevel: number): UnityEngine.Color[];
			GetPixels(face: UnityEngine.CubemapFace, arrayElement: number): UnityEngine.Color[];
			GetPixels32(face: UnityEngine.CubemapFace, arrayElement: number, miplevel: number): UnityEngine.Color32[];
			GetPixels32(face: UnityEngine.CubemapFace, arrayElement: number): UnityEngine.Color32[];
			SetPixels(colors: UnityEngine.Color[], face: UnityEngine.CubemapFace, arrayElement: number, miplevel: number): void;
			SetPixels(colors: UnityEngine.Color[], face: UnityEngine.CubemapFace, arrayElement: number): void;
			SetPixels32(colors: UnityEngine.Color32[], face: UnityEngine.CubemapFace, arrayElement: number, miplevel: number): void;
			SetPixels32(colors: UnityEngine.Color32[], face: UnityEngine.CubemapFace, arrayElement: number): void;
			Apply(updateMipmaps: boolean, makeNoLongerReadable: boolean): void;
			Apply(updateMipmaps: boolean): void;
			Apply(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SparseTexture extends UnityEngine.Texture {
			get tileWidth(): number;
			get tileHeight(): number;
			get isCreated(): boolean;
			constructor(width: number, height: number, format: any, mipCount: number);
			constructor(width: number, height: number, format: UnityEngine.TextureFormat, mipCount: number);
			constructor(width: number, height: number, format: UnityEngine.TextureFormat, mipCount: number, linear: boolean);
			UpdateTile(tileX: number, tileY: number, miplevel: number, data: UnityEngine.Color32[]): void;
			UpdateTileRaw(tileX: number, tileY: number, miplevel: number, data: Uint8Array): void;
			UnloadTile(tileX: number, tileY: number, miplevel: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RenderTexture extends UnityEngine.Texture {
			get width(): number;
			set width(value: number);
			get height(): number;
			set height(value: number);
			get dimension(): any;
			set dimension(value: any);
			get useMipMap(): boolean;
			set useMipMap(value: boolean);
			get sRGB(): boolean;
			get format(): UnityEngine.RenderTextureFormat;
			set format(value: UnityEngine.RenderTextureFormat);
			get vrUsage(): UnityEngine.VRTextureUsage;
			set vrUsage(value: UnityEngine.VRTextureUsage);
			get memorylessMode(): UnityEngine.RenderTextureMemoryless;
			set memorylessMode(value: UnityEngine.RenderTextureMemoryless);
			get autoGenerateMips(): boolean;
			set autoGenerateMips(value: boolean);
			get volumeDepth(): number;
			set volumeDepth(value: number);
			get antiAliasing(): number;
			set antiAliasing(value: number);
			get bindTextureMS(): boolean;
			set bindTextureMS(value: boolean);
			get enableRandomWrite(): boolean;
			set enableRandomWrite(value: boolean);
			get useDynamicScale(): boolean;
			set useDynamicScale(value: boolean);
			get isPowerOfTwo(): boolean;
			set isPowerOfTwo(value: boolean);
			static get active(): UnityEngine.RenderTexture;
			static set active(value: UnityEngine.RenderTexture);
			get colorBuffer(): UnityEngine.RenderBuffer;
			get depthBuffer(): UnityEngine.RenderBuffer;
			get depth(): number;
			set depth(value: number);
			get descriptor(): UnityEngine.RenderTextureDescriptor;
			set descriptor(value: UnityEngine.RenderTextureDescriptor);
			/**[Obsolete]--"Use RenderTexture.autoGenerateMips instead (UnityUpgradable) -> autoGenerateMips" */
			get generateMips(): boolean;
			/**[Obsolete]--"Use RenderTexture.autoGenerateMips instead (UnityUpgradable) -> autoGenerateMips" */
			set generateMips(value: boolean);
			/**[Obsolete]--"Use RenderTexture.dimension instead." */
			get isCubemap(): boolean;
			/**[Obsolete]--"Use RenderTexture.dimension instead." */
			set isCubemap(value: boolean);
			/**[Obsolete]--"Use RenderTexture.dimension instead." */
			get isVolume(): boolean;
			/**[Obsolete]--"Use RenderTexture.dimension instead." */
			set isVolume(value: boolean);
			/**[Obsolete]--"RenderTexture.enabled is always now, no need to use it." */
			static get enabled(): boolean;
			/**[Obsolete]--"RenderTexture.enabled is always now, no need to use it." */
			static set enabled(value: boolean);
			constructor(desc: UnityEngine.RenderTextureDescriptor);
			constructor(textureToCopy: UnityEngine.RenderTexture);
			constructor(width: number, height: number, depth: number, format: any);
			constructor(width: number, height: number, depth: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite);
			constructor(width: number, height: number, depth: number, format: UnityEngine.RenderTextureFormat);
			constructor(width: number, height: number, depth: number);
			static SupportsStencil(rt: UnityEngine.RenderTexture): boolean;
			static ReleaseTemporary(temp: UnityEngine.RenderTexture): void;
			static GetTemporary(desc: UnityEngine.RenderTextureDescriptor): UnityEngine.RenderTexture;
			static GetTemporary(width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, memorylessMode: UnityEngine.RenderTextureMemoryless, vrUsage: UnityEngine.VRTextureUsage, useDynamicScale: boolean): UnityEngine.RenderTexture;
			static GetTemporary(width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, memorylessMode: UnityEngine.RenderTextureMemoryless, vrUsage: UnityEngine.VRTextureUsage): UnityEngine.RenderTexture;
			static GetTemporary(width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, memorylessMode: UnityEngine.RenderTextureMemoryless): UnityEngine.RenderTexture;
			static GetTemporary(width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number): UnityEngine.RenderTexture;
			static GetTemporary(width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite): UnityEngine.RenderTexture;
			static GetTemporary(width: number, height: number, depthBuffer: number, format: UnityEngine.RenderTextureFormat): UnityEngine.RenderTexture;
			static GetTemporary(width: number, height: number, depthBuffer: number): UnityEngine.RenderTexture;
			static GetTemporary(width: number, height: number): UnityEngine.RenderTexture;
			GetNativeDepthBufferPtr(): System.IntPtr;
			DiscardContents(discardColor: boolean, discardDepth: boolean): void;
			DiscardContents(): void;
			MarkRestoreExpected(): void;
			ResolveAntiAliasedSurface(): void;
			ResolveAntiAliasedSurface(target: UnityEngine.RenderTexture): void;
			SetGlobalShaderProperty(propertyName: string): void;
			Create(): boolean;
			Release(): void;
			IsCreated(): boolean;
			GenerateMips(): void;
			ConvertToEquirect(equirect: UnityEngine.RenderTexture, eye?: UnityEngine.Camera.MonoOrStereoscopicEye): void;
			/**[Obsolete][Error]--"UsSetBorderColor is no longer supported." */
			SetBorderColor(color: UnityEngine.Color): void;
			/**[Obsolete]--"GetTexelOffset always returns zero now, no point in using it." */
			GetTexelOffset(): UnityEngine.Vector2;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CustomRenderTextureUpdateZone {
			updateZoneCenter: UnityEngine.Vector3;
			updateZoneSize: UnityEngine.Vector3;
			rotation: number;
			passIndex: number;
			needSwap: boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CustomRenderTexture extends UnityEngine.RenderTexture {
			get material(): UnityEngine.Material;
			set material(value: UnityEngine.Material);
			get initializationMaterial(): UnityEngine.Material;
			set initializationMaterial(value: UnityEngine.Material);
			get initializationTexture(): UnityEngine.Texture;
			set initializationTexture(value: UnityEngine.Texture);
			get initializationSource(): UnityEngine.CustomRenderTextureInitializationSource;
			set initializationSource(value: UnityEngine.CustomRenderTextureInitializationSource);
			get initializationColor(): UnityEngine.Color;
			set initializationColor(value: UnityEngine.Color);
			get updateMode(): UnityEngine.CustomRenderTextureUpdateMode;
			set updateMode(value: UnityEngine.CustomRenderTextureUpdateMode);
			get initializationMode(): UnityEngine.CustomRenderTextureUpdateMode;
			set initializationMode(value: UnityEngine.CustomRenderTextureUpdateMode);
			get updateZoneSpace(): UnityEngine.CustomRenderTextureUpdateZoneSpace;
			set updateZoneSpace(value: UnityEngine.CustomRenderTextureUpdateZoneSpace);
			get shaderPass(): number;
			set shaderPass(value: number);
			get cubemapFaceMask(): number;
			set cubemapFaceMask(value: number);
			get doubleBuffered(): boolean;
			set doubleBuffered(value: boolean);
			get wrapUpdateZones(): boolean;
			set wrapUpdateZones(value: boolean);
			constructor(width: number, height: number, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite);
			constructor(width: number, height: number, format: UnityEngine.RenderTextureFormat);
			constructor(width: number, height: number);
			constructor(width: number, height: number, format: any);
			Update(count: number): void;
			Update(): void;
			Initialize(): void;
			ClearUpdateZones(): void;
			GetUpdateZones(updateZones: any): void;
			SetUpdateZones(updateZones: UnityEngine.CustomRenderTextureUpdateZone[]): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RenderTextureDescriptor {
			get width(): number;
			set width(value: number);
			get height(): number;
			set height(value: number);
			get msaaSamples(): number;
			set msaaSamples(value: number);
			get volumeDepth(): number;
			set volumeDepth(value: number);
			get colorFormat(): UnityEngine.RenderTextureFormat;
			set colorFormat(value: UnityEngine.RenderTextureFormat);
			get depthBufferBits(): number;
			set depthBufferBits(value: number);
			get dimension(): any;
			set dimension(value: any);
			get shadowSamplingMode(): any;
			set shadowSamplingMode(value: any);
			get vrUsage(): UnityEngine.VRTextureUsage;
			set vrUsage(value: UnityEngine.VRTextureUsage);
			get flags(): UnityEngine.RenderTextureCreationFlags;
			get memoryless(): UnityEngine.RenderTextureMemoryless;
			set memoryless(value: UnityEngine.RenderTextureMemoryless);
			get sRGB(): boolean;
			set sRGB(value: boolean);
			get useMipMap(): boolean;
			set useMipMap(value: boolean);
			get autoGenerateMips(): boolean;
			set autoGenerateMips(value: boolean);
			get enableRandomWrite(): boolean;
			set enableRandomWrite(value: boolean);
			get bindMS(): boolean;
			set bindMS(value: boolean);
			constructor(width: number, height: number);
			constructor(width: number, height: number, colorFormat: UnityEngine.RenderTextureFormat);
			constructor(width: number, height: number, colorFormat: UnityEngine.RenderTextureFormat, depthBufferBits: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Time extends System.Object {
			static get time(): number;
			static get timeSinceLevelLoad(): number;
			static get deltaTime(): number;
			static get fixedTime(): number;
			static get unscaledTime(): number;
			static get fixedUnscaledTime(): number;
			static get unscaledDeltaTime(): number;
			static get fixedUnscaledDeltaTime(): number;
			static get fixedDeltaTime(): number;
			static set fixedDeltaTime(value: number);
			static get maximumDeltaTime(): number;
			static set maximumDeltaTime(value: number);
			static get smoothDeltaTime(): number;
			static get maximumParticleDeltaTime(): number;
			static set maximumParticleDeltaTime(value: number);
			static get timeScale(): number;
			static set timeScale(value: number);
			static get frameCount(): number;
			static get renderedFrameCount(): number;
			static get realtimeSinceStartup(): number;
			static get captureFramerate(): number;
			static set captureFramerate(value: number);
			static get inFixedTimeStep(): boolean;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum TouchScreenKeyboardType { Default = 0, ASCIICapable = 1, NumbersAndPunctuation = 2, URL = 3, NumberPad = 4, PhonePad = 5, NamePhonePad = 6, EmailAddress = 7, NintendoNetworkAccount = 8, Social = 9, Search = 10, }
		export class TrackedReference extends System.Object {
			static op_Equality(x: UnityEngine.TrackedReference, y: UnityEngine.TrackedReference): boolean;
			static op_Inequality(x: UnityEngine.TrackedReference, y: UnityEngine.TrackedReference): boolean;
			static op_Implicit(exists: UnityEngine.TrackedReference): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnityAPICompatibilityVersionAttribute extends System.Attribute {
			get version(): string;
			constructor(version: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum HideFlags { None = 0, HideInHierarchy = 1, HideInInspector = 2, DontSaveInEditor = 4, NotEditable = 8, DontSaveInBuild = 16, DontUnloadUnusedAsset = 32, DontSave = 52, HideAndDontSave = 61, }
		export class Object extends System.Object {
			get name(): string;
			set name(value: string);
			get hideFlags(): UnityEngine.HideFlags;
			set hideFlags(value: UnityEngine.HideFlags);
			constructor();
			static op_Implicit(exists: any): boolean;
			static Instantiate(original: any, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): any;
			static Instantiate(original: any, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, parent: UnityEngine.Transform): any;
			static Instantiate(original: any): any;
			static Instantiate(original: any, parent: UnityEngine.Transform): any;
			static Instantiate(original: any, parent: UnityEngine.Transform, instantiateInWorldSpace: boolean): any;
			static Destroy(obj: any, t: number): void;
			static Destroy(obj: any): void;
			static DestroyImmediate(obj: any, allowDestroyingAssets: boolean): void;
			static DestroyImmediate(obj: any): void;
			static FindObjectsOfType(type: System.Type): any;
			static DontDestroyOnLoad(target: any): void;
			/**[Obsolete]--"use Object.Destroy instead." */
			static DestroyObject(obj: any, t: number): void;
			/**[Obsolete]--"use Object.Destroy instead." */
			static DestroyObject(obj: any): void;
			/**[Obsolete]--"warning use Object.FindObjectsOfType instead." */
			static FindSceneObjectsOfType(type: System.Type): any;
			/**[Obsolete]--"use Resources.FindObjectsOfTypeAll instead." */
			static FindObjectsOfTypeIncludingAssets(type: System.Type): any;
			static FindObjectOfType(type: System.Type): any;
			/**[Obsolete]--"Please use Resources.FindObjectsOfTypeAll instead" */
			static FindObjectsOfTypeAll(type: System.Type): any;
			static op_Equality(x: any, y: any): boolean;
			static op_Inequality(x: any, y: any): boolean;
			GetInstanceID(): number;
			/**extension method */
			IsNull(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnityEventQueueSystem extends System.Object {
			constructor();
			static GenerateEventIdForPayload(eventPayloadName: string): string;
			static GetGlobalEventQueue(): System.IntPtr;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Vector2 {
			x: number;
			y: number;
			static kEpsilon: number;
			static kEpsilonNormalSqrt: number;
			get normalized(): UnityEngine.Vector2;
			get magnitude(): number;
			get sqrMagnitude(): number;
			static get zero(): UnityEngine.Vector2;
			static get one(): UnityEngine.Vector2;
			static get up(): UnityEngine.Vector2;
			static get down(): UnityEngine.Vector2;
			static get left(): UnityEngine.Vector2;
			static get right(): UnityEngine.Vector2;
			static get positiveInfinity(): UnityEngine.Vector2;
			static get negativeInfinity(): UnityEngine.Vector2;
			constructor(x: number, y: number);
			static Lerp(a: UnityEngine.Vector2, b: UnityEngine.Vector2, t: number): UnityEngine.Vector2;
			static LerpUnclamped(a: UnityEngine.Vector2, b: UnityEngine.Vector2, t: number): UnityEngine.Vector2;
			static MoveTowards(current: UnityEngine.Vector2, target: UnityEngine.Vector2, maxDistanceDelta: number): UnityEngine.Vector2;
			static Scale(a: UnityEngine.Vector2, b: UnityEngine.Vector2): UnityEngine.Vector2;
			Scale(scale: UnityEngine.Vector2): void;
			static Reflect(inDirection: UnityEngine.Vector2, inNormal: UnityEngine.Vector2): UnityEngine.Vector2;
			static Perpendicular(inDirection: UnityEngine.Vector2): UnityEngine.Vector2;
			static Dot(lhs: UnityEngine.Vector2, rhs: UnityEngine.Vector2): number;
			static Angle(from: UnityEngine.Vector2, to: UnityEngine.Vector2): number;
			static SignedAngle(from: UnityEngine.Vector2, to: UnityEngine.Vector2): number;
			static Distance(a: UnityEngine.Vector2, b: UnityEngine.Vector2): number;
			static ClampMagnitude(vector: UnityEngine.Vector2, maxLength: number): UnityEngine.Vector2;
			static SqrMagnitude(a: UnityEngine.Vector2): number;
			SqrMagnitude(): number;
			static Min(lhs: UnityEngine.Vector2, rhs: UnityEngine.Vector2): UnityEngine.Vector2;
			static Max(lhs: UnityEngine.Vector2, rhs: UnityEngine.Vector2): UnityEngine.Vector2;
			static SmoothDamp(current: UnityEngine.Vector2, target: UnityEngine.Vector2, currentVelocity: any, smoothTime: number, maxSpeed: number): UnityEngine.Vector2;
			static SmoothDamp(current: UnityEngine.Vector2, target: UnityEngine.Vector2, currentVelocity: any, smoothTime: number): UnityEngine.Vector2;
			static SmoothDamp(current: UnityEngine.Vector2, target: UnityEngine.Vector2, currentVelocity: any, smoothTime: number, maxSpeed: number, deltaTime: number): UnityEngine.Vector2;
			static op_Addition(a: UnityEngine.Vector2, b: UnityEngine.Vector2): UnityEngine.Vector2;
			static op_Subtraction(a: UnityEngine.Vector2, b: UnityEngine.Vector2): UnityEngine.Vector2;
			static op_Multiply(a: UnityEngine.Vector2, b: UnityEngine.Vector2): UnityEngine.Vector2;
			static op_Multiply(a: UnityEngine.Vector2, d: number): UnityEngine.Vector2;
			static op_Multiply(d: number, a: UnityEngine.Vector2): UnityEngine.Vector2;
			static op_Division(a: UnityEngine.Vector2, b: UnityEngine.Vector2): UnityEngine.Vector2;
			static op_Division(a: UnityEngine.Vector2, d: number): UnityEngine.Vector2;
			static op_UnaryNegation(a: UnityEngine.Vector2): UnityEngine.Vector2;
			static op_Equality(lhs: UnityEngine.Vector2, rhs: UnityEngine.Vector2): boolean;
			static op_Inequality(lhs: UnityEngine.Vector2, rhs: UnityEngine.Vector2): boolean;
			static op_Implicit(v: UnityEngine.Vector3): UnityEngine.Vector2;
			static op_Implicit(v: UnityEngine.Vector2): UnityEngine.Vector3;
			Set(newX: number, newY: number): void;
			Normalize(): void;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.Vector2): boolean;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Vector2Int {
			get x(): number;
			set x(value: number);
			get y(): number;
			set y(value: number);
			get magnitude(): number;
			get sqrMagnitude(): number;
			static get zero(): UnityEngine.Vector2Int;
			static get one(): UnityEngine.Vector2Int;
			static get up(): UnityEngine.Vector2Int;
			static get down(): UnityEngine.Vector2Int;
			static get left(): UnityEngine.Vector2Int;
			static get right(): UnityEngine.Vector2Int;
			constructor(x: number, y: number);
			static Distance(a: UnityEngine.Vector2Int, b: UnityEngine.Vector2Int): number;
			static Min(lhs: UnityEngine.Vector2Int, rhs: UnityEngine.Vector2Int): UnityEngine.Vector2Int;
			static Max(lhs: UnityEngine.Vector2Int, rhs: UnityEngine.Vector2Int): UnityEngine.Vector2Int;
			static Scale(a: UnityEngine.Vector2Int, b: UnityEngine.Vector2Int): UnityEngine.Vector2Int;
			Scale(scale: UnityEngine.Vector2Int): void;
			static op_Implicit(v: UnityEngine.Vector2Int): UnityEngine.Vector2;
			static op_Explicit(v: UnityEngine.Vector2Int): UnityEngine.Vector3Int;
			static FloorToInt(v: UnityEngine.Vector2): UnityEngine.Vector2Int;
			static CeilToInt(v: UnityEngine.Vector2): UnityEngine.Vector2Int;
			static RoundToInt(v: UnityEngine.Vector2): UnityEngine.Vector2Int;
			static op_Addition(a: UnityEngine.Vector2Int, b: UnityEngine.Vector2Int): UnityEngine.Vector2Int;
			static op_Subtraction(a: UnityEngine.Vector2Int, b: UnityEngine.Vector2Int): UnityEngine.Vector2Int;
			static op_Multiply(a: UnityEngine.Vector2Int, b: UnityEngine.Vector2Int): UnityEngine.Vector2Int;
			static op_Multiply(a: UnityEngine.Vector2Int, b: number): UnityEngine.Vector2Int;
			static op_Equality(lhs: UnityEngine.Vector2Int, rhs: UnityEngine.Vector2Int): boolean;
			static op_Inequality(lhs: UnityEngine.Vector2Int, rhs: UnityEngine.Vector2Int): boolean;
			Set(x: number, y: number): void;
			Clamp(min: UnityEngine.Vector2Int, max: UnityEngine.Vector2Int): void;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.Vector2Int): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Vector3Int {
			get x(): number;
			set x(value: number);
			get y(): number;
			set y(value: number);
			get z(): number;
			set z(value: number);
			get magnitude(): number;
			get sqrMagnitude(): number;
			static get zero(): UnityEngine.Vector3Int;
			static get one(): UnityEngine.Vector3Int;
			static get up(): UnityEngine.Vector3Int;
			static get down(): UnityEngine.Vector3Int;
			static get left(): UnityEngine.Vector3Int;
			static get right(): UnityEngine.Vector3Int;
			constructor(x: number, y: number, z: number);
			static Distance(a: UnityEngine.Vector3Int, b: UnityEngine.Vector3Int): number;
			static Min(lhs: UnityEngine.Vector3Int, rhs: UnityEngine.Vector3Int): UnityEngine.Vector3Int;
			static Max(lhs: UnityEngine.Vector3Int, rhs: UnityEngine.Vector3Int): UnityEngine.Vector3Int;
			static Scale(a: UnityEngine.Vector3Int, b: UnityEngine.Vector3Int): UnityEngine.Vector3Int;
			Scale(scale: UnityEngine.Vector3Int): void;
			static op_Implicit(v: UnityEngine.Vector3Int): UnityEngine.Vector3;
			static op_Explicit(v: UnityEngine.Vector3Int): UnityEngine.Vector2Int;
			static FloorToInt(v: UnityEngine.Vector3): UnityEngine.Vector3Int;
			static CeilToInt(v: UnityEngine.Vector3): UnityEngine.Vector3Int;
			static RoundToInt(v: UnityEngine.Vector3): UnityEngine.Vector3Int;
			static op_Addition(a: UnityEngine.Vector3Int, b: UnityEngine.Vector3Int): UnityEngine.Vector3Int;
			static op_Subtraction(a: UnityEngine.Vector3Int, b: UnityEngine.Vector3Int): UnityEngine.Vector3Int;
			static op_Multiply(a: UnityEngine.Vector3Int, b: UnityEngine.Vector3Int): UnityEngine.Vector3Int;
			static op_Multiply(a: UnityEngine.Vector3Int, b: number): UnityEngine.Vector3Int;
			static op_Equality(lhs: UnityEngine.Vector3Int, rhs: UnityEngine.Vector3Int): boolean;
			static op_Inequality(lhs: UnityEngine.Vector3Int, rhs: UnityEngine.Vector3Int): boolean;
			Set(x: number, y: number, z: number): void;
			Clamp(min: UnityEngine.Vector3Int, max: UnityEngine.Vector3Int): void;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.Vector3Int): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Vector4 {
			static kEpsilon: number;
			x: number;
			y: number;
			z: number;
			w: number;
			get normalized(): UnityEngine.Vector4;
			get magnitude(): number;
			get sqrMagnitude(): number;
			static get zero(): UnityEngine.Vector4;
			static get one(): UnityEngine.Vector4;
			static get positiveInfinity(): UnityEngine.Vector4;
			static get negativeInfinity(): UnityEngine.Vector4;
			constructor(x: number, y: number, z: number, w: number);
			constructor(x: number, y: number, z: number);
			constructor(x: number, y: number);
			static Lerp(a: UnityEngine.Vector4, b: UnityEngine.Vector4, t: number): UnityEngine.Vector4;
			static LerpUnclamped(a: UnityEngine.Vector4, b: UnityEngine.Vector4, t: number): UnityEngine.Vector4;
			static MoveTowards(current: UnityEngine.Vector4, target: UnityEngine.Vector4, maxDistanceDelta: number): UnityEngine.Vector4;
			static Scale(a: UnityEngine.Vector4, b: UnityEngine.Vector4): UnityEngine.Vector4;
			Scale(scale: UnityEngine.Vector4): void;
			static Normalize(a: UnityEngine.Vector4): UnityEngine.Vector4;
			Normalize(): void;
			static Dot(a: UnityEngine.Vector4, b: UnityEngine.Vector4): number;
			static Project(a: UnityEngine.Vector4, b: UnityEngine.Vector4): UnityEngine.Vector4;
			static Distance(a: UnityEngine.Vector4, b: UnityEngine.Vector4): number;
			static Magnitude(a: UnityEngine.Vector4): number;
			static Min(lhs: UnityEngine.Vector4, rhs: UnityEngine.Vector4): UnityEngine.Vector4;
			static Max(lhs: UnityEngine.Vector4, rhs: UnityEngine.Vector4): UnityEngine.Vector4;
			static op_Addition(a: UnityEngine.Vector4, b: UnityEngine.Vector4): UnityEngine.Vector4;
			static op_Subtraction(a: UnityEngine.Vector4, b: UnityEngine.Vector4): UnityEngine.Vector4;
			static op_UnaryNegation(a: UnityEngine.Vector4): UnityEngine.Vector4;
			static op_Multiply(a: UnityEngine.Vector4, d: number): UnityEngine.Vector4;
			static op_Multiply(d: number, a: UnityEngine.Vector4): UnityEngine.Vector4;
			static op_Division(a: UnityEngine.Vector4, d: number): UnityEngine.Vector4;
			static op_Equality(lhs: UnityEngine.Vector4, rhs: UnityEngine.Vector4): boolean;
			static op_Inequality(lhs: UnityEngine.Vector4, rhs: UnityEngine.Vector4): boolean;
			static op_Implicit(v: UnityEngine.Vector3): UnityEngine.Vector4;
			static op_Implicit(v: UnityEngine.Vector4): UnityEngine.Vector3;
			static op_Implicit(v: UnityEngine.Vector2): UnityEngine.Vector4;
			static op_Implicit(v: UnityEngine.Vector4): UnityEngine.Vector2;
			static SqrMagnitude(a: UnityEngine.Vector4): number;
			SqrMagnitude(): number;
			Set(newX: number, newY: number, newZ: number, newW: number): void;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.Vector4): boolean;
			/**inherited method */
			ToString(): string;
			ToString(format: string): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WaitForEndOfFrame extends UnityEngine.YieldInstruction {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WaitForFixedUpdate extends UnityEngine.YieldInstruction {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WaitForSeconds extends UnityEngine.YieldInstruction {
			constructor(seconds: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WaitForSecondsRealtime extends UnityEngine.CustomYieldInstruction {
			get waitTime(): number;
			set waitTime(value: number);
			get keepWaiting(): boolean;
			constructor(time: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WaitUntil extends UnityEngine.CustomYieldInstruction {
			get keepWaiting(): boolean;
			constructor(predicate: System.Func$1);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WaitWhile extends UnityEngine.CustomYieldInstruction {
			get keepWaiting(): boolean;
			constructor(predicate: System.Func$1);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class YieldInstruction extends System.Object {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DynamicGI extends System.Object {
			static get indirectScale(): number;
			static set indirectScale(value: number);
			static get updateThreshold(): number;
			static set updateThreshold(value: number);
			static get materialUpdateTimeSlice(): number;
			static set materialUpdateTimeSlice(value: number);
			static get synchronousMode(): boolean;
			static set synchronousMode(value: boolean);
			static get isConverged(): boolean;
			constructor();
			static SetEmissive(renderer: UnityEngine.Renderer, color: UnityEngine.Color): void;
			static SetEnvironmentData(input: number[]): void;
			static UpdateEnvironment(): void;
			/**[Obsolete][Error]--"DynamicGI.UpdateMaterials(Renderer) is deprecated; instead, use extension method from RendererExtensions: 'renderer.UpdateGIMaterials()' (UnityUpgradable)." */
			static UpdateMaterials(renderer: UnityEngine.Renderer): void;
			/**[Obsolete][Error]--"DynamicGI.UpdateMaterials(Terrain) is deprecated; instead, use extension method from TerrainExtensions: 'terrain.UpdateGIMaterials()' (UnityUpgradable)." */
			static UpdateMaterials(renderer: any): void;
			/**[Obsolete][Error]--"DynamicGI.UpdateMaterials(Terrain, int, int, int, int) is deprecated; instead, use extension method from TerrainExtensions: 'terrain.UpdateGIMaterials(x, y, width, height)' (UnityUpgradable)." */
			static UpdateMaterials(renderer: any, x: number, y: number, width: number, height: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum iPhoneScreenOrientation { Unknown = 0, Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, AutoRotation = 5, Landscape = 6, }
		export enum iPhoneNetworkReachability { NotReachable = 0, ReachableViaCarrierDataNetwork = 1, ReachableViaWiFiNetwork = 2, }
		export enum iPhoneGeneration { Unknown = 0, iPhone = 1, iPhone3G = 2, iPhone3GS = 3, iPodTouch1Gen = 4, iPodTouch2Gen = 5, iPodTouch3Gen = 6, iPad1Gen = 7, iPhone4 = 8, iPodTouch4Gen = 9, iPad2Gen = 10, iPhone4S = 11, iPad3Gen = 12, iPhone5 = 13, iPodTouch5Gen = 14, iPadMini1Gen = 15, iPad4Gen = 16, iPhone5C = 17, iPhone5S = 18, iPhoneUnknown = 19, iPadUnknown = 20, iPodTouchUnknown = 21, }
		export class iPhoneSettings extends System.Object {
			/**[Obsolete][Error]--"screenOrientation property is deprecated. Please use Screen.orientation instead (UnityUpgradable) -> Screen.orientation" */
			static get screenOrientation(): UnityEngine.iPhoneScreenOrientation;
			/**[Obsolete][Error]--"uniqueIdentifier property is deprecated. Please use SystemInfo.deviceUniqueIdentifier instead (UnityUpgradable) -> SystemInfo.deviceUniqueIdentifier" */
			static get uniqueIdentifier(): string;
			/**[Obsolete][Error]--"name property is deprecated (UnityUpgradable). Please use SystemInfo.deviceName instead (UnityUpgradable) -> SystemInfo.deviceName" */
			static get name(): string;
			/**[Obsolete][Error]--"model property is deprecated. Please use SystemInfo.deviceModel instead (UnityUpgradable) -> SystemInfo.deviceModel" */
			static get model(): string;
			/**[Obsolete][Error]--"systemName property is deprecated. Please use SystemInfo.operatingSystem instead (UnityUpgradable) -> SystemInfo.operatingSystem" */
			static get systemName(): string;
			/**[Obsolete][Error]--"internetReachability property is deprecated. Please use Application.internetReachability instead (UnityUpgradable) -> Application.internetReachability" */
			static get internetReachability(): UnityEngine.iPhoneNetworkReachability;
			/**[Obsolete][Error]--"systemVersion property is deprecated. Please use iOS.Device.systemVersion instead (UnityUpgradable) -> UnityEngine.iOS.Device.systemVersion" */
			static get systemVersion(): string;
			/**[Obsolete][Error]--"generation property is deprecated. Please use iOS.Device.generation instead (UnityUpgradable) -> UnityEngine.iOS.Device.generation" */
			static get generation(): UnityEngine.iPhoneGeneration;
			/**[Obsolete]--"verticalOrientation property is deprecated. Please use Screen.orientation == ScreenOrientation.Portrait instead." */
			static get verticalOrientation(): boolean;
			/**[Obsolete]--"screenCanDarken property is deprecated. Please use (Screen.sleepTimeout != SleepTimeout.NeverSleep) instead." */
			static get screenCanDarken(): boolean;
			/**[Obsolete]--"locationServiceEnabledByUser property is deprecated. Please use Input.location.isEnabledByUser instead." */
			static get locationServiceEnabledByUser(): boolean;
			/**[Obsolete]--"locationServiceStatus property is deprecated. Please use Input.location.status instead." */
			static get locationServiceStatus(): UnityEngine.LocationServiceStatus;
			constructor();
			/**[Obsolete]--"StartLocationServiceUpdates method is deprecated. Please use Input.location.Start instead." */
			static StartLocationServiceUpdates(desiredAccuracyInMeters: number, updateDistanceInMeters: number): void;
			/**[Obsolete]--"StartLocationServiceUpdates method is deprecated. Please use Input.location.Start instead." */
			static StartLocationServiceUpdates(desiredAccuracyInMeters: number): void;
			/**[Obsolete]--"StartLocationServiceUpdates method is deprecated. Please use Input.location.Start instead." */
			static StartLocationServiceUpdates(): void;
			/**[Obsolete]--"StopLocationServiceUpdates method is deprecated. Please use Input.location.Stop instead." */
			static StopLocationServiceUpdates(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum iPhoneTouchPhase { Began = 0, Moved = 1, Stationary = 2, Ended = 3, Canceled = 4, }
		export class iPhoneTouch {
			/**[Obsolete][Error]--"positionDelta property is deprecated. Please use Touch.deltaPosition instead (UnityUpgradable) -> Touch.deltaPosition" */
			get positionDelta(): UnityEngine.Vector2;
			/**[Obsolete][Error]--"timeDelta property is deprecated. Please use Touch.deltaTime instead (UnityUpgradable) -> Touch.deltaTime" */
			get timeDelta(): number;
			get fingerId(): number;
			get position(): UnityEngine.Vector2;
			get deltaPosition(): UnityEngine.Vector2;
			get deltaTime(): number;
			get tapCount(): number;
			get phase(): UnityEngine.iPhoneTouchPhase;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum iPhoneMovieControlMode { Full = 0, Minimal = 1, CancelOnTouch = 2, Hidden = 3, VolumeOnly = 4, }
		export enum iPhoneMovieScalingMode { None = 0, AspectFit = 1, AspectFill = 2, Fill = 3, }
		export class iPhoneUtils extends System.Object {
			/**[Obsolete]--"isApplicationGenuine property is deprecated. Please use Application.genuine instead (UnityUpgradable) -> Application.genuine" */
			static get isApplicationGenuine(): boolean;
			/**[Obsolete]--"isApplicationGenuineAvailable property is deprecated. Please use Application.genuineCheckAvailable instead (UnityUpgradable) -> Application.genuineCheckAvailable" */
			static get isApplicationGenuineAvailable(): boolean;
			constructor();
			/**[Obsolete]--"PlayMovie method is deprecated. Please use Handheld.PlayFullScreenMovie instead (UnityUpgradable) -> [mscorlib] System.Boolean Handheld.PlayFullScreenMovie(*)" */
			static PlayMovie(path: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.iPhoneMovieControlMode, scalingMode: UnityEngine.iPhoneMovieScalingMode): void;
			/**[Obsolete]--"PlayMovie method is deprecated. Please use Handheld.PlayFullScreenMovie instead (UnityUpgradable) -> [mscorlib] System.Boolean Handheld.PlayFullScreenMovie(*)" */
			static PlayMovie(path: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.iPhoneMovieControlMode): void;
			/**[Obsolete]--"PlayMovie method is deprecated. Please use Handheld.PlayFullScreenMovie instead (UnityUpgradable) -> [mscorlib] System.Boolean Handheld.PlayFullScreenMovie(*)" */
			static PlayMovie(path: string, bgColor: UnityEngine.Color): void;
			/**[Obsolete]--"PlayMovieURL method is deprecated. Please use Handheld.PlayFullScreenMovie instead (UnityUpgradable) -> [mscorlib] System.Boolean Handheld.PlayFullScreenMovie(*)" */
			static PlayMovieURL(url: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.iPhoneMovieControlMode, scalingMode: UnityEngine.iPhoneMovieScalingMode): void;
			/**[Obsolete]--"PlayMovieURL method is deprecated. Please use Handheld.PlayFullScreenMovie instead (UnityUpgradable) -> [mscorlib] System.Boolean Handheld.PlayFullScreenMovie(*)" */
			static PlayMovieURL(url: string, bgColor: UnityEngine.Color, controlMode: UnityEngine.iPhoneMovieControlMode): void;
			/**[Obsolete]--"PlayMovieURL method is deprecated. Please use Handheld.PlayFullScreenMovie instead (UnityUpgradable) -> [mscorlib] System.Boolean Handheld.PlayFullScreenMovie(*)" */
			static PlayMovieURL(url: string, bgColor: UnityEngine.Color): void;
			/**[Obsolete]--"Vibrate method is deprecated. Please use Handheld.Vibrate instead (UnityUpgradable) -> Handheld.Vibrate()" */
			static Vibrate(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum iPhoneKeyboardType { Default = 0, ASCIICapable = 1, NumbersAndPunctuation = 2, URL = 3, NumberPad = 4, PhonePad = 5, NamePhonePad = 6, EmailAddress = 7, }
		export class iPhoneKeyboard extends System.Object {
			get text(): string;
			set text(value: string);
			static get hideInput(): boolean;
			static set hideInput(value: boolean);
			get active(): boolean;
			set active(value: boolean);
			get done(): boolean;
			static get area(): UnityEngine.Rect;
			static get visible(): boolean;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class iPhoneAccelerationEvent {
			/**[Obsolete][Error]--"timeDelta property is deprecated. Please use AccelerationEvent.deltaTime instead (UnityUpgradable) -> AccelerationEvent.deltaTime" */
			get timeDelta(): number;
			get acceleration(): UnityEngine.Vector3;
			get deltaTime(): number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum iPhoneOrientation { Unknown = 0, Portrait = 1, PortraitUpsideDown = 2, LandscapeLeft = 3, LandscapeRight = 4, FaceUp = 5, FaceDown = 6, }
		export class iPhoneInput extends System.Object {
			/**[Obsolete][Error]--"orientation property is deprecated. Please use Input.deviceOrientation instead (UnityUpgradable) -> Input.deviceOrientation" */
			static get orientation(): UnityEngine.iPhoneOrientation;
			/**[Obsolete][Error]--"lastLocation property is deprecated. Please use Input.location.lastData instead." */
			static get lastLocation(): UnityEngine.LocationInfo;
			static get accelerationEvents(): UnityEngine.iPhoneAccelerationEvent[];
			static get touches(): UnityEngine.iPhoneTouch[];
			static get touchCount(): number;
			static get multiTouchEnabled(): boolean;
			static set multiTouchEnabled(value: boolean);
			static get accelerationEventCount(): number;
			static get acceleration(): UnityEngine.Vector3;
			constructor();
			static GetTouch(index: number): UnityEngine.iPhoneTouch;
			static GetAccelerationEvent(index: number): UnityEngine.iPhoneAccelerationEvent;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class iPhone extends System.Object {
			static get generation(): UnityEngine.iPhoneGeneration;
			static get vendorIdentifier(): string;
			static get advertisingIdentifier(): string;
			static get advertisingTrackingEnabled(): boolean;
			constructor();
			static SetNoBackupFlag(path: string): void;
			static ResetNoBackupFlag(path: string): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum iOSActivityIndicatorStyle { DontShow = 0, WhiteLarge = 1, White = 2, Gray = 3, }
		export enum CalendarIdentifier { GregorianCalendar = 0, BuddhistCalendar = 1, ChineseCalendar = 2, HebrewCalendar = 3, IslamicCalendar = 4, IslamicCivilCalendar = 5, JapaneseCalendar = 6, RepublicOfChinaCalendar = 7, PersianCalendar = 8, IndianCalendar = 9, ISO8601Calendar = 10, }
		export enum CalendarUnit { Era = 0, Year = 1, Month = 2, Day = 3, Hour = 4, Minute = 5, Second = 6, Week = 7, Weekday = 8, WeekdayOrdinal = 9, Quarter = 10, }
		export class LocalNotification extends System.Object {
			get fireDate(): System.DateTime;
			set fireDate(value: System.DateTime);
			get timeZone(): string;
			set timeZone(value: string);
			get repeatInterval(): UnityEngine.CalendarUnit;
			set repeatInterval(value: UnityEngine.CalendarUnit);
			get repeatCalendar(): UnityEngine.CalendarIdentifier;
			set repeatCalendar(value: UnityEngine.CalendarIdentifier);
			get alertBody(): string;
			set alertBody(value: string);
			get alertAction(): string;
			set alertAction(value: string);
			get hasAction(): boolean;
			set hasAction(value: boolean);
			get alertLaunchImage(): string;
			set alertLaunchImage(value: string);
			get applicationIconBadgeNumber(): number;
			set applicationIconBadgeNumber(value: number);
			get soundName(): string;
			set soundName(value: string);
			static get defaultSoundName(): string;
			get userInfo(): any;
			set userInfo(value: any);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RemoteNotification extends System.Object {
			get alertBody(): string;
			get hasAction(): boolean;
			get applicationIconBadgeNumber(): number;
			get soundName(): string;
			get userInfo(): any;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum RemoteNotificationType { None = 0, Badge = 1, Sound = 2, Alert = 3, }
		export class NotificationServices extends System.Object {
			constructor();
			/**[Obsolete][Error]--"RegisterForRemoteNotificationTypes is deprecated. Please use RegisterForNotifications instead (UnityUpgradable) -> UnityEngine.iOS.NotificationServices.RegisterForNotifications(*)" */
			static RegisterForRemoteNotificationTypes(notificationTypes: UnityEngine.RemoteNotificationType): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ADBannerView extends System.Object {
			get loaded(): boolean;
			get visible(): boolean;
			set visible(value: boolean);
			get layout(): UnityEngine.ADBannerView.Layout;
			set layout(value: UnityEngine.ADBannerView.Layout);
			get position(): UnityEngine.Vector2;
			set position(value: UnityEngine.Vector2);
			get size(): UnityEngine.Vector2;
			constructor(type: UnityEngine.ADBannerView.Type, layout: UnityEngine.ADBannerView.Layout);
			static add_onBannerWasClicked(value: UnityEngine.ADBannerView.BannerWasClickedDelegate): void;
			static remove_onBannerWasClicked(value: UnityEngine.ADBannerView.BannerWasClickedDelegate): void;
			static add_onBannerWasLoaded(value: UnityEngine.ADBannerView.BannerWasLoadedDelegate): void;
			static remove_onBannerWasLoaded(value: UnityEngine.ADBannerView.BannerWasLoadedDelegate): void;
			static IsAvailable(type: UnityEngine.ADBannerView.Type): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ADInterstitialAd extends System.Object {
			static get isAvailable(): boolean;
			get loaded(): boolean;
			constructor(autoReload: boolean);
			constructor();
			static add_onInterstitialWasLoaded(value: UnityEngine.ADInterstitialAd.InterstitialWasLoadedDelegate): void;
			static remove_onInterstitialWasLoaded(value: UnityEngine.ADInterstitialAd.InterstitialWasLoadedDelegate): void;
			Show(): void;
			ReloadAd(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface ILogger {
			IsLogTypeAllowed(logType: UnityEngine.LogType): boolean;
			Log(logType: UnityEngine.LogType, message: any): void;
			Log(logType: UnityEngine.LogType, message: any, context: any): void;
			Log(logType: UnityEngine.LogType, tag: string, message: any): void;
			Log(logType: UnityEngine.LogType, tag: string, message: any, context: any): void;
			Log(message: any): void;
			Log(tag: string, message: any): void;
			Log(tag: string, message: any, context: any): void;
			LogWarning(tag: string, message: any): void;
			LogWarning(tag: string, message: any, context: any): void;
			LogError(tag: string, message: any): void;
			LogError(tag: string, message: any, context: any): void;
			LogFormat(logType: UnityEngine.LogType, format: string, args: any): void;
			LogException(exception: any): void;
		}
		export interface ILogHandler {
			LogFormat(logType: UnityEngine.LogType, context: any, format: string, args: any): void;
			LogException(exception: any, context: any): void;
		}
		export class Logger extends System.Object {
			get logHandler(): UnityEngine.ILogHandler;
			set logHandler(value: UnityEngine.ILogHandler);
			get logEnabled(): boolean;
			set logEnabled(value: boolean);
			get filterLogType(): UnityEngine.LogType;
			set filterLogType(value: UnityEngine.LogType);
			constructor(logHandler: UnityEngine.ILogHandler);
			IsLogTypeAllowed(logType: UnityEngine.LogType): boolean;
			Log(logType: UnityEngine.LogType, message: any): void;
			Log(logType: UnityEngine.LogType, message: any, context: any): void;
			Log(logType: UnityEngine.LogType, tag: string, message: any): void;
			Log(logType: UnityEngine.LogType, tag: string, message: any, context: any): void;
			Log(message: any): void;
			Log(tag: string, message: any): void;
			Log(tag: string, message: any, context: any): void;
			LogWarning(tag: string, message: any): void;
			LogWarning(tag: string, message: any, context: any): void;
			LogError(tag: string, message: any): void;
			LogError(tag: string, message: any, context: any): void;
			LogFormat(logType: UnityEngine.LogType, format: string, args: any): void;
			LogFormat(logType: UnityEngine.LogType, context: any, format: string, args: any): void;
			LogException(exception: any): void;
			LogException(exception: any, context: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StaticBatchingUtility extends System.Object {
			constructor();
			static Combine(staticBatchRoot: UnityEngine.GameObject): void;
			static Combine(gos: UnityEngine.GameObject[], staticBatchRoot: UnityEngine.GameObject): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum DrivenTransformProperties { None = 0, All = -1, AnchoredPositionX = 2, AnchoredPositionY = 4, AnchoredPositionZ = 8, Rotation = 16, ScaleX = 32, ScaleY = 64, ScaleZ = 128, AnchorMinX = 256, AnchorMinY = 512, AnchorMaxX = 1024, AnchorMaxY = 2048, SizeDeltaX = 4096, SizeDeltaY = 8192, PivotX = 16384, PivotY = 32768, AnchoredPosition = 6, AnchoredPosition3D = 14, Scale = 224, AnchorMin = 768, AnchorMax = 3072, Anchors = 3840, SizeDelta = 12288, Pivot = 49152, }
		export class DrivenRectTransformTracker {
			static StopRecordingUndo(): void;
			static StartRecordingUndo(): void;
			Add(driver: any, rectTransform: UnityEngine.RectTransform, drivenProperties: UnityEngine.DrivenTransformProperties): void;
			/**[Obsolete]--"revertValues parameter is ignored. Please use Clear() instead." */
			Clear(revertValues: boolean): void;
			Clear(): void;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RectTransform extends UnityEngine.Transform {
			get rect(): UnityEngine.Rect;
			get anchorMin(): UnityEngine.Vector2;
			set anchorMin(value: UnityEngine.Vector2);
			get anchorMax(): UnityEngine.Vector2;
			set anchorMax(value: UnityEngine.Vector2);
			get anchoredPosition(): UnityEngine.Vector2;
			set anchoredPosition(value: UnityEngine.Vector2);
			get sizeDelta(): UnityEngine.Vector2;
			set sizeDelta(value: UnityEngine.Vector2);
			get pivot(): UnityEngine.Vector2;
			set pivot(value: UnityEngine.Vector2);
			get anchoredPosition3D(): UnityEngine.Vector3;
			set anchoredPosition3D(value: UnityEngine.Vector3);
			get offsetMin(): UnityEngine.Vector2;
			set offsetMin(value: UnityEngine.Vector2);
			get offsetMax(): UnityEngine.Vector2;
			set offsetMax(value: UnityEngine.Vector2);
			constructor();
			static add_reapplyDrivenProperties(value: UnityEngine.RectTransform.ReapplyDrivenProperties): void;
			static remove_reapplyDrivenProperties(value: UnityEngine.RectTransform.ReapplyDrivenProperties): void;
			ForceUpdateRectTransforms(): void;
			GetLocalCorners(fourCornersArray: UnityEngine.Vector3[]): void;
			GetWorldCorners(fourCornersArray: UnityEngine.Vector3[]): void;
			SetInsetAndSizeFromParentEdge(edge: UnityEngine.RectTransform.Edge, inset: number, size: number): void;
			SetSizeWithCurrentAnchors(axis: UnityEngine.RectTransform.Axis, size: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Transform extends UnityEngine.Component {
			get position(): UnityEngine.Vector3;
			set position(value: UnityEngine.Vector3);
			get localPosition(): UnityEngine.Vector3;
			set localPosition(value: UnityEngine.Vector3);
			get eulerAngles(): UnityEngine.Vector3;
			set eulerAngles(value: UnityEngine.Vector3);
			get localEulerAngles(): UnityEngine.Vector3;
			set localEulerAngles(value: UnityEngine.Vector3);
			get right(): UnityEngine.Vector3;
			set right(value: UnityEngine.Vector3);
			get up(): UnityEngine.Vector3;
			set up(value: UnityEngine.Vector3);
			get forward(): UnityEngine.Vector3;
			set forward(value: UnityEngine.Vector3);
			get rotation(): UnityEngine.Quaternion;
			set rotation(value: UnityEngine.Quaternion);
			get localRotation(): UnityEngine.Quaternion;
			set localRotation(value: UnityEngine.Quaternion);
			get localScale(): UnityEngine.Vector3;
			set localScale(value: UnityEngine.Vector3);
			get parent(): UnityEngine.Transform;
			set parent(value: UnityEngine.Transform);
			get worldToLocalMatrix(): UnityEngine.Matrix4x4;
			get localToWorldMatrix(): UnityEngine.Matrix4x4;
			get root(): UnityEngine.Transform;
			get childCount(): number;
			get lossyScale(): UnityEngine.Vector3;
			get hasChanged(): boolean;
			set hasChanged(value: boolean);
			get hierarchyCapacity(): number;
			set hierarchyCapacity(value: number);
			get hierarchyCount(): number;
			SetParent(p: UnityEngine.Transform): void;
			SetParent(parent: UnityEngine.Transform, worldPositionStays: boolean): void;
			SetPositionAndRotation(position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
			Translate(translation: UnityEngine.Vector3, relativeTo: UnityEngine.Space): void;
			Translate(translation: UnityEngine.Vector3): void;
			Translate(x: number, y: number, z: number, relativeTo: UnityEngine.Space): void;
			Translate(x: number, y: number, z: number): void;
			Translate(translation: UnityEngine.Vector3, relativeTo: UnityEngine.Transform): void;
			Translate(x: number, y: number, z: number, relativeTo: UnityEngine.Transform): void;
			Rotate(eulers: UnityEngine.Vector3, relativeTo: UnityEngine.Space): void;
			Rotate(eulers: UnityEngine.Vector3): void;
			Rotate(xAngle: number, yAngle: number, zAngle: number, relativeTo: UnityEngine.Space): void;
			Rotate(xAngle: number, yAngle: number, zAngle: number): void;
			Rotate(axis: UnityEngine.Vector3, angle: number, relativeTo: UnityEngine.Space): void;
			Rotate(axis: UnityEngine.Vector3, angle: number): void;
			RotateAround(point: UnityEngine.Vector3, axis: UnityEngine.Vector3, angle: number): void;
			/**[Obsolete]--"warning use Transform.Rotate instead." */
			RotateAround(axis: UnityEngine.Vector3, angle: number): void;
			LookAt(target: UnityEngine.Transform, worldUp: UnityEngine.Vector3): void;
			LookAt(target: UnityEngine.Transform): void;
			LookAt(worldPosition: UnityEngine.Vector3, worldUp: UnityEngine.Vector3): void;
			LookAt(worldPosition: UnityEngine.Vector3): void;
			TransformDirection(direction: UnityEngine.Vector3): UnityEngine.Vector3;
			TransformDirection(x: number, y: number, z: number): UnityEngine.Vector3;
			InverseTransformDirection(direction: UnityEngine.Vector3): UnityEngine.Vector3;
			InverseTransformDirection(x: number, y: number, z: number): UnityEngine.Vector3;
			TransformVector(vector: UnityEngine.Vector3): UnityEngine.Vector3;
			TransformVector(x: number, y: number, z: number): UnityEngine.Vector3;
			InverseTransformVector(vector: UnityEngine.Vector3): UnityEngine.Vector3;
			InverseTransformVector(x: number, y: number, z: number): UnityEngine.Vector3;
			TransformPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
			TransformPoint(x: number, y: number, z: number): UnityEngine.Vector3;
			InverseTransformPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
			InverseTransformPoint(x: number, y: number, z: number): UnityEngine.Vector3;
			DetachChildren(): void;
			SetAsFirstSibling(): void;
			SetAsLastSibling(): void;
			SetSiblingIndex(index: number): void;
			GetSiblingIndex(): number;
			Find(n: string): UnityEngine.Transform;
			IsChildOf(parent: UnityEngine.Transform): boolean;
			/**[Obsolete]--"FindChild has been deprecated. Use Find instead (UnityUpgradable) -> Find([mscorlib] System.String)" */
			FindChild(n: string): UnityEngine.Transform;
			GetEnumerator(): any;
			/**[Obsolete]--"warning use Transform.Rotate instead." */
			RotateAroundLocal(axis: UnityEngine.Vector3, angle: number): void;
			GetChild(index: number): UnityEngine.Transform;
			/**[Obsolete]--"warning use Transform.childCount instead (UnityUpgradable) -> Transform.childCount" */
			GetChildCount(): number;
			/**extension method */
			GetJsBehaviour(module_name: string): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum SpriteDrawMode { Simple = 0, Sliced = 1, Tiled = 2, }
		export enum SpriteTileMode { Continuous = 0, Adaptive = 1, }
		export enum SpriteMaskInteraction { None = 0, VisibleInsideMask = 1, VisibleOutsideMask = 2, }
		export class SpriteRenderer extends UnityEngine.Renderer {
			get sprite(): UnityEngine.Sprite;
			set sprite(value: UnityEngine.Sprite);
			get drawMode(): UnityEngine.SpriteDrawMode;
			set drawMode(value: UnityEngine.SpriteDrawMode);
			get size(): UnityEngine.Vector2;
			set size(value: UnityEngine.Vector2);
			get adaptiveModeThreshold(): number;
			set adaptiveModeThreshold(value: number);
			get tileMode(): UnityEngine.SpriteTileMode;
			set tileMode(value: UnityEngine.SpriteTileMode);
			get color(): UnityEngine.Color;
			set color(value: UnityEngine.Color);
			get maskInteraction(): UnityEngine.SpriteMaskInteraction;
			set maskInteraction(value: UnityEngine.SpriteMaskInteraction);
			get flipX(): boolean;
			set flipX(value: boolean);
			get flipY(): boolean;
			set flipY(value: boolean);
			get spriteSortPoint(): UnityEngine.SpriteSortPoint;
			set spriteSortPoint(value: UnityEngine.SpriteSortPoint);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum SpriteMeshType { FullRect = 0, Tight = 1, }
		export enum SpriteAlignment { Center = 0, TopLeft = 1, TopCenter = 2, TopRight = 3, LeftCenter = 4, RightCenter = 5, BottomLeft = 6, BottomCenter = 7, BottomRight = 8, Custom = 9, }
		export enum SpritePackingMode { Tight = 0, Rectangle = 1, }
		export enum SpritePackingRotation { None = 0, FlipHorizontal = 1, FlipVertical = 2, Rotate180 = 3, Any = 15, }
		export enum SpriteSortPoint { Center = 0, Pivot = 1, }
		export class Sprite extends UnityEngine.Object {
			get bounds(): UnityEngine.Bounds;
			get rect(): UnityEngine.Rect;
			get border(): UnityEngine.Vector4;
			get texture(): UnityEngine.Texture2D;
			get pixelsPerUnit(): number;
			get associatedAlphaSplitTexture(): UnityEngine.Texture2D;
			get pivot(): UnityEngine.Vector2;
			get packed(): boolean;
			get packingMode(): UnityEngine.SpritePackingMode;
			get packingRotation(): UnityEngine.SpritePackingRotation;
			get textureRect(): UnityEngine.Rect;
			get textureRectOffset(): UnityEngine.Vector2;
			get vertices(): UnityEngine.Vector2[];
			get triangles(): number[];
			get uv(): UnityEngine.Vector2[];
			static Create(texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number, extrude: number, meshType: UnityEngine.SpriteMeshType, border: UnityEngine.Vector4, generateFallbackPhysicsShape: boolean): UnityEngine.Sprite;
			static Create(texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number, extrude: number, meshType: UnityEngine.SpriteMeshType, border: UnityEngine.Vector4): UnityEngine.Sprite;
			static Create(texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number, extrude: number, meshType: UnityEngine.SpriteMeshType): UnityEngine.Sprite;
			static Create(texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number, extrude: number): UnityEngine.Sprite;
			static Create(texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2, pixelsPerUnit: number): UnityEngine.Sprite;
			static Create(texture: UnityEngine.Texture2D, rect: UnityEngine.Rect, pivot: UnityEngine.Vector2): UnityEngine.Sprite;
			GetPhysicsShapeCount(): number;
			GetPhysicsShapePointCount(shapeIdx: number): number;
			GetPhysicsShape(shapeIdx: number, physicsShape: any): number;
			OverridePhysicsShape(physicsShapes: any): void;
			OverrideGeometry(vertices: UnityEngine.Vector2[], triangles: number[]): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Social extends System.Object {
			static get Active(): any;
			static set Active(value: any);
			static get localUser(): any;
			static LoadUsers(userIDs: string[], callback: System.Action$1): void;
			static ReportProgress(achievementID: string, progress: number, callback: System.Action$1): void;
			static LoadAchievementDescriptions(callback: System.Action$1): void;
			static LoadAchievements(callback: System.Action$1): void;
			static ReportScore(score: number, board: string, callback: System.Action$1): void;
			static LoadScores(leaderboardID: string, callback: System.Action$1): void;
			static CreateLeaderboard(): any;
			static CreateAchievement(): any;
			static ShowAchievementsUI(): void;
			static ShowLeaderboardUI(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Grid extends UnityEngine.GridLayout {
			get cellSize(): UnityEngine.Vector3;
			set cellSize(value: UnityEngine.Vector3);
			get cellGap(): UnityEngine.Vector3;
			set cellGap(value: UnityEngine.Vector3);
			get cellLayout(): UnityEngine.GridLayout.CellLayout;
			set cellLayout(value: UnityEngine.GridLayout.CellLayout);
			get cellSwizzle(): UnityEngine.GridLayout.CellSwizzle;
			set cellSwizzle(value: UnityEngine.GridLayout.CellSwizzle);
			constructor();
			static Swizzle(swizzle: UnityEngine.GridLayout.CellSwizzle, position: UnityEngine.Vector3): UnityEngine.Vector3;
			static InverseSwizzle(swizzle: UnityEngine.GridLayout.CellSwizzle, position: UnityEngine.Vector3): UnityEngine.Vector3;
			GetCellCenterLocal(position: UnityEngine.Vector3Int): UnityEngine.Vector3;
			GetCellCenterWorld(position: UnityEngine.Vector3Int): UnityEngine.Vector3;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GridLayout extends UnityEngine.Behaviour {
			get cellSize(): UnityEngine.Vector3;
			get cellGap(): UnityEngine.Vector3;
			get cellLayout(): UnityEngine.GridLayout.CellLayout;
			get cellSwizzle(): UnityEngine.GridLayout.CellSwizzle;
			constructor();
			GetBoundsLocal(cellPosition: UnityEngine.Vector3Int): UnityEngine.Bounds;
			GetBoundsLocal(origin: UnityEngine.Vector3, size: UnityEngine.Vector3): UnityEngine.Bounds;
			CellToLocal(cellPosition: UnityEngine.Vector3Int): UnityEngine.Vector3;
			LocalToCell(localPosition: UnityEngine.Vector3): UnityEngine.Vector3Int;
			CellToLocalInterpolated(cellPosition: UnityEngine.Vector3): UnityEngine.Vector3;
			LocalToCellInterpolated(localPosition: UnityEngine.Vector3): UnityEngine.Vector3;
			CellToWorld(cellPosition: UnityEngine.Vector3Int): UnityEngine.Vector3;
			WorldToCell(worldPosition: UnityEngine.Vector3): UnityEngine.Vector3Int;
			LocalToWorld(localPosition: UnityEngine.Vector3): UnityEngine.Vector3;
			WorldToLocal(worldPosition: UnityEngine.Vector3): UnityEngine.Vector3;
			GetLayoutCellCenter(): UnityEngine.Vector3;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Event extends System.Object {
			get rawType(): UnityEngine.EventType;
			get mousePosition(): UnityEngine.Vector2;
			set mousePosition(value: UnityEngine.Vector2);
			get delta(): UnityEngine.Vector2;
			set delta(value: UnityEngine.Vector2);
			get button(): number;
			set button(value: number);
			get modifiers(): UnityEngine.EventModifiers;
			set modifiers(value: UnityEngine.EventModifiers);
			get pressure(): number;
			set pressure(value: number);
			get clickCount(): number;
			set clickCount(value: number);
			get character(): string;
			set character(value: string);
			get keyCode(): UnityEngine.KeyCode;
			set keyCode(value: UnityEngine.KeyCode);
			get displayIndex(): number;
			set displayIndex(value: number);
			get type(): UnityEngine.EventType;
			set type(value: UnityEngine.EventType);
			get commandName(): string;
			set commandName(value: string);
			/**[Obsolete][Error]--"Use HandleUtility.GUIPointToWorldRay(Event.current.mousePosition);" */
			get mouseRay(): UnityEngine.Ray;
			/**[Obsolete][Error]--"Use HandleUtility.GUIPointToWorldRay(Event.current.mousePosition);" */
			set mouseRay(value: UnityEngine.Ray);
			get shift(): boolean;
			set shift(value: boolean);
			get control(): boolean;
			set control(value: boolean);
			get alt(): boolean;
			set alt(value: boolean);
			get command(): boolean;
			set command(value: boolean);
			get capsLock(): boolean;
			set capsLock(value: boolean);
			get numeric(): boolean;
			set numeric(value: boolean);
			get functionKey(): boolean;
			static get current(): UnityEngine.Event;
			static set current(value: UnityEngine.Event);
			get isKey(): boolean;
			get isMouse(): boolean;
			get isScrollWheel(): boolean;
			constructor();
			constructor(displayIndex: number);
			constructor(other: UnityEngine.Event);
			static PopEvent(outEvent: UnityEngine.Event): boolean;
			static GetEventCount(): number;
			static KeyboardEvent(key: string): UnityEngine.Event;
			GetTypeForControl(controlID: number): UnityEngine.EventType;
			Use(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum EventType { MouseDown = 0, MouseUp = 1, MouseMove = 2, MouseDrag = 3, KeyDown = 4, KeyUp = 5, ScrollWheel = 6, Repaint = 7, Layout = 8, DragUpdated = 9, DragPerform = 10, DragExited = 15, Ignore = 11, Used = 12, ValidateCommand = 13, ExecuteCommand = 14, ContextClick = 16, MouseEnterWindow = 20, MouseLeaveWindow = 21, mouseDown = 0, mouseUp = 1, mouseMove = 2, mouseDrag = 3, keyDown = 4, keyUp = 5, scrollWheel = 6, repaint = 7, layout = 8, dragUpdated = 9, dragPerform = 10, ignore = 11, used = 12, }
		export enum EventModifiers { None = 0, Shift = 1, Control = 2, Alt = 4, Command = 8, Numeric = 16, CapsLock = 32, FunctionKey = 64, }
		export class GUI extends System.Object {
			static get color(): UnityEngine.Color;
			static set color(value: UnityEngine.Color);
			static get backgroundColor(): UnityEngine.Color;
			static set backgroundColor(value: UnityEngine.Color);
			static get contentColor(): UnityEngine.Color;
			static set contentColor(value: UnityEngine.Color);
			static get changed(): boolean;
			static set changed(value: boolean);
			static get enabled(): boolean;
			static set enabled(value: boolean);
			static get depth(): number;
			static set depth(value: number);
			static get skin(): UnityEngine.GUISkin;
			static set skin(value: UnityEngine.GUISkin);
			static get matrix(): UnityEngine.Matrix4x4;
			static set matrix(value: UnityEngine.Matrix4x4);
			static get tooltip(): string;
			static set tooltip(value: string);
			constructor();
			static SetNextControlName(name: string): void;
			static GetNameOfFocusedControl(): string;
			static FocusControl(name: string): void;
			static DragWindow(position: UnityEngine.Rect): void;
			static DragWindow(): void;
			static BringWindowToFront(windowID: number): void;
			static BringWindowToBack(windowID: number): void;
			static FocusWindow(windowID: number): void;
			static UnfocusWindow(): void;
			static Label(position: UnityEngine.Rect, text: string): void;
			static Label(position: UnityEngine.Rect, image: UnityEngine.Texture): void;
			static Label(position: UnityEngine.Rect, content: UnityEngine.GUIContent): void;
			static Label(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): void;
			static Label(position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): void;
			static Label(position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): void;
			static DrawTexture(position: UnityEngine.Rect, image: UnityEngine.Texture): void;
			static DrawTexture(position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode): void;
			static DrawTexture(position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean): void;
			static DrawTexture(position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean, imageAspect: number): void;
			static DrawTexture(position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean, imageAspect: number, color: UnityEngine.Color, borderWidth: number, borderRadius: number): void;
			static DrawTexture(position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean, imageAspect: number, color: UnityEngine.Color, borderWidths: UnityEngine.Vector4, borderRadius: number): void;
			static DrawTexture(position: UnityEngine.Rect, image: UnityEngine.Texture, scaleMode: UnityEngine.ScaleMode, alphaBlend: boolean, imageAspect: number, color: UnityEngine.Color, borderWidths: UnityEngine.Vector4, borderRadiuses: UnityEngine.Vector4): void;
			static DrawTextureWithTexCoords(position: UnityEngine.Rect, image: UnityEngine.Texture, texCoords: UnityEngine.Rect): void;
			static DrawTextureWithTexCoords(position: UnityEngine.Rect, image: UnityEngine.Texture, texCoords: UnityEngine.Rect, alphaBlend: boolean): void;
			static Box(position: UnityEngine.Rect, text: string): void;
			static Box(position: UnityEngine.Rect, image: UnityEngine.Texture): void;
			static Box(position: UnityEngine.Rect, content: UnityEngine.GUIContent): void;
			static Box(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): void;
			static Box(position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): void;
			static Box(position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): void;
			static Button(position: UnityEngine.Rect, text: string): boolean;
			static Button(position: UnityEngine.Rect, image: UnityEngine.Texture): boolean;
			static Button(position: UnityEngine.Rect, content: UnityEngine.GUIContent): boolean;
			static Button(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): boolean;
			static Button(position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): boolean;
			static Button(position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): boolean;
			static RepeatButton(position: UnityEngine.Rect, text: string): boolean;
			static RepeatButton(position: UnityEngine.Rect, image: UnityEngine.Texture): boolean;
			static RepeatButton(position: UnityEngine.Rect, content: UnityEngine.GUIContent): boolean;
			static RepeatButton(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): boolean;
			static RepeatButton(position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): boolean;
			static RepeatButton(position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): boolean;
			static TextField(position: UnityEngine.Rect, text: string): string;
			static TextField(position: UnityEngine.Rect, text: string, maxLength: number): string;
			static TextField(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): string;
			static TextField(position: UnityEngine.Rect, text: string, maxLength: number, style: UnityEngine.GUIStyle): string;
			static PasswordField(position: UnityEngine.Rect, password: string, maskChar: string): string;
			static PasswordField(position: UnityEngine.Rect, password: string, maskChar: string, maxLength: number): string;
			static PasswordField(position: UnityEngine.Rect, password: string, maskChar: string, style: UnityEngine.GUIStyle): string;
			static PasswordField(position: UnityEngine.Rect, password: string, maskChar: string, maxLength: number, style: UnityEngine.GUIStyle): string;
			static TextArea(position: UnityEngine.Rect, text: string): string;
			static TextArea(position: UnityEngine.Rect, text: string, maxLength: number): string;
			static TextArea(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): string;
			static TextArea(position: UnityEngine.Rect, text: string, maxLength: number, style: UnityEngine.GUIStyle): string;
			static Toggle(position: UnityEngine.Rect, value: boolean, text: string): boolean;
			static Toggle(position: UnityEngine.Rect, value: boolean, image: UnityEngine.Texture): boolean;
			static Toggle(position: UnityEngine.Rect, value: boolean, content: UnityEngine.GUIContent): boolean;
			static Toggle(position: UnityEngine.Rect, value: boolean, text: string, style: UnityEngine.GUIStyle): boolean;
			static Toggle(position: UnityEngine.Rect, value: boolean, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): boolean;
			static Toggle(position: UnityEngine.Rect, value: boolean, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): boolean;
			static Toggle(position: UnityEngine.Rect, id: number, value: boolean, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): boolean;
			static Toolbar(position: UnityEngine.Rect, selected: number, texts: string[]): number;
			static Toolbar(position: UnityEngine.Rect, selected: number, images: UnityEngine.Texture[]): number;
			static Toolbar(position: UnityEngine.Rect, selected: number, contents: UnityEngine.GUIContent[]): number;
			static Toolbar(position: UnityEngine.Rect, selected: number, texts: string[], style: UnityEngine.GUIStyle): number;
			static Toolbar(position: UnityEngine.Rect, selected: number, images: UnityEngine.Texture[], style: UnityEngine.GUIStyle): number;
			static Toolbar(position: UnityEngine.Rect, selected: number, contents: UnityEngine.GUIContent[], style: UnityEngine.GUIStyle): number;
			static Toolbar(position: UnityEngine.Rect, selected: number, contents: UnityEngine.GUIContent[], style: UnityEngine.GUIStyle, buttonSize: UnityEngine.GUI.ToolbarButtonSize): number;
			static SelectionGrid(position: UnityEngine.Rect, selected: number, texts: string[], xCount: number): number;
			static SelectionGrid(position: UnityEngine.Rect, selected: number, images: UnityEngine.Texture[], xCount: number): number;
			static SelectionGrid(position: UnityEngine.Rect, selected: number, content: UnityEngine.GUIContent[], xCount: number): number;
			static SelectionGrid(position: UnityEngine.Rect, selected: number, texts: string[], xCount: number, style: UnityEngine.GUIStyle): number;
			static SelectionGrid(position: UnityEngine.Rect, selected: number, images: UnityEngine.Texture[], xCount: number, style: UnityEngine.GUIStyle): number;
			static SelectionGrid(position: UnityEngine.Rect, selected: number, contents: UnityEngine.GUIContent[], xCount: number, style: UnityEngine.GUIStyle): number;
			static HorizontalSlider(position: UnityEngine.Rect, value: number, leftValue: number, rightValue: number): number;
			static HorizontalSlider(position: UnityEngine.Rect, value: number, leftValue: number, rightValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle): number;
			static VerticalSlider(position: UnityEngine.Rect, value: number, topValue: number, bottomValue: number): number;
			static VerticalSlider(position: UnityEngine.Rect, value: number, topValue: number, bottomValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle): number;
			static Slider(position: UnityEngine.Rect, value: number, size: number, start: number, end: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle, horiz: boolean, id: number): number;
			static HorizontalScrollbar(position: UnityEngine.Rect, value: number, size: number, leftValue: number, rightValue: number): number;
			static HorizontalScrollbar(position: UnityEngine.Rect, value: number, size: number, leftValue: number, rightValue: number, style: UnityEngine.GUIStyle): number;
			static VerticalScrollbar(position: UnityEngine.Rect, value: number, size: number, topValue: number, bottomValue: number): number;
			static VerticalScrollbar(position: UnityEngine.Rect, value: number, size: number, topValue: number, bottomValue: number, style: UnityEngine.GUIStyle): number;
			static BeginClip(position: UnityEngine.Rect, scrollOffset: UnityEngine.Vector2, renderOffset: UnityEngine.Vector2, resetOffset: boolean): void;
			static BeginClip(position: UnityEngine.Rect): void;
			static BeginGroup(position: UnityEngine.Rect): void;
			static BeginGroup(position: UnityEngine.Rect, text: string): void;
			static BeginGroup(position: UnityEngine.Rect, image: UnityEngine.Texture): void;
			static BeginGroup(position: UnityEngine.Rect, content: UnityEngine.GUIContent): void;
			static BeginGroup(position: UnityEngine.Rect, style: UnityEngine.GUIStyle): void;
			static BeginGroup(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): void;
			static BeginGroup(position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): void;
			static BeginGroup(position: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): void;
			static EndGroup(): void;
			static EndClip(): void;
			static BeginScrollView(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect): UnityEngine.Vector2;
			static BeginScrollView(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean): UnityEngine.Vector2;
			static BeginScrollView(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle): UnityEngine.Vector2;
			static BeginScrollView(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle): UnityEngine.Vector2;
			static EndScrollView(): void;
			static EndScrollView(handleScrollWheel: boolean): void;
			static ScrollTo(position: UnityEngine.Rect): void;
			static ScrollTowards(position: UnityEngine.Rect, maxDelta: number): boolean;
			static Window(id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, text: string): UnityEngine.Rect;
			static Window(id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, image: UnityEngine.Texture): UnityEngine.Rect;
			static Window(id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, content: UnityEngine.GUIContent): UnityEngine.Rect;
			static Window(id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, text: string, style: UnityEngine.GUIStyle): UnityEngine.Rect;
			static Window(id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): UnityEngine.Rect;
			static Window(id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, title: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): UnityEngine.Rect;
			static ModalWindow(id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, text: string): UnityEngine.Rect;
			static ModalWindow(id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, image: UnityEngine.Texture): UnityEngine.Rect;
			static ModalWindow(id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, content: UnityEngine.GUIContent): UnityEngine.Rect;
			static ModalWindow(id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, text: string, style: UnityEngine.GUIStyle): UnityEngine.Rect;
			static ModalWindow(id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): UnityEngine.Rect;
			static ModalWindow(id: number, clientRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): UnityEngine.Rect;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GUIContent extends System.Object {
			static none: UnityEngine.GUIContent;
			get text(): string;
			set text(value: string);
			get image(): UnityEngine.Texture;
			set image(value: UnityEngine.Texture);
			get tooltip(): string;
			set tooltip(value: string);
			constructor();
			constructor(text: string);
			constructor(image: UnityEngine.Texture);
			constructor(text: string, image: UnityEngine.Texture);
			constructor(text: string, tooltip: string);
			constructor(image: UnityEngine.Texture, tooltip: string);
			constructor(text: string, image: UnityEngine.Texture, tooltip: string);
			constructor(src: UnityEngine.GUIContent);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ScaleMode { StretchToFill = 0, ScaleAndCrop = 1, ScaleToFit = 2, }
		export enum FocusType { Native = 0, Keyboard = 1, Passive = 2, }
		export class GUILayout extends System.Object {
			constructor();
			static Label(image: UnityEngine.Texture, options: UnityEngine.GUILayoutOption[]): void;
			static Label(text: string, options: UnityEngine.GUILayoutOption[]): void;
			static Label(content: UnityEngine.GUIContent, options: UnityEngine.GUILayoutOption[]): void;
			static Label(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static Label(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static Label(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static Box(image: UnityEngine.Texture, options: UnityEngine.GUILayoutOption[]): void;
			static Box(text: string, options: UnityEngine.GUILayoutOption[]): void;
			static Box(content: UnityEngine.GUIContent, options: UnityEngine.GUILayoutOption[]): void;
			static Box(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static Box(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static Box(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static Button(image: UnityEngine.Texture, options: UnityEngine.GUILayoutOption[]): boolean;
			static Button(text: string, options: UnityEngine.GUILayoutOption[]): boolean;
			static Button(content: UnityEngine.GUIContent, options: UnityEngine.GUILayoutOption[]): boolean;
			static Button(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
			static Button(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
			static Button(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
			static RepeatButton(image: UnityEngine.Texture, options: UnityEngine.GUILayoutOption[]): boolean;
			static RepeatButton(text: string, options: UnityEngine.GUILayoutOption[]): boolean;
			static RepeatButton(content: UnityEngine.GUIContent, options: UnityEngine.GUILayoutOption[]): boolean;
			static RepeatButton(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
			static RepeatButton(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
			static RepeatButton(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
			static TextField(text: string, options: UnityEngine.GUILayoutOption[]): string;
			static TextField(text: string, maxLength: number, options: UnityEngine.GUILayoutOption[]): string;
			static TextField(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): string;
			static TextField(text: string, maxLength: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): string;
			static PasswordField(password: string, maskChar: string, options: UnityEngine.GUILayoutOption[]): string;
			static PasswordField(password: string, maskChar: string, maxLength: number, options: UnityEngine.GUILayoutOption[]): string;
			static PasswordField(password: string, maskChar: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): string;
			static PasswordField(password: string, maskChar: string, maxLength: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): string;
			static TextArea(text: string, options: UnityEngine.GUILayoutOption[]): string;
			static TextArea(text: string, maxLength: number, options: UnityEngine.GUILayoutOption[]): string;
			static TextArea(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): string;
			static TextArea(text: string, maxLength: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): string;
			static Toggle(value: boolean, image: UnityEngine.Texture, options: UnityEngine.GUILayoutOption[]): boolean;
			static Toggle(value: boolean, text: string, options: UnityEngine.GUILayoutOption[]): boolean;
			static Toggle(value: boolean, content: UnityEngine.GUIContent, options: UnityEngine.GUILayoutOption[]): boolean;
			static Toggle(value: boolean, image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
			static Toggle(value: boolean, text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
			static Toggle(value: boolean, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): boolean;
			static Toolbar(selected: number, texts: string[], options: UnityEngine.GUILayoutOption[]): number;
			static Toolbar(selected: number, images: UnityEngine.Texture[], options: UnityEngine.GUILayoutOption[]): number;
			static Toolbar(selected: number, contents: UnityEngine.GUIContent[], options: UnityEngine.GUILayoutOption[]): number;
			static Toolbar(selected: number, texts: string[], style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
			static Toolbar(selected: number, images: UnityEngine.Texture[], style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
			static Toolbar(selected: number, texts: string[], style: UnityEngine.GUIStyle, buttonSize: UnityEngine.GUI.ToolbarButtonSize, options: UnityEngine.GUILayoutOption[]): number;
			static Toolbar(selected: number, images: UnityEngine.Texture[], style: UnityEngine.GUIStyle, buttonSize: UnityEngine.GUI.ToolbarButtonSize, options: UnityEngine.GUILayoutOption[]): number;
			static Toolbar(selected: number, contents: UnityEngine.GUIContent[], style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
			static Toolbar(selected: number, contents: UnityEngine.GUIContent[], style: UnityEngine.GUIStyle, buttonSize: UnityEngine.GUI.ToolbarButtonSize, options: UnityEngine.GUILayoutOption[]): number;
			static SelectionGrid(selected: number, texts: string[], xCount: number, options: UnityEngine.GUILayoutOption[]): number;
			static SelectionGrid(selected: number, images: UnityEngine.Texture[], xCount: number, options: UnityEngine.GUILayoutOption[]): number;
			static SelectionGrid(selected: number, content: UnityEngine.GUIContent[], xCount: number, options: UnityEngine.GUILayoutOption[]): number;
			static SelectionGrid(selected: number, texts: string[], xCount: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
			static SelectionGrid(selected: number, images: UnityEngine.Texture[], xCount: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
			static SelectionGrid(selected: number, contents: UnityEngine.GUIContent[], xCount: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
			static HorizontalSlider(value: number, leftValue: number, rightValue: number, options: UnityEngine.GUILayoutOption[]): number;
			static HorizontalSlider(value: number, leftValue: number, rightValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
			static VerticalSlider(value: number, leftValue: number, rightValue: number, options: UnityEngine.GUILayoutOption[]): number;
			static VerticalSlider(value: number, leftValue: number, rightValue: number, slider: UnityEngine.GUIStyle, thumb: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
			static HorizontalScrollbar(value: number, size: number, leftValue: number, rightValue: number, options: UnityEngine.GUILayoutOption[]): number;
			static HorizontalScrollbar(value: number, size: number, leftValue: number, rightValue: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
			static VerticalScrollbar(value: number, size: number, topValue: number, bottomValue: number, options: UnityEngine.GUILayoutOption[]): number;
			static VerticalScrollbar(value: number, size: number, topValue: number, bottomValue: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): number;
			static Space(pixels: number): void;
			static FlexibleSpace(): void;
			static BeginHorizontal(options: UnityEngine.GUILayoutOption[]): void;
			static BeginHorizontal(style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static BeginHorizontal(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static BeginHorizontal(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static BeginHorizontal(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static EndHorizontal(): void;
			static BeginVertical(options: UnityEngine.GUILayoutOption[]): void;
			static BeginVertical(style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static BeginVertical(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static BeginVertical(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static BeginVertical(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): void;
			static EndVertical(): void;
			static BeginArea(screenRect: UnityEngine.Rect): void;
			static BeginArea(screenRect: UnityEngine.Rect, text: string): void;
			static BeginArea(screenRect: UnityEngine.Rect, image: UnityEngine.Texture): void;
			static BeginArea(screenRect: UnityEngine.Rect, content: UnityEngine.GUIContent): void;
			static BeginArea(screenRect: UnityEngine.Rect, style: UnityEngine.GUIStyle): void;
			static BeginArea(screenRect: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle): void;
			static BeginArea(screenRect: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle): void;
			static BeginArea(screenRect: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): void;
			static EndArea(): void;
			static BeginScrollView(scrollPosition: UnityEngine.Vector2, options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2;
			static BeginScrollView(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2;
			static BeginScrollView(scrollPosition: UnityEngine.Vector2, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2;
			static BeginScrollView(scrollPosition: UnityEngine.Vector2, style: UnityEngine.GUIStyle): UnityEngine.Vector2;
			static BeginScrollView(scrollPosition: UnityEngine.Vector2, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2;
			static BeginScrollView(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2;
			static BeginScrollView(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, background: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Vector2;
			static EndScrollView(): void;
			static Window(id: number, screenRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, text: string, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
			static Window(id: number, screenRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, image: UnityEngine.Texture, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
			static Window(id: number, screenRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, content: UnityEngine.GUIContent, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
			static Window(id: number, screenRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
			static Window(id: number, screenRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
			static Window(id: number, screenRect: UnityEngine.Rect, func: UnityEngine.GUI.WindowFunction, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
			static Width(width: number): UnityEngine.GUILayoutOption;
			static MinWidth(minWidth: number): UnityEngine.GUILayoutOption;
			static MaxWidth(maxWidth: number): UnityEngine.GUILayoutOption;
			static Height(height: number): UnityEngine.GUILayoutOption;
			static MinHeight(minHeight: number): UnityEngine.GUILayoutOption;
			static MaxHeight(maxHeight: number): UnityEngine.GUILayoutOption;
			static ExpandWidth(expand: boolean): UnityEngine.GUILayoutOption;
			static ExpandHeight(expand: boolean): UnityEngine.GUILayoutOption;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GUILayoutOption extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GUILayoutUtility extends System.Object {
			constructor();
			/**[Obsolete]--"BeginGroup has no effect and will be removed" */
			static BeginGroup(GroupName: string): void;
			/**[Obsolete]--"EndGroup has no effect and will be removed" */
			static EndGroup(groupName: string): void;
			static GetRect(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle): UnityEngine.Rect;
			static GetRect(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
			static GetRect(width: number, height: number): UnityEngine.Rect;
			static GetRect(width: number, height: number, style: UnityEngine.GUIStyle): UnityEngine.Rect;
			static GetRect(width: number, height: number, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
			static GetRect(width: number, height: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
			static GetRect(minWidth: number, maxWidth: number, minHeight: number, maxHeight: number): UnityEngine.Rect;
			static GetRect(minWidth: number, maxWidth: number, minHeight: number, maxHeight: number, style: UnityEngine.GUIStyle): UnityEngine.Rect;
			static GetRect(minWidth: number, maxWidth: number, minHeight: number, maxHeight: number, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
			static GetRect(minWidth: number, maxWidth: number, minHeight: number, maxHeight: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
			static GetLastRect(): UnityEngine.Rect;
			static GetAspectRect(aspect: number): UnityEngine.Rect;
			static GetAspectRect(aspect: number, style: UnityEngine.GUIStyle): UnityEngine.Rect;
			static GetAspectRect(aspect: number, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
			static GetAspectRect(aspect: number, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]): UnityEngine.Rect;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GUISettings extends System.Object {
			get doubleClickSelectsWord(): boolean;
			set doubleClickSelectsWord(value: boolean);
			get tripleClickSelectsLine(): boolean;
			set tripleClickSelectsLine(value: boolean);
			get cursorColor(): UnityEngine.Color;
			set cursorColor(value: UnityEngine.Color);
			get cursorFlashSpeed(): number;
			set cursorFlashSpeed(value: number);
			get selectionColor(): UnityEngine.Color;
			set selectionColor(value: UnityEngine.Color);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GUISkin extends UnityEngine.ScriptableObject {
			get font(): UnityEngine.Font;
			set font(value: UnityEngine.Font);
			get box(): UnityEngine.GUIStyle;
			set box(value: UnityEngine.GUIStyle);
			get label(): UnityEngine.GUIStyle;
			set label(value: UnityEngine.GUIStyle);
			get textField(): UnityEngine.GUIStyle;
			set textField(value: UnityEngine.GUIStyle);
			get textArea(): UnityEngine.GUIStyle;
			set textArea(value: UnityEngine.GUIStyle);
			get button(): UnityEngine.GUIStyle;
			set button(value: UnityEngine.GUIStyle);
			get toggle(): UnityEngine.GUIStyle;
			set toggle(value: UnityEngine.GUIStyle);
			get window(): UnityEngine.GUIStyle;
			set window(value: UnityEngine.GUIStyle);
			get horizontalSlider(): UnityEngine.GUIStyle;
			set horizontalSlider(value: UnityEngine.GUIStyle);
			get horizontalSliderThumb(): UnityEngine.GUIStyle;
			set horizontalSliderThumb(value: UnityEngine.GUIStyle);
			get verticalSlider(): UnityEngine.GUIStyle;
			set verticalSlider(value: UnityEngine.GUIStyle);
			get verticalSliderThumb(): UnityEngine.GUIStyle;
			set verticalSliderThumb(value: UnityEngine.GUIStyle);
			get horizontalScrollbar(): UnityEngine.GUIStyle;
			set horizontalScrollbar(value: UnityEngine.GUIStyle);
			get horizontalScrollbarThumb(): UnityEngine.GUIStyle;
			set horizontalScrollbarThumb(value: UnityEngine.GUIStyle);
			get horizontalScrollbarLeftButton(): UnityEngine.GUIStyle;
			set horizontalScrollbarLeftButton(value: UnityEngine.GUIStyle);
			get horizontalScrollbarRightButton(): UnityEngine.GUIStyle;
			set horizontalScrollbarRightButton(value: UnityEngine.GUIStyle);
			get verticalScrollbar(): UnityEngine.GUIStyle;
			set verticalScrollbar(value: UnityEngine.GUIStyle);
			get verticalScrollbarThumb(): UnityEngine.GUIStyle;
			set verticalScrollbarThumb(value: UnityEngine.GUIStyle);
			get verticalScrollbarUpButton(): UnityEngine.GUIStyle;
			set verticalScrollbarUpButton(value: UnityEngine.GUIStyle);
			get verticalScrollbarDownButton(): UnityEngine.GUIStyle;
			set verticalScrollbarDownButton(value: UnityEngine.GUIStyle);
			get scrollView(): UnityEngine.GUIStyle;
			set scrollView(value: UnityEngine.GUIStyle);
			get customStyles(): UnityEngine.GUIStyle[];
			set customStyles(value: UnityEngine.GUIStyle[]);
			get settings(): UnityEngine.GUISettings;
			constructor();
			GetStyle(styleName: string): UnityEngine.GUIStyle;
			FindStyle(styleName: string): UnityEngine.GUIStyle;
			GetEnumerator(): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GUIStyleState extends System.Object {
			get background(): UnityEngine.Texture2D;
			set background(value: UnityEngine.Texture2D);
			get textColor(): UnityEngine.Color;
			set textColor(value: UnityEngine.Color);
			get scaledBackgrounds(): UnityEngine.Texture2D[];
			set scaledBackgrounds(value: UnityEngine.Texture2D[]);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GUIStyle extends System.Object {
			get name(): string;
			set name(value: string);
			get font(): UnityEngine.Font;
			set font(value: UnityEngine.Font);
			get imagePosition(): UnityEngine.ImagePosition;
			set imagePosition(value: UnityEngine.ImagePosition);
			get alignment(): UnityEngine.TextAnchor;
			set alignment(value: UnityEngine.TextAnchor);
			get wordWrap(): boolean;
			set wordWrap(value: boolean);
			get clipping(): UnityEngine.TextClipping;
			set clipping(value: UnityEngine.TextClipping);
			get contentOffset(): UnityEngine.Vector2;
			set contentOffset(value: UnityEngine.Vector2);
			get fixedWidth(): number;
			set fixedWidth(value: number);
			get fixedHeight(): number;
			set fixedHeight(value: number);
			get stretchWidth(): boolean;
			set stretchWidth(value: boolean);
			get stretchHeight(): boolean;
			set stretchHeight(value: boolean);
			get fontSize(): number;
			set fontSize(value: number);
			get fontStyle(): UnityEngine.FontStyle;
			set fontStyle(value: UnityEngine.FontStyle);
			get richText(): boolean;
			set richText(value: boolean);
			/**[Obsolete]--"Don't use clipOffset - put things inside BeginGroup instead. This functionality will be removed in a later version." */
			get clipOffset(): UnityEngine.Vector2;
			/**[Obsolete]--"Don't use clipOffset - put things inside BeginGroup instead. This functionality will be removed in a later version." */
			set clipOffset(value: UnityEngine.Vector2);
			get normal(): UnityEngine.GUIStyleState;
			set normal(value: UnityEngine.GUIStyleState);
			get hover(): UnityEngine.GUIStyleState;
			set hover(value: UnityEngine.GUIStyleState);
			get active(): UnityEngine.GUIStyleState;
			set active(value: UnityEngine.GUIStyleState);
			get onNormal(): UnityEngine.GUIStyleState;
			set onNormal(value: UnityEngine.GUIStyleState);
			get onHover(): UnityEngine.GUIStyleState;
			set onHover(value: UnityEngine.GUIStyleState);
			get onActive(): UnityEngine.GUIStyleState;
			set onActive(value: UnityEngine.GUIStyleState);
			get focused(): UnityEngine.GUIStyleState;
			set focused(value: UnityEngine.GUIStyleState);
			get onFocused(): UnityEngine.GUIStyleState;
			set onFocused(value: UnityEngine.GUIStyleState);
			get border(): UnityEngine.RectOffset;
			set border(value: UnityEngine.RectOffset);
			get margin(): UnityEngine.RectOffset;
			set margin(value: UnityEngine.RectOffset);
			get padding(): UnityEngine.RectOffset;
			set padding(value: UnityEngine.RectOffset);
			get overflow(): UnityEngine.RectOffset;
			set overflow(value: UnityEngine.RectOffset);
			get lineHeight(): number;
			static get none(): UnityEngine.GUIStyle;
			get isHeightDependantOnWidth(): boolean;
			constructor();
			constructor(other: UnityEngine.GUIStyle);
			static op_Implicit(str: string): UnityEngine.GUIStyle;
			Draw(position: UnityEngine.Rect, isHover: boolean, isActive: boolean, on: boolean, hasKeyboardFocus: boolean): void;
			Draw(position: UnityEngine.Rect, text: string, isHover: boolean, isActive: boolean, on: boolean, hasKeyboardFocus: boolean): void;
			Draw(position: UnityEngine.Rect, image: UnityEngine.Texture, isHover: boolean, isActive: boolean, on: boolean, hasKeyboardFocus: boolean): void;
			Draw(position: UnityEngine.Rect, content: UnityEngine.GUIContent, isHover: boolean, isActive: boolean, on: boolean, hasKeyboardFocus: boolean): void;
			Draw(position: UnityEngine.Rect, content: UnityEngine.GUIContent, controlID: number): void;
			Draw(position: UnityEngine.Rect, content: UnityEngine.GUIContent, controlID: number, on: boolean): void;
			DrawCursor(position: UnityEngine.Rect, content: UnityEngine.GUIContent, controlID: number, character: number): void;
			DrawWithTextSelection(position: UnityEngine.Rect, content: UnityEngine.GUIContent, controlID: number, firstSelectedCharacter: number, lastSelectedCharacter: number): void;
			GetCursorPixelPosition(position: UnityEngine.Rect, content: UnityEngine.GUIContent, cursorStringIndex: number): UnityEngine.Vector2;
			GetCursorStringIndex(position: UnityEngine.Rect, content: UnityEngine.GUIContent, cursorPixelPosition: UnityEngine.Vector2): number;
			CalcSize(content: UnityEngine.GUIContent): UnityEngine.Vector2;
			CalcScreenSize(contentSize: UnityEngine.Vector2): UnityEngine.Vector2;
			CalcHeight(content: UnityEngine.GUIContent, width: number): number;
			CalcMinMaxWidth(content: UnityEngine.GUIContent, minWidth: any, maxWidth: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ImagePosition { ImageLeft = 0, ImageAbove = 1, ImageOnly = 2, TextOnly = 3, }
		export enum TextClipping { Overflow = 0, Clip = 1, }
		export class GUITargetAttribute extends System.Attribute {
			constructor();
			constructor(displayIndex: number);
			constructor(displayIndex: number, displayIndex1: number);
			constructor(displayIndex: number, displayIndex1: number, displayIndexList: number[]);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GUIUtility extends System.Object {
			static get hasModalWindow(): boolean;
			static get systemCopyBuffer(): string;
			static set systemCopyBuffer(value: string);
			static get hotControl(): number;
			static set hotControl(value: number);
			static get keyboardControl(): number;
			static set keyboardControl(value: number);
			constructor();
			static GetControlID(hint: number, focusType: UnityEngine.FocusType, rect: UnityEngine.Rect): number;
			static GetControlID(focus: UnityEngine.FocusType): number;
			static GetControlID(contents: UnityEngine.GUIContent, focus: UnityEngine.FocusType): number;
			static GetControlID(focus: UnityEngine.FocusType, position: UnityEngine.Rect): number;
			static GetControlID(contents: UnityEngine.GUIContent, focus: UnityEngine.FocusType, position: UnityEngine.Rect): number;
			static GetControlID(hint: number, focus: UnityEngine.FocusType): number;
			static AlignRectToDevice(rect: UnityEngine.Rect, widthInPixels: any, heightInPixels: any): UnityEngine.Rect;
			static AlignRectToDevice(rect: UnityEngine.Rect): UnityEngine.Rect;
			static GetStateObject(t: System.Type, controlID: number): any;
			static QueryStateObject(t: System.Type, controlID: number): any;
			static ExitGUI(): void;
			static GUIToScreenPoint(guiPoint: UnityEngine.Vector2): UnityEngine.Vector2;
			static ScreenToGUIPoint(screenPoint: UnityEngine.Vector2): UnityEngine.Vector2;
			static ScreenToGUIRect(screenRect: UnityEngine.Rect): UnityEngine.Rect;
			static RotateAroundPivot(angle: number, pivotPoint: UnityEngine.Vector2): void;
			static ScaleAroundPivot(scale: UnityEngine.Vector2, pivotPoint: UnityEngine.Vector2): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TextEditor extends System.Object {
			keyboardOnScreen: UnityEngine.TouchScreenKeyboard;
			controlID: number;
			style: UnityEngine.GUIStyle;
			multiline: boolean;
			hasHorizontalCursorPos: boolean;
			isPasswordField: boolean;
			scrollOffset: UnityEngine.Vector2;
			graphicalCursorPos: UnityEngine.Vector2;
			graphicalSelectCursorPos: UnityEngine.Vector2;
			/**[Obsolete]--"Please use 'text' instead of 'content'" */
			get content(): UnityEngine.GUIContent;
			/**[Obsolete]--"Please use 'text' instead of 'content'" */
			set content(value: UnityEngine.GUIContent);
			get text(): string;
			set text(value: string);
			get position(): UnityEngine.Rect;
			set position(value: UnityEngine.Rect);
			get cursorIndex(): number;
			set cursorIndex(value: number);
			get selectIndex(): number;
			set selectIndex(value: number);
			get doubleClickSnapping(): UnityEngine.TextEditor.DblClickSnapping;
			set doubleClickSnapping(value: UnityEngine.TextEditor.DblClickSnapping);
			get altCursorPosition(): number;
			set altCursorPosition(value: number);
			get hasSelection(): boolean;
			get SelectedText(): string;
			constructor();
			OnFocus(): void;
			OnLostFocus(): void;
			HandleKeyEvent(e: UnityEngine.Event): boolean;
			DeleteLineBack(): boolean;
			DeleteWordBack(): boolean;
			DeleteWordForward(): boolean;
			Delete(): boolean;
			CanPaste(): boolean;
			Backspace(): boolean;
			SelectAll(): void;
			SelectNone(): void;
			DeleteSelection(): boolean;
			ReplaceSelection(replace: string): void;
			Insert(c: string): void;
			MoveSelectionToAltCursor(): void;
			MoveRight(): void;
			MoveLeft(): void;
			MoveUp(): void;
			MoveDown(): void;
			MoveLineStart(): void;
			MoveLineEnd(): void;
			MoveGraphicalLineStart(): void;
			MoveGraphicalLineEnd(): void;
			MoveTextStart(): void;
			MoveTextEnd(): void;
			MoveParagraphForward(): void;
			MoveParagraphBackward(): void;
			MoveCursorToPosition(cursorPosition: UnityEngine.Vector2): void;
			MoveAltCursorToPosition(cursorPosition: UnityEngine.Vector2): void;
			IsOverSelection(cursorPosition: UnityEngine.Vector2): boolean;
			SelectToPosition(cursorPosition: UnityEngine.Vector2): void;
			SelectLeft(): void;
			SelectRight(): void;
			SelectUp(): void;
			SelectDown(): void;
			SelectTextEnd(): void;
			SelectTextStart(): void;
			MouseDragSelectsWholeWords(on: boolean): void;
			DblClickSnap(snapping: UnityEngine.TextEditor.DblClickSnapping): void;
			MoveWordRight(): void;
			MoveToStartOfNextWord(): void;
			MoveToEndOfPreviousWord(): void;
			SelectToStartOfNextWord(): void;
			SelectToEndOfPreviousWord(): void;
			FindStartOfNextWord(p: number): number;
			MoveWordLeft(): void;
			SelectWordRight(): void;
			SelectWordLeft(): void;
			ExpandSelectGraphicalLineStart(): void;
			ExpandSelectGraphicalLineEnd(): void;
			SelectGraphicalLineStart(): void;
			SelectGraphicalLineEnd(): void;
			SelectParagraphForward(): void;
			SelectParagraphBackward(): void;
			SelectCurrentWord(): void;
			SelectCurrentParagraph(): void;
			UpdateScrollOffsetIfNeeded(evt: UnityEngine.Event): void;
			DrawCursor(newText: string): void;
			SaveBackup(): void;
			Undo(): void;
			Cut(): boolean;
			Copy(): void;
			Paste(): boolean;
			DetectFocusChange(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ImageConversion extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class JsonUtility extends System.Object {
			static ToJson(obj: any): string;
			static ToJson(obj: any, prettyPrint: boolean): string;
			static FromJson(json: string, type: System.Type): any;
			static FromJsonOverwrite(json: string, objectToOverwrite: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LocalizationAsset extends UnityEngine.Object {
			get localeIsoCode(): string;
			set localeIsoCode(value: string);
			get isEditorAsset(): boolean;
			set isEditorAsset(value: boolean);
			constructor();
			SetLocalizedString(original: string, localized: string): void;
			GetLocalizedString(original: string): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ParticleSystem extends UnityEngine.Component {
			/**[Obsolete]--"safeCollisionEventSize has been deprecated. Use GetSafeCollisionEventSize() instead (UnityUpgradable) -> ParticlePhysicsExtensions.GetSafeCollisionEventSize(UnityEngine.ParticleSystem)" */
			get safeCollisionEventSize(): number;
			/**[Obsolete]--"startDelay property is deprecated. Use main.startDelay or main.startDelayMultiplier instead." */
			get startDelay(): number;
			/**[Obsolete]--"startDelay property is deprecated. Use main.startDelay or main.startDelayMultiplier instead." */
			set startDelay(value: number);
			/**[Obsolete]--"loop property is deprecated. Use main.loop instead." */
			get loop(): boolean;
			/**[Obsolete]--"loop property is deprecated. Use main.loop instead." */
			set loop(value: boolean);
			/**[Obsolete]--"playOnAwake property is deprecated. Use main.playOnAwake instead." */
			get playOnAwake(): boolean;
			/**[Obsolete]--"playOnAwake property is deprecated. Use main.playOnAwake instead." */
			set playOnAwake(value: boolean);
			/**[Obsolete]--"duration property is deprecated. Use main.duration instead." */
			get duration(): number;
			/**[Obsolete]--"playbackSpeed property is deprecated. Use main.simulationSpeed instead." */
			get playbackSpeed(): number;
			/**[Obsolete]--"playbackSpeed property is deprecated. Use main.simulationSpeed instead." */
			set playbackSpeed(value: number);
			/**[Obsolete]--"enableEmission property is deprecated. Use emission.enabled instead." */
			get enableEmission(): boolean;
			/**[Obsolete]--"enableEmission property is deprecated. Use emission.enabled instead." */
			set enableEmission(value: boolean);
			/**[Obsolete]--"emissionRate property is deprecated. Use emission.rateOverTime, emission.rateOverDistance, emission.rateOverTimeMultiplier or emission.rateOverDistanceMultiplier instead." */
			get emissionRate(): number;
			/**[Obsolete]--"emissionRate property is deprecated. Use emission.rateOverTime, emission.rateOverDistance, emission.rateOverTimeMultiplier or emission.rateOverDistanceMultiplier instead." */
			set emissionRate(value: number);
			/**[Obsolete]--"startSpeed property is deprecated. Use main.startSpeed or main.startSpeedMultiplier instead." */
			get startSpeed(): number;
			/**[Obsolete]--"startSpeed property is deprecated. Use main.startSpeed or main.startSpeedMultiplier instead." */
			set startSpeed(value: number);
			/**[Obsolete]--"startSize property is deprecated. Use main.startSize or main.startSizeMultiplier instead." */
			get startSize(): number;
			/**[Obsolete]--"startSize property is deprecated. Use main.startSize or main.startSizeMultiplier instead." */
			set startSize(value: number);
			/**[Obsolete]--"startColor property is deprecated. Use main.startColor instead." */
			get startColor(): UnityEngine.Color;
			/**[Obsolete]--"startColor property is deprecated. Use main.startColor instead." */
			set startColor(value: UnityEngine.Color);
			/**[Obsolete]--"startRotation property is deprecated. Use main.startRotation or main.startRotationMultiplier instead." */
			get startRotation(): number;
			/**[Obsolete]--"startRotation property is deprecated. Use main.startRotation or main.startRotationMultiplier instead." */
			set startRotation(value: number);
			/**[Obsolete]--"startRotation3D property is deprecated. Use main.startRotationX, main.startRotationY and main.startRotationZ instead. (Or main.startRotationXMultiplier, main.startRotationYMultiplier and main.startRotationZMultiplier)." */
			get startRotation3D(): UnityEngine.Vector3;
			/**[Obsolete]--"startRotation3D property is deprecated. Use main.startRotationX, main.startRotationY and main.startRotationZ instead. (Or main.startRotationXMultiplier, main.startRotationYMultiplier and main.startRotationZMultiplier)." */
			set startRotation3D(value: UnityEngine.Vector3);
			/**[Obsolete]--"startLifetime property is deprecated. Use main.startLifetime or main.startLifetimeMultiplier instead." */
			get startLifetime(): number;
			/**[Obsolete]--"startLifetime property is deprecated. Use main.startLifetime or main.startLifetimeMultiplier instead." */
			set startLifetime(value: number);
			/**[Obsolete]--"gravityModifier property is deprecated. Use main.gravityModifier or main.gravityModifierMultiplier instead." */
			get gravityModifier(): number;
			/**[Obsolete]--"gravityModifier property is deprecated. Use main.gravityModifier or main.gravityModifierMultiplier instead." */
			set gravityModifier(value: number);
			/**[Obsolete]--"maxParticles property is deprecated. Use main.maxParticles instead." */
			get maxParticles(): number;
			/**[Obsolete]--"maxParticles property is deprecated. Use main.maxParticles instead." */
			set maxParticles(value: number);
			/**[Obsolete]--"simulationSpace property is deprecated. Use main.simulationSpace instead." */
			get simulationSpace(): UnityEngine.ParticleSystemSimulationSpace;
			/**[Obsolete]--"simulationSpace property is deprecated. Use main.simulationSpace instead." */
			set simulationSpace(value: UnityEngine.ParticleSystemSimulationSpace);
			/**[Obsolete]--"scalingMode property is deprecated. Use main.scalingMode instead." */
			get scalingMode(): UnityEngine.ParticleSystemScalingMode;
			/**[Obsolete]--"scalingMode property is deprecated. Use main.scalingMode instead." */
			set scalingMode(value: UnityEngine.ParticleSystemScalingMode);
			/**[Obsolete][Error]--"automaticCullingEnabled property is deprecated. Use proceduralSimulationSupported instead (UnityUpgradable) -> proceduralSimulationSupported" */
			get automaticCullingEnabled(): boolean;
			get isPlaying(): boolean;
			get isEmitting(): boolean;
			get isStopped(): boolean;
			get isPaused(): boolean;
			get particleCount(): number;
			get time(): number;
			set time(value: number);
			get randomSeed(): number;
			set randomSeed(value: number);
			get useAutoRandomSeed(): boolean;
			set useAutoRandomSeed(value: boolean);
			get proceduralSimulationSupported(): boolean;
			get main(): UnityEngine.ParticleSystem.MainModule;
			get emission(): UnityEngine.ParticleSystem.EmissionModule;
			get shape(): UnityEngine.ParticleSystem.ShapeModule;
			get velocityOverLifetime(): UnityEngine.ParticleSystem.VelocityOverLifetimeModule;
			get limitVelocityOverLifetime(): UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule;
			get inheritVelocity(): UnityEngine.ParticleSystem.InheritVelocityModule;
			get forceOverLifetime(): UnityEngine.ParticleSystem.ForceOverLifetimeModule;
			get colorOverLifetime(): UnityEngine.ParticleSystem.ColorOverLifetimeModule;
			get colorBySpeed(): UnityEngine.ParticleSystem.ColorBySpeedModule;
			get sizeOverLifetime(): UnityEngine.ParticleSystem.SizeOverLifetimeModule;
			get sizeBySpeed(): UnityEngine.ParticleSystem.SizeBySpeedModule;
			get rotationOverLifetime(): UnityEngine.ParticleSystem.RotationOverLifetimeModule;
			get rotationBySpeed(): UnityEngine.ParticleSystem.RotationBySpeedModule;
			get externalForces(): UnityEngine.ParticleSystem.ExternalForcesModule;
			get noise(): UnityEngine.ParticleSystem.NoiseModule;
			get collision(): UnityEngine.ParticleSystem.CollisionModule;
			get trigger(): UnityEngine.ParticleSystem.TriggerModule;
			get subEmitters(): UnityEngine.ParticleSystem.SubEmittersModule;
			get textureSheetAnimation(): UnityEngine.ParticleSystem.TextureSheetAnimationModule;
			get lights(): UnityEngine.ParticleSystem.LightsModule;
			get trails(): UnityEngine.ParticleSystem.TrailModule;
			get customData(): UnityEngine.ParticleSystem.CustomDataModule;
			constructor();
			static ResetPreMappedBufferMemory(): void;
			SetCustomParticleData(customData: any, streamIndex: UnityEngine.ParticleSystemCustomData): void;
			GetCustomParticleData(customData: any, streamIndex: UnityEngine.ParticleSystemCustomData): number;
			TriggerSubEmitter(subEmitterIndex: number): void;
			TriggerSubEmitter(subEmitterIndex: number, particle: any): void;
			TriggerSubEmitter(subEmitterIndex: number, particles: any): void;
			/**[Obsolete]--"Emit with specific parameters is deprecated. Pass a ParticleSystem.EmitParams parameter instead, which allows you to override some/all of the emission properties" */
			Emit(position: UnityEngine.Vector3, velocity: UnityEngine.Vector3, size: number, lifetime: number, color: UnityEngine.Color32): void;
			/**[Obsolete]--"Emit with a single particle structure is deprecated. Pass a ParticleSystem.EmitParams parameter instead, which allows you to override some/all of the emission properties" */
			Emit(particle: UnityEngine.ParticleSystem.Particle): void;
			Emit(count: number): void;
			Emit(emitParams: UnityEngine.ParticleSystem.EmitParams, count: number): void;
			SetParticles(particles: UnityEngine.ParticleSystem.Particle[], size: number, offset: number): void;
			SetParticles(particles: UnityEngine.ParticleSystem.Particle[], size: number): void;
			SetParticles(particles: UnityEngine.ParticleSystem.Particle[]): void;
			GetParticles(particles: UnityEngine.ParticleSystem.Particle[], size: number, offset: number): number;
			GetParticles(particles: UnityEngine.ParticleSystem.Particle[], size: number): number;
			GetParticles(particles: UnityEngine.ParticleSystem.Particle[]): number;
			Simulate(t: number, withChildren: boolean, restart: boolean, fixedTimeStep: boolean): void;
			Simulate(t: number, withChildren: boolean, restart: boolean): void;
			Simulate(t: number, withChildren: boolean): void;
			Simulate(t: number): void;
			Play(withChildren: boolean): void;
			Play(): void;
			Pause(withChildren: boolean): void;
			Pause(): void;
			Stop(withChildren: boolean, stopBehavior: UnityEngine.ParticleSystemStopBehavior): void;
			Stop(withChildren: boolean): void;
			Stop(): void;
			Clear(withChildren: boolean): void;
			Clear(): void;
			IsAlive(withChildren: boolean): boolean;
			IsAlive(): boolean;
			/**extension method */
			GetSafeCollisionEventSize(): number;
			/**extension method */
			GetCollisionEvents(go: UnityEngine.GameObject, collisionEvents: any): number;
			/**extension method */
			GetSafeTriggerParticlesSize(type: UnityEngine.ParticleSystemTriggerEventType): number;
			/**extension method */
			GetTriggerParticles(type: UnityEngine.ParticleSystemTriggerEventType, particles: any): number;
			/**extension method */
			SetTriggerParticles(type: UnityEngine.ParticleSystemTriggerEventType, particles: any, offset: number, count: number): void;
			/**extension method */
			SetTriggerParticles(type: UnityEngine.ParticleSystemTriggerEventType, particles: any): void;
			/**extension method */
			GetCollisionEvents(go: UnityEngine.GameObject, collisionEvents: UnityEngine.ParticleCollisionEvent[]): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ParticleSystemRenderer extends UnityEngine.Renderer {
			get mesh(): UnityEngine.Mesh;
			set mesh(value: UnityEngine.Mesh);
			get meshCount(): number;
			get activeVertexStreamsCount(): number;
			get alignment(): UnityEngine.ParticleSystemRenderSpace;
			set alignment(value: UnityEngine.ParticleSystemRenderSpace);
			get renderMode(): UnityEngine.ParticleSystemRenderMode;
			set renderMode(value: UnityEngine.ParticleSystemRenderMode);
			get sortMode(): UnityEngine.ParticleSystemSortMode;
			set sortMode(value: UnityEngine.ParticleSystemSortMode);
			get lengthScale(): number;
			set lengthScale(value: number);
			get velocityScale(): number;
			set velocityScale(value: number);
			get cameraVelocityScale(): number;
			set cameraVelocityScale(value: number);
			get normalDirection(): number;
			set normalDirection(value: number);
			get shadowBias(): number;
			set shadowBias(value: number);
			get sortingFudge(): number;
			set sortingFudge(value: number);
			get minParticleSize(): number;
			set minParticleSize(value: number);
			get maxParticleSize(): number;
			set maxParticleSize(value: number);
			get pivot(): UnityEngine.Vector3;
			set pivot(value: UnityEngine.Vector3);
			get flip(): UnityEngine.Vector3;
			set flip(value: UnityEngine.Vector3);
			get maskInteraction(): UnityEngine.SpriteMaskInteraction;
			set maskInteraction(value: UnityEngine.SpriteMaskInteraction);
			get trailMaterial(): UnityEngine.Material;
			set trailMaterial(value: UnityEngine.Material);
			get enableGPUInstancing(): boolean;
			set enableGPUInstancing(value: boolean);
			get allowRoll(): boolean;
			set allowRoll(value: boolean);
			constructor();
			GetMeshes(meshes: UnityEngine.Mesh[]): number;
			SetMeshes(meshes: UnityEngine.Mesh[]): void;
			SetMeshes(meshes: UnityEngine.Mesh[], size: number): void;
			SetActiveVertexStreams(streams: any): void;
			GetActiveVertexStreams(streams: any): void;
			/**[Obsolete]--"EnableVertexStreams is deprecated.Use SetActiveVertexStreams instead." */
			EnableVertexStreams(streams: UnityEngine.ParticleSystemVertexStreams): void;
			/**[Obsolete]--"DisableVertexStreams is deprecated.Use SetActiveVertexStreams instead." */
			DisableVertexStreams(streams: UnityEngine.ParticleSystemVertexStreams): void;
			/**[Obsolete]--"AreVertexStreamsEnabled is deprecated.Use GetActiveVertexStreams instead." */
			AreVertexStreamsEnabled(streams: UnityEngine.ParticleSystemVertexStreams): boolean;
			/**[Obsolete]--"GetEnabledVertexStreams is deprecated.Use GetActiveVertexStreams instead." */
			GetEnabledVertexStreams(streams: UnityEngine.ParticleSystemVertexStreams): UnityEngine.ParticleSystemVertexStreams;
			BakeMesh(mesh: UnityEngine.Mesh, useTransform?: boolean): void;
			BakeMesh(mesh: UnityEngine.Mesh, camera: UnityEngine.Camera, useTransform?: boolean): void;
			BakeTrailsMesh(mesh: UnityEngine.Mesh, useTransform?: boolean): void;
			BakeTrailsMesh(mesh: UnityEngine.Mesh, camera: UnityEngine.Camera, useTransform?: boolean): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ParticleCollisionEvent {
			get intersection(): UnityEngine.Vector3;
			get normal(): UnityEngine.Vector3;
			get velocity(): UnityEngine.Vector3;
			get colliderComponent(): UnityEngine.Component;
			/**[Obsolete][Error]--"collider property is deprecated. Use colliderComponent instead, which supports Collider and Collider2D components (UnityUpgradable) -> colliderComponent" */
			get collider(): UnityEngine.Component;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ParticlePhysicsExtensions extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ParticleSystemEmissionType { Time = 0, Distance = 1, }
		export enum ParticleSystemVertexStreams { Position = 1, Normal = 2, Tangent = 4, Color = 8, UV = 16, UV2BlendAndFrame = 32, CenterAndVertexID = 64, Size = 128, Rotation = 256, Velocity = 512, Lifetime = 1024, Custom1 = 2048, Custom2 = 4096, Random = 8192, None = 0, All = 2147483647, }
		export enum ParticleSystemRenderMode { Billboard = 0, Stretch = 1, HorizontalBillboard = 2, VerticalBillboard = 3, Mesh = 4, None = 5, }
		export enum ParticleSystemSortMode { None = 0, Distance = 1, OldestInFront = 2, YoungestInFront = 3, }
		export enum ParticleSystemCollisionQuality { High = 0, Medium = 1, Low = 2, }
		export enum ParticleSystemRenderSpace { View = 0, World = 1, Local = 2, Facing = 3, Velocity = 4, }
		export enum ParticleSystemCurveMode { Constant = 0, Curve = 1, TwoCurves = 2, TwoConstants = 3, }
		export enum ParticleSystemGradientMode { Color = 0, Gradient = 1, TwoColors = 2, TwoGradients = 3, RandomColor = 4, }
		export enum ParticleSystemShapeType { Sphere = 0, SphereShell = 1, Hemisphere = 2, HemisphereShell = 3, Cone = 4, Box = 5, Mesh = 6, ConeShell = 7, ConeVolume = 8, ConeVolumeShell = 9, Circle = 10, CircleEdge = 11, SingleSidedEdge = 12, MeshRenderer = 13, SkinnedMeshRenderer = 14, BoxShell = 15, BoxEdge = 16, Donut = 17, Rectangle = 18, Sprite = 19, SpriteRenderer = 20, }
		export enum ParticleSystemMeshShapeType { Vertex = 0, Edge = 1, Triangle = 2, }
		export enum ParticleSystemShapeTextureChannel { Red = 0, Green = 1, Blue = 2, Alpha = 3, }
		export enum ParticleSystemAnimationMode { Grid = 0, Sprites = 1, }
		export enum ParticleSystemAnimationTimeMode { Lifetime = 0, Speed = 1, FPS = 2, }
		export enum ParticleSystemAnimationType { WholeSheet = 0, SingleRow = 1, }
		export enum ParticleSystemCollisionType { Planes = 0, World = 1, }
		export enum ParticleSystemCollisionMode { Collision3D = 0, Collision2D = 1, }
		export enum ParticleSystemOverlapAction { Ignore = 0, Kill = 1, Callback = 2, }
		export enum ParticleSystemSimulationSpace { Local = 0, World = 1, Custom = 2, }
		export enum ParticleSystemStopBehavior { StopEmittingAndClear = 0, StopEmitting = 1, }
		export enum ParticleSystemScalingMode { Hierarchy = 0, Local = 1, Shape = 2, }
		export enum ParticleSystemStopAction { None = 0, Disable = 1, Destroy = 2, Callback = 3, }
		export enum ParticleSystemCullingMode { Automatic = 0, PauseAndCatchup = 1, Pause = 2, AlwaysSimulate = 3, }
		export enum ParticleSystemEmitterVelocityMode { Transform = 0, Rigidbody = 1, }
		export enum ParticleSystemInheritVelocityMode { Initial = 0, Current = 1, }
		export enum ParticleSystemTriggerEventType { Inside = 0, Outside = 1, Enter = 2, Exit = 3, }
		export enum ParticleSystemVertexStream { Position = 0, Normal = 1, Tangent = 2, Color = 3, UV = 4, UV2 = 5, UV3 = 6, UV4 = 7, AnimBlend = 8, AnimFrame = 9, Center = 10, VertexID = 11, SizeX = 12, SizeXY = 13, SizeXYZ = 14, Rotation = 15, Rotation3D = 16, RotationSpeed = 17, RotationSpeed3D = 18, Velocity = 19, Speed = 20, AgePercent = 21, InvStartLifetime = 22, StableRandomX = 23, StableRandomXY = 24, StableRandomXYZ = 25, StableRandomXYZW = 26, VaryingRandomX = 27, VaryingRandomXY = 28, VaryingRandomXYZ = 29, VaryingRandomXYZW = 30, Custom1X = 31, Custom1XY = 32, Custom1XYZ = 33, Custom1XYZW = 34, Custom2X = 35, Custom2XY = 36, Custom2XYZ = 37, Custom2XYZW = 38, NoiseSumX = 39, NoiseSumXY = 40, NoiseSumXYZ = 41, NoiseImpulseX = 42, NoiseImpulseXY = 43, NoiseImpulseXYZ = 44, }
		export enum ParticleSystemCustomData { Custom1 = 0, Custom2 = 1, }
		export enum ParticleSystemCustomDataMode { Disabled = 0, Vector = 1, Color = 2, }
		export enum ParticleSystemNoiseQuality { Low = 0, Medium = 1, High = 2, }
		export enum ParticleSystemSubEmitterType { Birth = 0, Collision = 1, Death = 2, Trigger = 3, Manual = 4, }
		export enum ParticleSystemSubEmitterProperties { InheritNothing = 0, InheritEverything = 31, InheritColor = 1, InheritSize = 2, InheritRotation = 4, InheritLifetime = 8, InheritDuration = 16, }
		export enum ParticleSystemTrailMode { PerParticle = 0, Ribbon = 1, }
		export enum ParticleSystemTrailTextureMode { Stretch = 0, Tile = 1, DistributePerSegment = 2, RepeatPerSegment = 3, }
		export enum ParticleSystemShapeMultiModeValue { Random = 0, Loop = 1, PingPong = 2, BurstSpread = 3, }
		export enum ParticleSystemRingBufferMode { Disabled = 0, PauseUntilReplaced = 1, LoopUntilReplaced = 2, }
		export enum ParticleSystemGameObjectFilter { LayerMask = 0, List = 1, LayerMaskAndList = 2, }
		export enum ParticleSystemForceFieldShape { Sphere = 0, Hemisphere = 1, Cylinder = 2, Box = 3, }
		export class ParticleSystemForceField extends UnityEngine.Component {
			get shape(): UnityEngine.ParticleSystemForceFieldShape;
			set shape(value: UnityEngine.ParticleSystemForceFieldShape);
			get startRange(): number;
			set startRange(value: number);
			get endRange(): number;
			set endRange(value: number);
			get length(): number;
			set length(value: number);
			get gravityFocus(): number;
			set gravityFocus(value: number);
			get rotationRandomness(): UnityEngine.Vector2;
			set rotationRandomness(value: UnityEngine.Vector2);
			get multiplyDragByParticleSize(): boolean;
			set multiplyDragByParticleSize(value: boolean);
			get multiplyDragByParticleVelocity(): boolean;
			set multiplyDragByParticleVelocity(value: boolean);
			get vectorField(): UnityEngine.Texture3D;
			set vectorField(value: UnityEngine.Texture3D);
			get directionX(): UnityEngine.ParticleSystem.MinMaxCurve;
			set directionX(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get directionY(): UnityEngine.ParticleSystem.MinMaxCurve;
			set directionY(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get directionZ(): UnityEngine.ParticleSystem.MinMaxCurve;
			set directionZ(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get gravity(): UnityEngine.ParticleSystem.MinMaxCurve;
			set gravity(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get rotationSpeed(): UnityEngine.ParticleSystem.MinMaxCurve;
			set rotationSpeed(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get rotationAttraction(): UnityEngine.ParticleSystem.MinMaxCurve;
			set rotationAttraction(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get drag(): UnityEngine.ParticleSystem.MinMaxCurve;
			set drag(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get vectorFieldSpeed(): UnityEngine.ParticleSystem.MinMaxCurve;
			set vectorFieldSpeed(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get vectorFieldAttraction(): UnityEngine.ParticleSystem.MinMaxCurve;
			set vectorFieldAttraction(value: UnityEngine.ParticleSystem.MinMaxCurve);
			constructor();
			static FindAll(): UnityEngine.ParticleSystemForceField[];
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum RigidbodyConstraints { None = 0, FreezePositionX = 2, FreezePositionY = 4, FreezePositionZ = 8, FreezeRotationX = 16, FreezeRotationY = 32, FreezeRotationZ = 64, FreezePosition = 14, FreezeRotation = 112, FreezeAll = 126, }
		export enum ForceMode { Force = 0, Acceleration = 5, Impulse = 1, VelocityChange = 2, }
		export enum JointDriveMode { None = 0, Position = 1, Velocity = 2, PositionAndVelocity = 3, }
		export enum JointProjectionMode { None = 0, PositionAndRotation = 1, PositionOnly = 2, }
		export enum MeshColliderCookingOptions { None = 0, InflateConvexMesh = 1, CookForFasterSimulation = 2, EnableMeshCleaning = 4, WeldColocatedVertices = 8, }
		export class WheelFrictionCurve {
			get extremumSlip(): number;
			set extremumSlip(value: number);
			get extremumValue(): number;
			set extremumValue(value: number);
			get asymptoteSlip(): number;
			set asymptoteSlip(value: number);
			get asymptoteValue(): number;
			set asymptoteValue(value: number);
			get stiffness(): number;
			set stiffness(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SoftJointLimit {
			get limit(): number;
			set limit(value: number);
			/**[Obsolete][Error]--"Spring has been moved to SoftJointLimitSpring class in Unity 5" */
			get spring(): number;
			/**[Obsolete][Error]--"Spring has been moved to SoftJointLimitSpring class in Unity 5" */
			set spring(value: number);
			/**[Obsolete][Error]--"Damper has been moved to SoftJointLimitSpring class in Unity 5" */
			get damper(): number;
			/**[Obsolete][Error]--"Damper has been moved to SoftJointLimitSpring class in Unity 5" */
			set damper(value: number);
			get bounciness(): number;
			set bounciness(value: number);
			get contactDistance(): number;
			set contactDistance(value: number);
			/**[Obsolete][Error]--"Use SoftJointLimit.bounciness instead" */
			get bouncyness(): number;
			/**[Obsolete][Error]--"Use SoftJointLimit.bounciness instead" */
			set bouncyness(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SoftJointLimitSpring {
			get spring(): number;
			set spring(value: number);
			get damper(): number;
			set damper(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class JointDrive {
			/**[Obsolete]--"JointDriveMode is obsolete" */
			get mode(): UnityEngine.JointDriveMode;
			/**[Obsolete]--"JointDriveMode is obsolete" */
			set mode(value: UnityEngine.JointDriveMode);
			get positionSpring(): number;
			set positionSpring(value: number);
			get positionDamper(): number;
			set positionDamper(value: number);
			get maximumForce(): number;
			set maximumForce(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum RigidbodyInterpolation { None = 0, Interpolate = 1, Extrapolate = 2, }
		export class JointMotor {
			get targetVelocity(): number;
			set targetVelocity(value: number);
			get force(): number;
			set force(value: number);
			get freeSpin(): boolean;
			set freeSpin(value: boolean);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class JointSpring {
			spring: number;
			damper: number;
			targetPosition: number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class JointLimits {
			/**[Obsolete][Error]--"minBounce and maxBounce are replaced by a single JointLimits.bounciness for both limit ends." */
			minBounce: number;
			/**[Obsolete][Error]--"minBounce and maxBounce are replaced by a single JointLimits.bounciness for both limit ends." */
			maxBounce: number;
			get min(): number;
			set min(value: number);
			get max(): number;
			set max(value: number);
			get bounciness(): number;
			set bounciness(value: number);
			get bounceMinVelocity(): number;
			set bounceMinVelocity(value: number);
			get contactDistance(): number;
			set contactDistance(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ControllerColliderHit extends System.Object {
			get controller(): UnityEngine.CharacterController;
			get collider(): UnityEngine.Collider;
			get rigidbody(): UnityEngine.Rigidbody;
			get gameObject(): UnityEngine.GameObject;
			get transform(): UnityEngine.Transform;
			get point(): UnityEngine.Vector3;
			get normal(): UnityEngine.Vector3;
			get moveDirection(): UnityEngine.Vector3;
			get moveLength(): number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum PhysicMaterialCombine { Average = 0, Minimum = 2, Multiply = 1, Maximum = 3, }
		export class Collision extends System.Object {
			get relativeVelocity(): UnityEngine.Vector3;
			get rigidbody(): UnityEngine.Rigidbody;
			get collider(): UnityEngine.Collider;
			get transform(): UnityEngine.Transform;
			get gameObject(): UnityEngine.GameObject;
			get contactCount(): number;
			get contacts(): UnityEngine.ContactPoint[];
			get impulse(): UnityEngine.Vector3;
			/**[Obsolete]--"Use Collision.relativeVelocity instead." */
			get impactForceSum(): UnityEngine.Vector3;
			/**[Obsolete]--"Will always return zero." */
			get frictionForceSum(): UnityEngine.Vector3;
			/**[Obsolete]--"Please use Collision.rigidbody, Collision.transform or Collision.collider instead" */
			get other(): UnityEngine.Component;
			constructor();
			GetContact(index: number): UnityEngine.ContactPoint;
			GetContacts(contacts: UnityEngine.ContactPoint[]): number;
			GetEnumerator(): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum CollisionFlags { None = 0, Sides = 1, Above = 2, Below = 4, CollidedSides = 1, CollidedAbove = 2, CollidedBelow = 4, }
		export enum QueryTriggerInteraction { UseGlobal = 0, Ignore = 1, Collide = 2, }
		export enum CollisionDetectionMode { Discrete = 0, Continuous = 1, ContinuousDynamic = 2, ContinuousSpeculative = 3, }
		export enum ConfigurableJointMotion { Locked = 0, Limited = 1, Free = 2, }
		export enum RotationDriveMode { XYAndZ = 0, Slerp = 1, }
		export class PhysicMaterial extends UnityEngine.Object {
			get bounciness(): number;
			set bounciness(value: number);
			get dynamicFriction(): number;
			set dynamicFriction(value: number);
			get staticFriction(): number;
			set staticFriction(value: number);
			get frictionCombine(): UnityEngine.PhysicMaterialCombine;
			set frictionCombine(value: UnityEngine.PhysicMaterialCombine);
			get bounceCombine(): UnityEngine.PhysicMaterialCombine;
			set bounceCombine(value: UnityEngine.PhysicMaterialCombine);
			/**[Obsolete]--"Use PhysicMaterial.bounciness instead (UnityUpgradable) -> bounciness" */
			get bouncyness(): number;
			/**[Obsolete]--"Use PhysicMaterial.bounciness instead (UnityUpgradable) -> bounciness" */
			set bouncyness(value: number);
			/**[Obsolete][Error]--"Anisotropic friction is no longer supported since Unity 5.0." */
			get frictionDirection2(): UnityEngine.Vector3;
			/**[Obsolete][Error]--"Anisotropic friction is no longer supported since Unity 5.0." */
			set frictionDirection2(value: UnityEngine.Vector3);
			/**[Obsolete][Error]--"Anisotropic friction is no longer supported since Unity 5.0." */
			get dynamicFriction2(): number;
			/**[Obsolete][Error]--"Anisotropic friction is no longer supported since Unity 5.0." */
			set dynamicFriction2(value: number);
			/**[Obsolete][Error]--"Anisotropic friction is no longer supported since Unity 5.0." */
			get staticFriction2(): number;
			/**[Obsolete][Error]--"Anisotropic friction is no longer supported since Unity 5.0." */
			set staticFriction2(value: number);
			/**[Obsolete][Error]--"Anisotropic friction is no longer supported since Unity 5.0." */
			get frictionDirection(): UnityEngine.Vector3;
			/**[Obsolete][Error]--"Anisotropic friction is no longer supported since Unity 5.0." */
			set frictionDirection(value: UnityEngine.Vector3);
			constructor();
			constructor(name: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RaycastHit {
			get collider(): UnityEngine.Collider;
			get point(): UnityEngine.Vector3;
			set point(value: UnityEngine.Vector3);
			get normal(): UnityEngine.Vector3;
			set normal(value: UnityEngine.Vector3);
			get barycentricCoordinate(): UnityEngine.Vector3;
			set barycentricCoordinate(value: UnityEngine.Vector3);
			get distance(): number;
			set distance(value: number);
			get triangleIndex(): number;
			get textureCoord(): UnityEngine.Vector2;
			get textureCoord2(): UnityEngine.Vector2;
			/**[Obsolete]--"Use textureCoord2 instead. (UnityUpgradable) -> textureCoord2" */
			get textureCoord1(): UnityEngine.Vector2;
			get transform(): UnityEngine.Transform;
			get rigidbody(): UnityEngine.Rigidbody;
			get lightmapCoord(): UnityEngine.Vector2;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Rigidbody extends UnityEngine.Component {
			get velocity(): UnityEngine.Vector3;
			set velocity(value: UnityEngine.Vector3);
			get angularVelocity(): UnityEngine.Vector3;
			set angularVelocity(value: UnityEngine.Vector3);
			get drag(): number;
			set drag(value: number);
			get angularDrag(): number;
			set angularDrag(value: number);
			get mass(): number;
			set mass(value: number);
			get useGravity(): boolean;
			set useGravity(value: boolean);
			get maxDepenetrationVelocity(): number;
			set maxDepenetrationVelocity(value: number);
			get isKinematic(): boolean;
			set isKinematic(value: boolean);
			get freezeRotation(): boolean;
			set freezeRotation(value: boolean);
			get constraints(): UnityEngine.RigidbodyConstraints;
			set constraints(value: UnityEngine.RigidbodyConstraints);
			get collisionDetectionMode(): UnityEngine.CollisionDetectionMode;
			set collisionDetectionMode(value: UnityEngine.CollisionDetectionMode);
			get centerOfMass(): UnityEngine.Vector3;
			set centerOfMass(value: UnityEngine.Vector3);
			get worldCenterOfMass(): UnityEngine.Vector3;
			get inertiaTensorRotation(): UnityEngine.Quaternion;
			set inertiaTensorRotation(value: UnityEngine.Quaternion);
			get inertiaTensor(): UnityEngine.Vector3;
			set inertiaTensor(value: UnityEngine.Vector3);
			get detectCollisions(): boolean;
			set detectCollisions(value: boolean);
			get position(): UnityEngine.Vector3;
			set position(value: UnityEngine.Vector3);
			get rotation(): UnityEngine.Quaternion;
			set rotation(value: UnityEngine.Quaternion);
			get interpolation(): UnityEngine.RigidbodyInterpolation;
			set interpolation(value: UnityEngine.RigidbodyInterpolation);
			get solverIterations(): number;
			set solverIterations(value: number);
			get sleepThreshold(): number;
			set sleepThreshold(value: number);
			get maxAngularVelocity(): number;
			set maxAngularVelocity(value: number);
			get solverVelocityIterations(): number;
			set solverVelocityIterations(value: number);
			/**[Obsolete]--"The sleepVelocity is no longer supported. Use sleepThreshold. Note that sleepThreshold is energy but not velocity." */
			get sleepVelocity(): number;
			/**[Obsolete]--"The sleepVelocity is no longer supported. Use sleepThreshold. Note that sleepThreshold is energy but not velocity." */
			set sleepVelocity(value: number);
			/**[Obsolete]--"The sleepAngularVelocity is no longer supported. Set Use sleepThreshold to specify energy." */
			get sleepAngularVelocity(): number;
			/**[Obsolete]--"The sleepAngularVelocity is no longer supported. Set Use sleepThreshold to specify energy." */
			set sleepAngularVelocity(value: number);
			/**[Obsolete]--"Cone friction is no longer supported." */
			get useConeFriction(): boolean;
			/**[Obsolete]--"Cone friction is no longer supported." */
			set useConeFriction(value: boolean);
			/**[Obsolete]--"Please use Rigidbody.solverIterations instead. (UnityUpgradable) -> solverIterations" */
			get solverIterationCount(): number;
			/**[Obsolete]--"Please use Rigidbody.solverIterations instead. (UnityUpgradable) -> solverIterations" */
			set solverIterationCount(value: number);
			/**[Obsolete]--"Please use Rigidbody.solverVelocityIterations instead. (UnityUpgradable) -> solverVelocityIterations" */
			get solverVelocityIterationCount(): number;
			/**[Obsolete]--"Please use Rigidbody.solverVelocityIterations instead. (UnityUpgradable) -> solverVelocityIterations" */
			set solverVelocityIterationCount(value: number);
			constructor();
			SetDensity(density: number): void;
			MovePosition(position: UnityEngine.Vector3): void;
			MoveRotation(rot: UnityEngine.Quaternion): void;
			Sleep(): void;
			IsSleeping(): boolean;
			WakeUp(): void;
			ResetCenterOfMass(): void;
			ResetInertiaTensor(): void;
			GetRelativePointVelocity(relativePoint: UnityEngine.Vector3): UnityEngine.Vector3;
			GetPointVelocity(worldPoint: UnityEngine.Vector3): UnityEngine.Vector3;
			/**[Obsolete]--"Use Rigidbody.maxAngularVelocity instead." */
			SetMaxAngularVelocity(a: number): void;
			AddForce(force: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
			AddForce(force: UnityEngine.Vector3): void;
			AddForce(x: number, y: number, z: number, mode: UnityEngine.ForceMode): void;
			AddForce(x: number, y: number, z: number): void;
			AddRelativeForce(force: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
			AddRelativeForce(force: UnityEngine.Vector3): void;
			AddRelativeForce(x: number, y: number, z: number, mode: UnityEngine.ForceMode): void;
			AddRelativeForce(x: number, y: number, z: number): void;
			AddTorque(torque: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
			AddTorque(torque: UnityEngine.Vector3): void;
			AddTorque(x: number, y: number, z: number, mode: UnityEngine.ForceMode): void;
			AddTorque(x: number, y: number, z: number): void;
			AddRelativeTorque(torque: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
			AddRelativeTorque(torque: UnityEngine.Vector3): void;
			AddRelativeTorque(x: number, y: number, z: number, mode: UnityEngine.ForceMode): void;
			AddRelativeTorque(x: number, y: number, z: number): void;
			AddForceAtPosition(force: UnityEngine.Vector3, position: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
			AddForceAtPosition(force: UnityEngine.Vector3, position: UnityEngine.Vector3): void;
			AddExplosionForce(explosionForce: number, explosionPosition: UnityEngine.Vector3, explosionRadius: number, upwardsModifier: number, mode: UnityEngine.ForceMode): void;
			AddExplosionForce(explosionForce: number, explosionPosition: UnityEngine.Vector3, explosionRadius: number, upwardsModifier: number): void;
			AddExplosionForce(explosionForce: number, explosionPosition: UnityEngine.Vector3, explosionRadius: number): void;
			ClosestPointOnBounds(position: UnityEngine.Vector3): UnityEngine.Vector3;
			SweepTest(direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			SweepTest(direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number): boolean;
			SweepTest(direction: UnityEngine.Vector3, hitInfo: any): boolean;
			SweepTestAll(direction: UnityEngine.Vector3, maxDistance: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
			SweepTestAll(direction: UnityEngine.Vector3, maxDistance: number): UnityEngine.RaycastHit[];
			SweepTestAll(direction: UnityEngine.Vector3): UnityEngine.RaycastHit[];
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Collider extends UnityEngine.Component {
			get enabled(): boolean;
			set enabled(value: boolean);
			get attachedRigidbody(): UnityEngine.Rigidbody;
			get isTrigger(): boolean;
			set isTrigger(value: boolean);
			get contactOffset(): number;
			set contactOffset(value: number);
			get bounds(): UnityEngine.Bounds;
			get sharedMaterial(): UnityEngine.PhysicMaterial;
			set sharedMaterial(value: UnityEngine.PhysicMaterial);
			get material(): UnityEngine.PhysicMaterial;
			set material(value: UnityEngine.PhysicMaterial);
			constructor();
			ClosestPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
			Raycast(ray: UnityEngine.Ray, hitInfo: any, maxDistance: number): boolean;
			ClosestPointOnBounds(position: UnityEngine.Vector3): UnityEngine.Vector3;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CharacterController extends UnityEngine.Collider {
			get velocity(): UnityEngine.Vector3;
			get isGrounded(): boolean;
			get collisionFlags(): UnityEngine.CollisionFlags;
			get radius(): number;
			set radius(value: number);
			get height(): number;
			set height(value: number);
			get center(): UnityEngine.Vector3;
			set center(value: UnityEngine.Vector3);
			get slopeLimit(): number;
			set slopeLimit(value: number);
			get stepOffset(): number;
			set stepOffset(value: number);
			get skinWidth(): number;
			set skinWidth(value: number);
			get minMoveDistance(): number;
			set minMoveDistance(value: number);
			get detectCollisions(): boolean;
			set detectCollisions(value: boolean);
			get enableOverlapRecovery(): boolean;
			set enableOverlapRecovery(value: boolean);
			constructor();
			SimpleMove(speed: UnityEngine.Vector3): boolean;
			Move(motion: UnityEngine.Vector3): UnityEngine.CollisionFlags;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MeshCollider extends UnityEngine.Collider {
			get sharedMesh(): UnityEngine.Mesh;
			set sharedMesh(value: UnityEngine.Mesh);
			get convex(): boolean;
			set convex(value: boolean);
			/**[Obsolete]--"MeshCollider.inflateMesh is no longer supported. The new cooking algorithm doesn't need inflation to be used." */
			get inflateMesh(): boolean;
			/**[Obsolete]--"MeshCollider.inflateMesh is no longer supported. The new cooking algorithm doesn't need inflation to be used." */
			set inflateMesh(value: boolean);
			get cookingOptions(): UnityEngine.MeshColliderCookingOptions;
			set cookingOptions(value: UnityEngine.MeshColliderCookingOptions);
			/**[Obsolete]--"MeshCollider.skinWidth is no longer used." */
			get skinWidth(): number;
			/**[Obsolete]--"MeshCollider.skinWidth is no longer used." */
			set skinWidth(value: number);
			/**[Obsolete]--"Configuring smooth sphere collisions is no longer needed." */
			get smoothSphereCollisions(): boolean;
			/**[Obsolete]--"Configuring smooth sphere collisions is no longer needed." */
			set smoothSphereCollisions(value: boolean);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CapsuleCollider extends UnityEngine.Collider {
			get center(): UnityEngine.Vector3;
			set center(value: UnityEngine.Vector3);
			get radius(): number;
			set radius(value: number);
			get height(): number;
			set height(value: number);
			get direction(): number;
			set direction(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BoxCollider extends UnityEngine.Collider {
			get center(): UnityEngine.Vector3;
			set center(value: UnityEngine.Vector3);
			get size(): UnityEngine.Vector3;
			set size(value: UnityEngine.Vector3);
			/**[Obsolete]--"Use BoxCollider.size instead." */
			get extents(): UnityEngine.Vector3;
			/**[Obsolete]--"Use BoxCollider.size instead." */
			set extents(value: UnityEngine.Vector3);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SphereCollider extends UnityEngine.Collider {
			get center(): UnityEngine.Vector3;
			set center(value: UnityEngine.Vector3);
			get radius(): number;
			set radius(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ConstantForce extends UnityEngine.Behaviour {
			get force(): UnityEngine.Vector3;
			set force(value: UnityEngine.Vector3);
			get relativeForce(): UnityEngine.Vector3;
			set relativeForce(value: UnityEngine.Vector3);
			get torque(): UnityEngine.Vector3;
			set torque(value: UnityEngine.Vector3);
			get relativeTorque(): UnityEngine.Vector3;
			set relativeTorque(value: UnityEngine.Vector3);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Joint extends UnityEngine.Component {
			get connectedBody(): UnityEngine.Rigidbody;
			set connectedBody(value: UnityEngine.Rigidbody);
			get axis(): UnityEngine.Vector3;
			set axis(value: UnityEngine.Vector3);
			get anchor(): UnityEngine.Vector3;
			set anchor(value: UnityEngine.Vector3);
			get connectedAnchor(): UnityEngine.Vector3;
			set connectedAnchor(value: UnityEngine.Vector3);
			get autoConfigureConnectedAnchor(): boolean;
			set autoConfigureConnectedAnchor(value: boolean);
			get breakForce(): number;
			set breakForce(value: number);
			get breakTorque(): number;
			set breakTorque(value: number);
			get enableCollision(): boolean;
			set enableCollision(value: boolean);
			get enablePreprocessing(): boolean;
			set enablePreprocessing(value: boolean);
			get massScale(): number;
			set massScale(value: number);
			get connectedMassScale(): number;
			set connectedMassScale(value: number);
			get currentForce(): UnityEngine.Vector3;
			get currentTorque(): UnityEngine.Vector3;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HingeJoint extends UnityEngine.Joint {
			get motor(): UnityEngine.JointMotor;
			set motor(value: UnityEngine.JointMotor);
			get limits(): UnityEngine.JointLimits;
			set limits(value: UnityEngine.JointLimits);
			get spring(): UnityEngine.JointSpring;
			set spring(value: UnityEngine.JointSpring);
			get useMotor(): boolean;
			set useMotor(value: boolean);
			get useLimits(): boolean;
			set useLimits(value: boolean);
			get useSpring(): boolean;
			set useSpring(value: boolean);
			get velocity(): number;
			get angle(): number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SpringJoint extends UnityEngine.Joint {
			get spring(): number;
			set spring(value: number);
			get damper(): number;
			set damper(value: number);
			get minDistance(): number;
			set minDistance(value: number);
			get maxDistance(): number;
			set maxDistance(value: number);
			get tolerance(): number;
			set tolerance(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FixedJoint extends UnityEngine.Joint {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CharacterJoint extends UnityEngine.Joint {
			/**[Obsolete][Error]--"TargetRotation not in use for Unity 5 and assumed disabled." */
			targetRotation: UnityEngine.Quaternion;
			/**[Obsolete][Error]--"TargetAngularVelocity not in use for Unity 5 and assumed disabled." */
			targetAngularVelocity: UnityEngine.Vector3;
			/**[Obsolete]--"RotationDrive not in use for Unity 5 and assumed disabled." */
			rotationDrive: UnityEngine.JointDrive;
			get swingAxis(): UnityEngine.Vector3;
			set swingAxis(value: UnityEngine.Vector3);
			get twistLimitSpring(): UnityEngine.SoftJointLimitSpring;
			set twistLimitSpring(value: UnityEngine.SoftJointLimitSpring);
			get swingLimitSpring(): UnityEngine.SoftJointLimitSpring;
			set swingLimitSpring(value: UnityEngine.SoftJointLimitSpring);
			get lowTwistLimit(): UnityEngine.SoftJointLimit;
			set lowTwistLimit(value: UnityEngine.SoftJointLimit);
			get highTwistLimit(): UnityEngine.SoftJointLimit;
			set highTwistLimit(value: UnityEngine.SoftJointLimit);
			get swing1Limit(): UnityEngine.SoftJointLimit;
			set swing1Limit(value: UnityEngine.SoftJointLimit);
			get swing2Limit(): UnityEngine.SoftJointLimit;
			set swing2Limit(value: UnityEngine.SoftJointLimit);
			get enableProjection(): boolean;
			set enableProjection(value: boolean);
			get projectionDistance(): number;
			set projectionDistance(value: number);
			get projectionAngle(): number;
			set projectionAngle(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ConfigurableJoint extends UnityEngine.Joint {
			get secondaryAxis(): UnityEngine.Vector3;
			set secondaryAxis(value: UnityEngine.Vector3);
			get xMotion(): UnityEngine.ConfigurableJointMotion;
			set xMotion(value: UnityEngine.ConfigurableJointMotion);
			get yMotion(): UnityEngine.ConfigurableJointMotion;
			set yMotion(value: UnityEngine.ConfigurableJointMotion);
			get zMotion(): UnityEngine.ConfigurableJointMotion;
			set zMotion(value: UnityEngine.ConfigurableJointMotion);
			get angularXMotion(): UnityEngine.ConfigurableJointMotion;
			set angularXMotion(value: UnityEngine.ConfigurableJointMotion);
			get angularYMotion(): UnityEngine.ConfigurableJointMotion;
			set angularYMotion(value: UnityEngine.ConfigurableJointMotion);
			get angularZMotion(): UnityEngine.ConfigurableJointMotion;
			set angularZMotion(value: UnityEngine.ConfigurableJointMotion);
			get linearLimitSpring(): UnityEngine.SoftJointLimitSpring;
			set linearLimitSpring(value: UnityEngine.SoftJointLimitSpring);
			get angularXLimitSpring(): UnityEngine.SoftJointLimitSpring;
			set angularXLimitSpring(value: UnityEngine.SoftJointLimitSpring);
			get angularYZLimitSpring(): UnityEngine.SoftJointLimitSpring;
			set angularYZLimitSpring(value: UnityEngine.SoftJointLimitSpring);
			get linearLimit(): UnityEngine.SoftJointLimit;
			set linearLimit(value: UnityEngine.SoftJointLimit);
			get lowAngularXLimit(): UnityEngine.SoftJointLimit;
			set lowAngularXLimit(value: UnityEngine.SoftJointLimit);
			get highAngularXLimit(): UnityEngine.SoftJointLimit;
			set highAngularXLimit(value: UnityEngine.SoftJointLimit);
			get angularYLimit(): UnityEngine.SoftJointLimit;
			set angularYLimit(value: UnityEngine.SoftJointLimit);
			get angularZLimit(): UnityEngine.SoftJointLimit;
			set angularZLimit(value: UnityEngine.SoftJointLimit);
			get targetPosition(): UnityEngine.Vector3;
			set targetPosition(value: UnityEngine.Vector3);
			get targetVelocity(): UnityEngine.Vector3;
			set targetVelocity(value: UnityEngine.Vector3);
			get xDrive(): UnityEngine.JointDrive;
			set xDrive(value: UnityEngine.JointDrive);
			get yDrive(): UnityEngine.JointDrive;
			set yDrive(value: UnityEngine.JointDrive);
			get zDrive(): UnityEngine.JointDrive;
			set zDrive(value: UnityEngine.JointDrive);
			get targetRotation(): UnityEngine.Quaternion;
			set targetRotation(value: UnityEngine.Quaternion);
			get targetAngularVelocity(): UnityEngine.Vector3;
			set targetAngularVelocity(value: UnityEngine.Vector3);
			get rotationDriveMode(): UnityEngine.RotationDriveMode;
			set rotationDriveMode(value: UnityEngine.RotationDriveMode);
			get angularXDrive(): UnityEngine.JointDrive;
			set angularXDrive(value: UnityEngine.JointDrive);
			get angularYZDrive(): UnityEngine.JointDrive;
			set angularYZDrive(value: UnityEngine.JointDrive);
			get slerpDrive(): UnityEngine.JointDrive;
			set slerpDrive(value: UnityEngine.JointDrive);
			get projectionMode(): UnityEngine.JointProjectionMode;
			set projectionMode(value: UnityEngine.JointProjectionMode);
			get projectionDistance(): number;
			set projectionDistance(value: number);
			get projectionAngle(): number;
			set projectionAngle(value: number);
			get configuredInWorldSpace(): boolean;
			set configuredInWorldSpace(value: boolean);
			get swapBodies(): boolean;
			set swapBodies(value: boolean);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ContactPoint {
			get point(): UnityEngine.Vector3;
			get normal(): UnityEngine.Vector3;
			get thisCollider(): UnityEngine.Collider;
			get otherCollider(): UnityEngine.Collider;
			get separation(): number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PhysicsScene {
			static op_Equality(lhs: UnityEngine.PhysicsScene, rhs: UnityEngine.PhysicsScene): boolean;
			static op_Inequality(lhs: UnityEngine.PhysicsScene, rhs: UnityEngine.PhysicsScene): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.PhysicsScene): boolean;
			IsValid(): boolean;
			IsEmpty(): boolean;
			Simulate(step: number): void;
			Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, maxDistance?: number, layerMask?: number, queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction): boolean;
			Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, maxDistance?: number, layerMask?: number, queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction): boolean;
			Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, raycastHits: UnityEngine.RaycastHit[], maxDistance?: number, layerMask?: number, queryTriggerInteraction?: UnityEngine.QueryTriggerInteraction): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PhysicsSceneExtensions extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Physics extends System.Object {
			static IgnoreRaycastLayer: number;
			static DefaultRaycastLayers: number;
			static AllLayers: number;
			/**[Obsolete][Error]--"Please use Physics.IgnoreRaycastLayer instead. (UnityUpgradable) -> IgnoreRaycastLayer" */
			static kIgnoreRaycastLayer: number;
			/**[Obsolete][Error]--"Please use Physics.DefaultRaycastLayers instead. (UnityUpgradable) -> DefaultRaycastLayers" */
			static kDefaultRaycastLayers: number;
			/**[Obsolete][Error]--"Please use Physics.AllLayers instead. (UnityUpgradable) -> AllLayers" */
			static kAllLayers: number;
			/**[Obsolete][Error]--"Use Physics.defaultContactOffset or Collider.contactOffset instead." */
			static get minPenetrationForPenalty(): number;
			/**[Obsolete][Error]--"Use Physics.defaultContactOffset or Collider.contactOffset instead." */
			static set minPenetrationForPenalty(value: number);
			static get gravity(): UnityEngine.Vector3;
			static set gravity(value: UnityEngine.Vector3);
			static get defaultContactOffset(): number;
			static set defaultContactOffset(value: number);
			static get sleepThreshold(): number;
			static set sleepThreshold(value: number);
			static get queriesHitTriggers(): boolean;
			static set queriesHitTriggers(value: boolean);
			static get queriesHitBackfaces(): boolean;
			static set queriesHitBackfaces(value: boolean);
			static get bounceThreshold(): number;
			static set bounceThreshold(value: number);
			static get defaultSolverIterations(): number;
			static set defaultSolverIterations(value: number);
			static get defaultSolverVelocityIterations(): number;
			static set defaultSolverVelocityIterations(value: number);
			/**[Obsolete]--"Please use bounceThreshold instead." */
			static get bounceTreshold(): number;
			/**[Obsolete]--"Please use bounceThreshold instead." */
			static set bounceTreshold(value: number);
			/**[Obsolete]--"The sleepVelocity is no longer supported. Use sleepThreshold. Note that sleepThreshold is energy but not velocity." */
			static get sleepVelocity(): number;
			/**[Obsolete]--"The sleepVelocity is no longer supported. Use sleepThreshold. Note that sleepThreshold is energy but not velocity." */
			static set sleepVelocity(value: number);
			/**[Obsolete]--"The sleepAngularVelocity is no longer supported. Use sleepThreshold. Note that sleepThreshold is energy but not velocity." */
			static get sleepAngularVelocity(): number;
			/**[Obsolete]--"The sleepAngularVelocity is no longer supported. Use sleepThreshold. Note that sleepThreshold is energy but not velocity." */
			static set sleepAngularVelocity(value: number);
			/**[Obsolete][Error]--"Use Rigidbody.maxAngularVelocity instead." */
			static get maxAngularVelocity(): number;
			/**[Obsolete][Error]--"Use Rigidbody.maxAngularVelocity instead." */
			static set maxAngularVelocity(value: number);
			/**[Obsolete]--"Please use Physics.defaultSolverIterations instead. (UnityUpgradable) -> defaultSolverIterations" */
			static get solverIterationCount(): number;
			/**[Obsolete]--"Please use Physics.defaultSolverIterations instead. (UnityUpgradable) -> defaultSolverIterations" */
			static set solverIterationCount(value: number);
			/**[Obsolete]--"Please use Physics.defaultSolverVelocityIterations instead. (UnityUpgradable) -> defaultSolverVelocityIterations" */
			static get solverVelocityIterationCount(): number;
			/**[Obsolete]--"Please use Physics.defaultSolverVelocityIterations instead. (UnityUpgradable) -> defaultSolverVelocityIterations" */
			static set solverVelocityIterationCount(value: number);
			/**[Obsolete]--"penetrationPenaltyForce has no effect." */
			static get penetrationPenaltyForce(): number;
			/**[Obsolete]--"penetrationPenaltyForce has no effect." */
			static set penetrationPenaltyForce(value: number);
			static get defaultPhysicsScene(): UnityEngine.PhysicsScene;
			static get autoSimulation(): boolean;
			static set autoSimulation(value: boolean);
			static get autoSyncTransforms(): boolean;
			static set autoSyncTransforms(value: boolean);
			static get reuseCollisionCallbacks(): boolean;
			static set reuseCollisionCallbacks(value: boolean);
			static get interCollisionDistance(): number;
			static set interCollisionDistance(value: number);
			static get interCollisionStiffness(): number;
			static set interCollisionStiffness(value: number);
			static get interCollisionSettingsToggle(): boolean;
			static set interCollisionSettingsToggle(value: boolean);
			constructor();
			static IgnoreCollision(collider1: UnityEngine.Collider, collider2: UnityEngine.Collider, ignore: boolean): void;
			static IgnoreCollision(collider1: UnityEngine.Collider, collider2: UnityEngine.Collider): void;
			static IgnoreLayerCollision(layer1: number, layer2: number, ignore: boolean): void;
			static IgnoreLayerCollision(layer1: number, layer2: number): void;
			static GetIgnoreLayerCollision(layer1: number, layer2: number): boolean;
			static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number): boolean;
			static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, maxDistance: number): boolean;
			static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3): boolean;
			static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, layerMask: number): boolean;
			static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number): boolean;
			static Raycast(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any): boolean;
			static Raycast(ray: UnityEngine.Ray, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static Raycast(ray: UnityEngine.Ray, maxDistance: number, layerMask: number): boolean;
			static Raycast(ray: UnityEngine.Ray, maxDistance: number): boolean;
			static Raycast(ray: UnityEngine.Ray): boolean;
			static Raycast(ray: UnityEngine.Ray, hitInfo: any, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static Raycast(ray: UnityEngine.Ray, hitInfo: any, maxDistance: number, layerMask: number): boolean;
			static Raycast(ray: UnityEngine.Ray, hitInfo: any, maxDistance: number): boolean;
			static Raycast(ray: UnityEngine.Ray, hitInfo: any): boolean;
			static Linecast(start: UnityEngine.Vector3, end: UnityEngine.Vector3, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static Linecast(start: UnityEngine.Vector3, end: UnityEngine.Vector3, layerMask: number): boolean;
			static Linecast(start: UnityEngine.Vector3, end: UnityEngine.Vector3): boolean;
			static Linecast(start: UnityEngine.Vector3, end: UnityEngine.Vector3, hitInfo: any, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static Linecast(start: UnityEngine.Vector3, end: UnityEngine.Vector3, hitInfo: any, layerMask: number): boolean;
			static Linecast(start: UnityEngine.Vector3, end: UnityEngine.Vector3, hitInfo: any): boolean;
			static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number): boolean;
			static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number): boolean;
			static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3): boolean;
			static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, layerMask: number): boolean;
			static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number): boolean;
			static CapsuleCast(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any): boolean;
			static SphereCast(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static SphereCast(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number, layerMask: number): boolean;
			static SphereCast(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any, maxDistance: number): boolean;
			static SphereCast(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, hitInfo: any): boolean;
			static SphereCast(ray: UnityEngine.Ray, radius: number, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static SphereCast(ray: UnityEngine.Ray, radius: number, maxDistance: number, layerMask: number): boolean;
			static SphereCast(ray: UnityEngine.Ray, radius: number, maxDistance: number): boolean;
			static SphereCast(ray: UnityEngine.Ray, radius: number): boolean;
			static SphereCast(ray: UnityEngine.Ray, radius: number, hitInfo: any, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static SphereCast(ray: UnityEngine.Ray, radius: number, hitInfo: any, maxDistance: number, layerMask: number): boolean;
			static SphereCast(ray: UnityEngine.Ray, radius: number, hitInfo: any, maxDistance: number): boolean;
			static SphereCast(ray: UnityEngine.Ray, radius: number, hitInfo: any): boolean;
			static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, maxDistance: number, layerMask: number): boolean;
			static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, maxDistance: number): boolean;
			static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion): boolean;
			static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3): boolean;
			static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, orientation: UnityEngine.Quaternion, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, orientation: UnityEngine.Quaternion, maxDistance: number, layerMask: number): boolean;
			static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, orientation: UnityEngine.Quaternion, maxDistance: number): boolean;
			static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any, orientation: UnityEngine.Quaternion): boolean;
			static BoxCast(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, hitInfo: any): boolean;
			static RaycastAll(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
			static RaycastAll(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number): UnityEngine.RaycastHit[];
			static RaycastAll(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, maxDistance: number): UnityEngine.RaycastHit[];
			static RaycastAll(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3): UnityEngine.RaycastHit[];
			static RaycastAll(ray: UnityEngine.Ray, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
			static RaycastAll(ray: UnityEngine.Ray, maxDistance: number, layerMask: number): UnityEngine.RaycastHit[];
			static RaycastAll(ray: UnityEngine.Ray, maxDistance: number): UnityEngine.RaycastHit[];
			static RaycastAll(ray: UnityEngine.Ray): UnityEngine.RaycastHit[];
			static RaycastNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
			static RaycastNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number): number;
			static RaycastNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit[], maxDistance: number): number;
			static RaycastNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit[]): number;
			static RaycastNonAlloc(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
			static RaycastNonAlloc(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number): number;
			static RaycastNonAlloc(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number): number;
			static RaycastNonAlloc(origin: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[]): number;
			static CapsuleCastAll(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
			static CapsuleCastAll(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number): UnityEngine.RaycastHit[];
			static CapsuleCastAll(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number): UnityEngine.RaycastHit[];
			static CapsuleCastAll(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3): UnityEngine.RaycastHit[];
			static SphereCastAll(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
			static SphereCastAll(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number, layerMask: number): UnityEngine.RaycastHit[];
			static SphereCastAll(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, maxDistance: number): UnityEngine.RaycastHit[];
			static SphereCastAll(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3): UnityEngine.RaycastHit[];
			static SphereCastAll(ray: UnityEngine.Ray, radius: number, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
			static SphereCastAll(ray: UnityEngine.Ray, radius: number, maxDistance: number, layerMask: number): UnityEngine.RaycastHit[];
			static SphereCastAll(ray: UnityEngine.Ray, radius: number, maxDistance: number): UnityEngine.RaycastHit[];
			static SphereCastAll(ray: UnityEngine.Ray, radius: number): UnityEngine.RaycastHit[];
			static OverlapCapsule(point0: UnityEngine.Vector3, point1: UnityEngine.Vector3, radius: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.Collider[];
			static OverlapCapsule(point0: UnityEngine.Vector3, point1: UnityEngine.Vector3, radius: number, layerMask: number): UnityEngine.Collider[];
			static OverlapCapsule(point0: UnityEngine.Vector3, point1: UnityEngine.Vector3, radius: number): UnityEngine.Collider[];
			static OverlapSphere(position: UnityEngine.Vector3, radius: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.Collider[];
			static OverlapSphere(position: UnityEngine.Vector3, radius: number, layerMask: number): UnityEngine.Collider[];
			static OverlapSphere(position: UnityEngine.Vector3, radius: number): UnityEngine.Collider[];
			static Simulate(step: number): void;
			static SyncTransforms(): void;
			static ComputePenetration(colliderA: UnityEngine.Collider, positionA: UnityEngine.Vector3, rotationA: UnityEngine.Quaternion, colliderB: UnityEngine.Collider, positionB: UnityEngine.Vector3, rotationB: UnityEngine.Quaternion, direction: any, distance: any): boolean;
			static ClosestPoint(point: UnityEngine.Vector3, collider: UnityEngine.Collider, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): UnityEngine.Vector3;
			static OverlapSphereNonAlloc(position: UnityEngine.Vector3, radius: number, results: UnityEngine.Collider[], layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
			static OverlapSphereNonAlloc(position: UnityEngine.Vector3, radius: number, results: UnityEngine.Collider[], layerMask: number): number;
			static OverlapSphereNonAlloc(position: UnityEngine.Vector3, radius: number, results: UnityEngine.Collider[]): number;
			static CheckSphere(position: UnityEngine.Vector3, radius: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static CheckSphere(position: UnityEngine.Vector3, radius: number, layerMask: number): boolean;
			static CheckSphere(position: UnityEngine.Vector3, radius: number): boolean;
			static CapsuleCastNonAlloc(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
			static CapsuleCastNonAlloc(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number): number;
			static CapsuleCastNonAlloc(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number): number;
			static CapsuleCastNonAlloc(point1: UnityEngine.Vector3, point2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[]): number;
			static SphereCastNonAlloc(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
			static SphereCastNonAlloc(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number): number;
			static SphereCastNonAlloc(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], maxDistance: number): number;
			static SphereCastNonAlloc(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[]): number;
			static SphereCastNonAlloc(ray: UnityEngine.Ray, radius: number, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
			static SphereCastNonAlloc(ray: UnityEngine.Ray, radius: number, results: UnityEngine.RaycastHit[], maxDistance: number, layerMask: number): number;
			static SphereCastNonAlloc(ray: UnityEngine.Ray, radius: number, results: UnityEngine.RaycastHit[], maxDistance: number): number;
			static SphereCastNonAlloc(ray: UnityEngine.Ray, radius: number, results: UnityEngine.RaycastHit[]): number;
			static CheckCapsule(start: UnityEngine.Vector3, end: UnityEngine.Vector3, radius: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static CheckCapsule(start: UnityEngine.Vector3, end: UnityEngine.Vector3, radius: number, layerMask: number): boolean;
			static CheckCapsule(start: UnityEngine.Vector3, end: UnityEngine.Vector3, radius: number): boolean;
			static CheckBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, layermask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): boolean;
			static CheckBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, layerMask: number): boolean;
			static CheckBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion): boolean;
			static CheckBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3): boolean;
			static OverlapBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.Collider[];
			static OverlapBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, layerMask: number): UnityEngine.Collider[];
			static OverlapBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion): UnityEngine.Collider[];
			static OverlapBox(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3): UnityEngine.Collider[];
			static OverlapBoxNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, results: UnityEngine.Collider[], orientation: UnityEngine.Quaternion, mask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
			static OverlapBoxNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, results: UnityEngine.Collider[], orientation: UnityEngine.Quaternion, mask: number): number;
			static OverlapBoxNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, results: UnityEngine.Collider[], orientation: UnityEngine.Quaternion): number;
			static OverlapBoxNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, results: UnityEngine.Collider[]): number;
			static BoxCastNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], orientation: UnityEngine.Quaternion, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
			static BoxCastNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], orientation: UnityEngine.Quaternion): number;
			static BoxCastNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], orientation: UnityEngine.Quaternion, maxDistance: number): number;
			static BoxCastNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[], orientation: UnityEngine.Quaternion, maxDistance: number, layerMask: number): number;
			static BoxCastNonAlloc(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, results: UnityEngine.RaycastHit[]): number;
			static BoxCastAll(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, maxDistance: number, layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
			static BoxCastAll(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, maxDistance: number, layerMask: number): UnityEngine.RaycastHit[];
			static BoxCastAll(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, maxDistance: number): UnityEngine.RaycastHit[];
			static BoxCastAll(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3, orientation: UnityEngine.Quaternion): UnityEngine.RaycastHit[];
			static BoxCastAll(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, direction: UnityEngine.Vector3): UnityEngine.RaycastHit[];
			static OverlapCapsuleNonAlloc(point0: UnityEngine.Vector3, point1: UnityEngine.Vector3, radius: number, results: UnityEngine.Collider[], layerMask: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): number;
			static OverlapCapsuleNonAlloc(point0: UnityEngine.Vector3, point1: UnityEngine.Vector3, radius: number, results: UnityEngine.Collider[], layerMask: number): number;
			static OverlapCapsuleNonAlloc(point0: UnityEngine.Vector3, point1: UnityEngine.Vector3, radius: number, results: UnityEngine.Collider[]): number;
			static RebuildBroadphaseRegions(worldBounds: UnityEngine.Bounds, subdivisions: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RaycastCommand {
			get from(): UnityEngine.Vector3;
			set from(value: UnityEngine.Vector3);
			get direction(): UnityEngine.Vector3;
			set direction(value: UnityEngine.Vector3);
			get distance(): number;
			set distance(value: number);
			get layerMask(): number;
			set layerMask(value: number);
			get maxHits(): number;
			set maxHits(value: number);
			constructor(from: UnityEngine.Vector3, direction: UnityEngine.Vector3, distance?: number, layerMask?: number, maxHits?: number);
			static ScheduleBatch(commands: any, results: any, minCommandsPerJob: number, dependsOn?: any): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SpherecastCommand {
			get origin(): UnityEngine.Vector3;
			set origin(value: UnityEngine.Vector3);
			get radius(): number;
			set radius(value: number);
			get direction(): UnityEngine.Vector3;
			set direction(value: UnityEngine.Vector3);
			get distance(): number;
			set distance(value: number);
			get layerMask(): number;
			set layerMask(value: number);
			constructor(origin: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, distance?: number, layerMask?: number);
			static ScheduleBatch(commands: any, results: any, minCommandsPerJob: number, dependsOn?: any): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CapsulecastCommand {
			get point1(): UnityEngine.Vector3;
			set point1(value: UnityEngine.Vector3);
			get point2(): UnityEngine.Vector3;
			set point2(value: UnityEngine.Vector3);
			get radius(): number;
			set radius(value: number);
			get direction(): UnityEngine.Vector3;
			set direction(value: UnityEngine.Vector3);
			get distance(): number;
			set distance(value: number);
			get layerMask(): number;
			set layerMask(value: number);
			constructor(p1: UnityEngine.Vector3, p2: UnityEngine.Vector3, radius: number, direction: UnityEngine.Vector3, distance?: number, layerMask?: number);
			static ScheduleBatch(commands: any, results: any, minCommandsPerJob: number, dependsOn?: any): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BoxcastCommand {
			get center(): UnityEngine.Vector3;
			set center(value: UnityEngine.Vector3);
			get halfExtents(): UnityEngine.Vector3;
			set halfExtents(value: UnityEngine.Vector3);
			get orientation(): UnityEngine.Quaternion;
			set orientation(value: UnityEngine.Quaternion);
			get direction(): UnityEngine.Vector3;
			set direction(value: UnityEngine.Vector3);
			get distance(): number;
			set distance(value: number);
			get layerMask(): number;
			set layerMask(value: number);
			constructor(center: UnityEngine.Vector3, halfExtents: UnityEngine.Vector3, orientation: UnityEngine.Quaternion, direction: UnityEngine.Vector3, distance?: number, layerMask?: number);
			static ScheduleBatch(commands: any, results: any, minCommandsPerJob: number, dependsOn?: any): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PhysicsScene2D {
			static op_Equality(lhs: UnityEngine.PhysicsScene2D, rhs: UnityEngine.PhysicsScene2D): boolean;
			static op_Inequality(lhs: UnityEngine.PhysicsScene2D, rhs: UnityEngine.PhysicsScene2D): boolean;
			static OverlapCollider(collider: UnityEngine.Collider2D, results: UnityEngine.Collider2D[], layerMask?: number): number;
			static OverlapCollider(collider: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			Equals(other: UnityEngine.PhysicsScene2D): boolean;
			IsValid(): boolean;
			IsEmpty(): boolean;
			Simulate(step: number): boolean;
			Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask?: number): UnityEngine.RaycastHit2D;
			Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D): UnityEngine.RaycastHit2D;
			Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], layerMask?: number): number;
			Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
			Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask?: number): UnityEngine.RaycastHit2D;
			Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, contactFilter: UnityEngine.ContactFilter2D): UnityEngine.RaycastHit2D;
			Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, results: UnityEngine.RaycastHit2D[], layerMask?: number): number;
			Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
			CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask?: number): UnityEngine.RaycastHit2D;
			CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, contactFilter: UnityEngine.ContactFilter2D): UnityEngine.RaycastHit2D;
			CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, results: UnityEngine.RaycastHit2D[], layerMask?: number): number;
			CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
			BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask?: number): UnityEngine.RaycastHit2D;
			BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, contactFilter: UnityEngine.ContactFilter2D): UnityEngine.RaycastHit2D;
			BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, results: UnityEngine.RaycastHit2D[], layerMask?: number): number;
			BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
			CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask?: number): UnityEngine.RaycastHit2D;
			CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, contactFilter: UnityEngine.ContactFilter2D): UnityEngine.RaycastHit2D;
			CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, results: UnityEngine.RaycastHit2D[], layerMask?: number): number;
			CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
			GetRayIntersection(ray: UnityEngine.Ray, distance: number, layerMask?: number): UnityEngine.RaycastHit2D;
			GetRayIntersection(ray: UnityEngine.Ray, distance: number, results: UnityEngine.RaycastHit2D[], layerMask?: number): number;
			OverlapPoint(point: UnityEngine.Vector2, layerMask?: number): UnityEngine.Collider2D;
			OverlapPoint(point: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D): UnityEngine.Collider2D;
			OverlapPoint(point: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask?: number): number;
			OverlapPoint(point: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			OverlapCircle(point: UnityEngine.Vector2, radius: number, layerMask?: number): UnityEngine.Collider2D;
			OverlapCircle(point: UnityEngine.Vector2, radius: number, contactFilter: UnityEngine.ContactFilter2D): UnityEngine.Collider2D;
			OverlapCircle(point: UnityEngine.Vector2, radius: number, results: UnityEngine.Collider2D[], layerMask?: number): number;
			OverlapCircle(point: UnityEngine.Vector2, radius: number, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask?: number): UnityEngine.Collider2D;
			OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, contactFilter: UnityEngine.ContactFilter2D): UnityEngine.Collider2D;
			OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, results: UnityEngine.Collider2D[], layerMask?: number): number;
			OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask?: number): UnityEngine.Collider2D;
			OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D): UnityEngine.Collider2D;
			OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask?: number): number;
			OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask?: number): UnityEngine.Collider2D;
			OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, contactFilter: UnityEngine.ContactFilter2D): UnityEngine.Collider2D;
			OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, results: UnityEngine.Collider2D[], layerMask?: number): number;
			OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PhysicsSceneExtensions2D extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Physics2D extends System.Object {
			static IgnoreRaycastLayer: number;
			static DefaultRaycastLayers: number;
			static AllLayers: number;
			static get defaultPhysicsScene(): UnityEngine.PhysicsScene2D;
			static get velocityIterations(): number;
			static set velocityIterations(value: number);
			static get positionIterations(): number;
			static set positionIterations(value: number);
			static get gravity(): UnityEngine.Vector2;
			static set gravity(value: UnityEngine.Vector2);
			static get queriesHitTriggers(): boolean;
			static set queriesHitTriggers(value: boolean);
			static get queriesStartInColliders(): boolean;
			static set queriesStartInColliders(value: boolean);
			static get callbacksOnDisable(): boolean;
			static set callbacksOnDisable(value: boolean);
			static get reuseCollisionCallbacks(): boolean;
			static set reuseCollisionCallbacks(value: boolean);
			static get autoSyncTransforms(): boolean;
			static set autoSyncTransforms(value: boolean);
			static get autoSimulation(): boolean;
			static set autoSimulation(value: boolean);
			static get jobOptions(): UnityEngine.PhysicsJobOptions2D;
			static set jobOptions(value: UnityEngine.PhysicsJobOptions2D);
			static get velocityThreshold(): number;
			static set velocityThreshold(value: number);
			static get maxLinearCorrection(): number;
			static set maxLinearCorrection(value: number);
			static get maxAngularCorrection(): number;
			static set maxAngularCorrection(value: number);
			static get maxTranslationSpeed(): number;
			static set maxTranslationSpeed(value: number);
			static get maxRotationSpeed(): number;
			static set maxRotationSpeed(value: number);
			static get defaultContactOffset(): number;
			static set defaultContactOffset(value: number);
			static get baumgarteScale(): number;
			static set baumgarteScale(value: number);
			static get baumgarteTOIScale(): number;
			static set baumgarteTOIScale(value: number);
			static get timeToSleep(): number;
			static set timeToSleep(value: number);
			static get linearSleepTolerance(): number;
			static set linearSleepTolerance(value: number);
			static get angularSleepTolerance(): number;
			static set angularSleepTolerance(value: number);
			static get alwaysShowColliders(): boolean;
			static set alwaysShowColliders(value: boolean);
			static get showColliderSleep(): boolean;
			static set showColliderSleep(value: boolean);
			static get showColliderContacts(): boolean;
			static set showColliderContacts(value: boolean);
			static get showColliderAABB(): boolean;
			static set showColliderAABB(value: boolean);
			static get contactArrowScale(): number;
			static set contactArrowScale(value: number);
			static get colliderAwakeColor(): UnityEngine.Color;
			static set colliderAwakeColor(value: UnityEngine.Color);
			static get colliderAsleepColor(): UnityEngine.Color;
			static set colliderAsleepColor(value: UnityEngine.Color);
			static get colliderContactColor(): UnityEngine.Color;
			static set colliderContactColor(value: UnityEngine.Color);
			static get colliderAABBColor(): UnityEngine.Color;
			static set colliderAABBColor(value: UnityEngine.Color);
			/**[Obsolete][Error]--"Physics2D.raycastsHitTriggers is deprecated. Use Physics2D.queriesHitTriggers instead. (UnityUpgradable) -> queriesHitTriggers" */
			static get raycastsHitTriggers(): boolean;
			/**[Obsolete][Error]--"Physics2D.raycastsHitTriggers is deprecated. Use Physics2D.queriesHitTriggers instead. (UnityUpgradable) -> queriesHitTriggers" */
			static set raycastsHitTriggers(value: boolean);
			/**[Obsolete][Error]--"Physics2D.raycastsStartInColliders is deprecated. Use Physics2D.queriesStartInColliders instead. (UnityUpgradable) -> queriesStartInColliders" */
			static get raycastsStartInColliders(): boolean;
			/**[Obsolete][Error]--"Physics2D.raycastsStartInColliders is deprecated. Use Physics2D.queriesStartInColliders instead. (UnityUpgradable) -> queriesStartInColliders" */
			static set raycastsStartInColliders(value: boolean);
			/**[Obsolete][Error]--"Physics2D.deleteStopsCallbacks is deprecated.(UnityUpgradable) -> changeStopsCallbacks" */
			static get deleteStopsCallbacks(): boolean;
			/**[Obsolete][Error]--"Physics2D.deleteStopsCallbacks is deprecated.(UnityUpgradable) -> changeStopsCallbacks" */
			static set deleteStopsCallbacks(value: boolean);
			/**[Obsolete]--"Physics2D.changeStopsCallbacks is deprecated and will always return false." */
			static get changeStopsCallbacks(): boolean;
			/**[Obsolete]--"Physics2D.changeStopsCallbacks is deprecated and will always return false." */
			static set changeStopsCallbacks(value: boolean);
			/**[Obsolete]--"Physics2D.minPenetrationForPenalty is deprecated. Use Physics2D.defaultContactOffset instead. (UnityUpgradable) -> defaultContactOffset" */
			static get minPenetrationForPenalty(): number;
			/**[Obsolete]--"Physics2D.minPenetrationForPenalty is deprecated. Use Physics2D.defaultContactOffset instead. (UnityUpgradable) -> defaultContactOffset" */
			static set minPenetrationForPenalty(value: number);
			constructor();
			static Simulate(step: number): boolean;
			static SyncTransforms(): void;
			static IgnoreCollision(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D): void;
			static IgnoreCollision(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D, ignore: boolean): void;
			static GetIgnoreCollision(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D): boolean;
			static IgnoreLayerCollision(layer1: number, layer2: number): void;
			static IgnoreLayerCollision(layer1: number, layer2: number, ignore: boolean): void;
			static GetIgnoreLayerCollision(layer1: number, layer2: number): boolean;
			static SetLayerCollisionMask(layer: number, layerMask: number): void;
			static GetLayerCollisionMask(layer: number): number;
			static IsTouching(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D): boolean;
			static IsTouching(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D): boolean;
			static IsTouching(collider: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D): boolean;
			static IsTouchingLayers(collider: UnityEngine.Collider2D): boolean;
			static IsTouchingLayers(collider: UnityEngine.Collider2D, layerMask: number): boolean;
			static Distance(colliderA: UnityEngine.Collider2D, colliderB: UnityEngine.Collider2D): UnityEngine.ColliderDistance2D;
			static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
			static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number): UnityEngine.RaycastHit2D;
			static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
			static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
			static Linecast(start: UnityEngine.Vector2, end: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
			static LinecastAll(start: UnityEngine.Vector2, end: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
			static LinecastAll(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number): UnityEngine.RaycastHit2D[];
			static LinecastAll(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
			static LinecastAll(start: UnityEngine.Vector2, end: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
			static LinecastNonAlloc(start: UnityEngine.Vector2, end: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
			static LinecastNonAlloc(start: UnityEngine.Vector2, end: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], layerMask: number): number;
			static LinecastNonAlloc(start: UnityEngine.Vector2, end: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], layerMask: number, minDepth: number): number;
			static LinecastNonAlloc(start: UnityEngine.Vector2, end: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], layerMask: number, minDepth: number, maxDepth: number): number;
			static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
			static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D;
			static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
			static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
			static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
			static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
			static Raycast(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
			static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
			static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
			static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
			static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
			static RaycastNonAlloc(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
			static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
			static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D[];
			static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
			static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
			static RaycastAll(origin: UnityEngine.Vector2, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
			static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
			static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D;
			static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
			static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
			static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
			static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
			static CircleCast(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
			static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
			static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D[];
			static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
			static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
			static CircleCastAll(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
			static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
			static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
			static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
			static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
			static CircleCastNonAlloc(origin: UnityEngine.Vector2, radius: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
			static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
			static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D;
			static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
			static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
			static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
			static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
			static BoxCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
			static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
			static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D[];
			static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
			static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
			static BoxCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
			static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
			static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
			static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
			static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
			static BoxCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
			static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D;
			static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D;
			static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
			static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D;
			static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D;
			static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
			static CapsuleCast(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
			static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2): UnityEngine.RaycastHit2D[];
			static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number): UnityEngine.RaycastHit2D[];
			static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
			static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number): UnityEngine.RaycastHit2D[];
			static CapsuleCastAll(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, distance: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.RaycastHit2D[];
			static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
			static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
			static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
			static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
			static CapsuleCastNonAlloc(origin: UnityEngine.Vector2, size: UnityEngine.Vector2, capsuleDirection: UnityEngine.CapsuleDirection2D, angle: number, direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
			static GetRayIntersection(ray: UnityEngine.Ray): UnityEngine.RaycastHit2D;
			static GetRayIntersection(ray: UnityEngine.Ray, distance: number): UnityEngine.RaycastHit2D;
			static GetRayIntersection(ray: UnityEngine.Ray, distance: number, layerMask: number): UnityEngine.RaycastHit2D;
			static GetRayIntersectionAll(ray: UnityEngine.Ray): UnityEngine.RaycastHit2D[];
			static GetRayIntersectionAll(ray: UnityEngine.Ray, distance: number): UnityEngine.RaycastHit2D[];
			static GetRayIntersectionAll(ray: UnityEngine.Ray, distance: number, layerMask: number): UnityEngine.RaycastHit2D[];
			static GetRayIntersectionNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit2D[]): number;
			static GetRayIntersectionNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit2D[], distance: number): number;
			static GetRayIntersectionNonAlloc(ray: UnityEngine.Ray, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
			static OverlapPoint(point: UnityEngine.Vector2): UnityEngine.Collider2D;
			static OverlapPoint(point: UnityEngine.Vector2, layerMask: number): UnityEngine.Collider2D;
			static OverlapPoint(point: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.Collider2D;
			static OverlapPoint(point: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
			static OverlapPoint(point: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			static OverlapPointAll(point: UnityEngine.Vector2): UnityEngine.Collider2D[];
			static OverlapPointAll(point: UnityEngine.Vector2, layerMask: number): UnityEngine.Collider2D[];
			static OverlapPointAll(point: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
			static OverlapPointAll(point: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
			static OverlapPointNonAlloc(point: UnityEngine.Vector2, results: UnityEngine.Collider2D[]): number;
			static OverlapPointNonAlloc(point: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number): number;
			static OverlapPointNonAlloc(point: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
			static OverlapPointNonAlloc(point: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
			static OverlapCircle(point: UnityEngine.Vector2, radius: number): UnityEngine.Collider2D;
			static OverlapCircle(point: UnityEngine.Vector2, radius: number, layerMask: number): UnityEngine.Collider2D;
			static OverlapCircle(point: UnityEngine.Vector2, radius: number, layerMask: number, minDepth: number): UnityEngine.Collider2D;
			static OverlapCircle(point: UnityEngine.Vector2, radius: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
			static OverlapCircle(point: UnityEngine.Vector2, radius: number, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			static OverlapCircleAll(point: UnityEngine.Vector2, radius: number): UnityEngine.Collider2D[];
			static OverlapCircleAll(point: UnityEngine.Vector2, radius: number, layerMask: number): UnityEngine.Collider2D[];
			static OverlapCircleAll(point: UnityEngine.Vector2, radius: number, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
			static OverlapCircleAll(point: UnityEngine.Vector2, radius: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
			static OverlapCircleNonAlloc(point: UnityEngine.Vector2, radius: number, results: UnityEngine.Collider2D[]): number;
			static OverlapCircleNonAlloc(point: UnityEngine.Vector2, radius: number, results: UnityEngine.Collider2D[], layerMask: number): number;
			static OverlapCircleNonAlloc(point: UnityEngine.Vector2, radius: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
			static OverlapCircleNonAlloc(point: UnityEngine.Vector2, radius: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
			static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number): UnityEngine.Collider2D;
			static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number): UnityEngine.Collider2D;
			static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number, minDepth: number): UnityEngine.Collider2D;
			static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
			static OverlapBox(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			static OverlapBoxAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number): UnityEngine.Collider2D[];
			static OverlapBoxAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number): UnityEngine.Collider2D[];
			static OverlapBoxAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
			static OverlapBoxAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
			static OverlapBoxNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, results: UnityEngine.Collider2D[]): number;
			static OverlapBoxNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, results: UnityEngine.Collider2D[], layerMask: number): number;
			static OverlapBoxNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
			static OverlapBoxNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, angle: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
			static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2): UnityEngine.Collider2D;
			static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number): UnityEngine.Collider2D;
			static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.Collider2D;
			static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
			static OverlapArea(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			static OverlapAreaAll(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2): UnityEngine.Collider2D[];
			static OverlapAreaAll(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number): UnityEngine.Collider2D[];
			static OverlapAreaAll(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
			static OverlapAreaAll(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
			static OverlapAreaNonAlloc(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, results: UnityEngine.Collider2D[]): number;
			static OverlapAreaNonAlloc(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number): number;
			static OverlapAreaNonAlloc(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
			static OverlapAreaNonAlloc(pointA: UnityEngine.Vector2, pointB: UnityEngine.Vector2, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
			static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number): UnityEngine.Collider2D;
			static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number): UnityEngine.Collider2D;
			static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number, minDepth: number): UnityEngine.Collider2D;
			static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D;
			static OverlapCapsule(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			static OverlapCapsuleAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number): UnityEngine.Collider2D[];
			static OverlapCapsuleAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number): UnityEngine.Collider2D[];
			static OverlapCapsuleAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number, minDepth: number): UnityEngine.Collider2D[];
			static OverlapCapsuleAll(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, layerMask: number, minDepth: number, maxDepth: number): UnityEngine.Collider2D[];
			static OverlapCapsuleNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, results: UnityEngine.Collider2D[]): number;
			static OverlapCapsuleNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, results: UnityEngine.Collider2D[], layerMask: number): number;
			static OverlapCapsuleNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number): number;
			static OverlapCapsuleNonAlloc(point: UnityEngine.Vector2, size: UnityEngine.Vector2, direction: UnityEngine.CapsuleDirection2D, angle: number, results: UnityEngine.Collider2D[], layerMask: number, minDepth: number, maxDepth: number): number;
			static OverlapCollider(collider: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			static GetContacts(collider1: UnityEngine.Collider2D, collider2: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D, contacts: UnityEngine.ContactPoint2D[]): number;
			static GetContacts(collider: UnityEngine.Collider2D, contacts: UnityEngine.ContactPoint2D[]): number;
			static GetContacts(collider: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D, contacts: UnityEngine.ContactPoint2D[]): number;
			static GetContacts(collider: UnityEngine.Collider2D, colliders: UnityEngine.Collider2D[]): number;
			static GetContacts(collider: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D, colliders: UnityEngine.Collider2D[]): number;
			static GetContacts(rigidbody: UnityEngine.Rigidbody2D, contacts: UnityEngine.ContactPoint2D[]): number;
			static GetContacts(rigidbody: UnityEngine.Rigidbody2D, contactFilter: UnityEngine.ContactFilter2D, contacts: UnityEngine.ContactPoint2D[]): number;
			static GetContacts(rigidbody: UnityEngine.Rigidbody2D, colliders: UnityEngine.Collider2D[]): number;
			static GetContacts(rigidbody: UnityEngine.Rigidbody2D, contactFilter: UnityEngine.ContactFilter2D, colliders: UnityEngine.Collider2D[]): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum CapsuleDirection2D { Vertical = 0, Horizontal = 1, }
		export enum RigidbodyConstraints2D { None = 0, FreezePositionX = 1, FreezePositionY = 2, FreezeRotation = 4, FreezePosition = 3, FreezeAll = 7, }
		export enum RigidbodyInterpolation2D { None = 0, Interpolate = 1, Extrapolate = 2, }
		export enum RigidbodySleepMode2D { NeverSleep = 0, StartAwake = 1, StartAsleep = 2, }
		export enum CollisionDetectionMode2D { None = 0, Discrete = 0, Continuous = 1, }
		export enum RigidbodyType2D { Dynamic = 0, Kinematic = 1, Static = 2, }
		export enum ForceMode2D { Force = 0, Impulse = 1, }
		export enum JointLimitState2D { Inactive = 0, LowerLimit = 1, UpperLimit = 2, EqualLimits = 3, }
		export enum EffectorSelection2D { Rigidbody = 0, Collider = 1, }
		export enum EffectorForceMode2D { Constant = 0, InverseLinear = 1, InverseSquared = 2, }
		export class ColliderDistance2D {
			get pointA(): UnityEngine.Vector2;
			set pointA(value: UnityEngine.Vector2);
			get pointB(): UnityEngine.Vector2;
			set pointB(value: UnityEngine.Vector2);
			get normal(): UnityEngine.Vector2;
			get distance(): number;
			set distance(value: number);
			get isOverlapped(): boolean;
			get isValid(): boolean;
			set isValid(value: boolean);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ContactFilter2D {
			useTriggers: boolean;
			useLayerMask: boolean;
			useDepth: boolean;
			useOutsideDepth: boolean;
			useNormalAngle: boolean;
			useOutsideNormalAngle: boolean;
			layerMask: UnityEngine.LayerMask;
			minDepth: number;
			maxDepth: number;
			minNormalAngle: number;
			maxNormalAngle: number;
			static NormalAngleUpperLimit: number;
			get isFiltering(): boolean;
			NoFilter(): UnityEngine.ContactFilter2D;
			ClearLayerMask(): void;
			SetLayerMask(layerMask: UnityEngine.LayerMask): void;
			ClearDepth(): void;
			SetDepth(minDepth: number, maxDepth: number): void;
			ClearNormalAngle(): void;
			SetNormalAngle(minNormalAngle: number, maxNormalAngle: number): void;
			IsFilteringTrigger(collider: UnityEngine.Collider2D): boolean;
			IsFilteringLayerMask(obj: UnityEngine.GameObject): boolean;
			IsFilteringDepth(obj: UnityEngine.GameObject): boolean;
			IsFilteringNormalAngle(normal: UnityEngine.Vector2): boolean;
			IsFilteringNormalAngle(angle: number): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Collision2D extends System.Object {
			get collider(): UnityEngine.Collider2D;
			get otherCollider(): UnityEngine.Collider2D;
			get rigidbody(): UnityEngine.Rigidbody2D;
			get otherRigidbody(): UnityEngine.Rigidbody2D;
			get transform(): UnityEngine.Transform;
			get gameObject(): UnityEngine.GameObject;
			get relativeVelocity(): UnityEngine.Vector2;
			get enabled(): boolean;
			get contacts(): UnityEngine.ContactPoint2D[];
			get contactCount(): number;
			constructor();
			GetContact(index: number): UnityEngine.ContactPoint2D;
			GetContacts(contacts: UnityEngine.ContactPoint2D[]): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ContactPoint2D {
			get point(): UnityEngine.Vector2;
			get normal(): UnityEngine.Vector2;
			get separation(): number;
			get normalImpulse(): number;
			get tangentImpulse(): number;
			get relativeVelocity(): UnityEngine.Vector2;
			get collider(): UnityEngine.Collider2D;
			get otherCollider(): UnityEngine.Collider2D;
			get rigidbody(): UnityEngine.Rigidbody2D;
			get otherRigidbody(): UnityEngine.Rigidbody2D;
			get enabled(): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class JointAngleLimits2D {
			get min(): number;
			set min(value: number);
			get max(): number;
			set max(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class JointTranslationLimits2D {
			get min(): number;
			set min(value: number);
			get max(): number;
			set max(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class JointMotor2D {
			get motorSpeed(): number;
			set motorSpeed(value: number);
			get maxMotorTorque(): number;
			set maxMotorTorque(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class JointSuspension2D {
			get dampingRatio(): number;
			set dampingRatio(value: number);
			get frequency(): number;
			set frequency(value: number);
			get angle(): number;
			set angle(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RaycastHit2D {
			get centroid(): UnityEngine.Vector2;
			set centroid(value: UnityEngine.Vector2);
			get point(): UnityEngine.Vector2;
			set point(value: UnityEngine.Vector2);
			get normal(): UnityEngine.Vector2;
			set normal(value: UnityEngine.Vector2);
			get distance(): number;
			set distance(value: number);
			get fraction(): number;
			set fraction(value: number);
			get collider(): UnityEngine.Collider2D;
			get rigidbody(): UnityEngine.Rigidbody2D;
			get transform(): UnityEngine.Transform;
			static op_Implicit(hit: UnityEngine.RaycastHit2D): boolean;
			CompareTo(other: UnityEngine.RaycastHit2D): number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PhysicsJobOptions2D {
			get useMultithreading(): boolean;
			set useMultithreading(value: boolean);
			get useConsistencySorting(): boolean;
			set useConsistencySorting(value: boolean);
			get interpolationPosesPerJob(): number;
			set interpolationPosesPerJob(value: number);
			get newContactsPerJob(): number;
			set newContactsPerJob(value: number);
			get collideContactsPerJob(): number;
			set collideContactsPerJob(value: number);
			get clearFlagsPerJob(): number;
			set clearFlagsPerJob(value: number);
			get clearBodyForcesPerJob(): number;
			set clearBodyForcesPerJob(value: number);
			get syncDiscreteFixturesPerJob(): number;
			set syncDiscreteFixturesPerJob(value: number);
			get syncContinuousFixturesPerJob(): number;
			set syncContinuousFixturesPerJob(value: number);
			get findNearestContactsPerJob(): number;
			set findNearestContactsPerJob(value: number);
			get updateTriggerContactsPerJob(): number;
			set updateTriggerContactsPerJob(value: number);
			get islandSolverCostThreshold(): number;
			set islandSolverCostThreshold(value: number);
			get islandSolverBodyCostScale(): number;
			set islandSolverBodyCostScale(value: number);
			get islandSolverContactCostScale(): number;
			set islandSolverContactCostScale(value: number);
			get islandSolverJointCostScale(): number;
			set islandSolverJointCostScale(value: number);
			get islandSolverBodiesPerJob(): number;
			set islandSolverBodiesPerJob(value: number);
			get islandSolverContactsPerJob(): number;
			set islandSolverContactsPerJob(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Rigidbody2D extends UnityEngine.Component {
			get position(): UnityEngine.Vector2;
			set position(value: UnityEngine.Vector2);
			get rotation(): number;
			set rotation(value: number);
			get velocity(): UnityEngine.Vector2;
			set velocity(value: UnityEngine.Vector2);
			get angularVelocity(): number;
			set angularVelocity(value: number);
			get useAutoMass(): boolean;
			set useAutoMass(value: boolean);
			get mass(): number;
			set mass(value: number);
			get sharedMaterial(): UnityEngine.PhysicsMaterial2D;
			set sharedMaterial(value: UnityEngine.PhysicsMaterial2D);
			get centerOfMass(): UnityEngine.Vector2;
			set centerOfMass(value: UnityEngine.Vector2);
			get worldCenterOfMass(): UnityEngine.Vector2;
			get inertia(): number;
			set inertia(value: number);
			get drag(): number;
			set drag(value: number);
			get angularDrag(): number;
			set angularDrag(value: number);
			get gravityScale(): number;
			set gravityScale(value: number);
			get bodyType(): UnityEngine.RigidbodyType2D;
			set bodyType(value: UnityEngine.RigidbodyType2D);
			get useFullKinematicContacts(): boolean;
			set useFullKinematicContacts(value: boolean);
			get isKinematic(): boolean;
			set isKinematic(value: boolean);
			/**[Obsolete]--"'fixedAngle' is no longer supported. Use constraints instead." */
			get fixedAngle(): boolean;
			/**[Obsolete]--"'fixedAngle' is no longer supported. Use constraints instead." */
			set fixedAngle(value: boolean);
			get freezeRotation(): boolean;
			set freezeRotation(value: boolean);
			get constraints(): UnityEngine.RigidbodyConstraints2D;
			set constraints(value: UnityEngine.RigidbodyConstraints2D);
			get simulated(): boolean;
			set simulated(value: boolean);
			get interpolation(): UnityEngine.RigidbodyInterpolation2D;
			set interpolation(value: UnityEngine.RigidbodyInterpolation2D);
			get sleepMode(): UnityEngine.RigidbodySleepMode2D;
			set sleepMode(value: UnityEngine.RigidbodySleepMode2D);
			get collisionDetectionMode(): UnityEngine.CollisionDetectionMode2D;
			set collisionDetectionMode(value: UnityEngine.CollisionDetectionMode2D);
			get attachedColliderCount(): number;
			constructor();
			MovePosition(position: UnityEngine.Vector2): void;
			MoveRotation(angle: number): void;
			IsSleeping(): boolean;
			IsAwake(): boolean;
			Sleep(): void;
			WakeUp(): void;
			IsTouching(collider: UnityEngine.Collider2D): boolean;
			IsTouching(collider: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D): boolean;
			IsTouching(contactFilter: UnityEngine.ContactFilter2D): boolean;
			IsTouchingLayers(): boolean;
			IsTouchingLayers(layerMask: number): boolean;
			OverlapPoint(point: UnityEngine.Vector2): boolean;
			Distance(collider: UnityEngine.Collider2D): UnityEngine.ColliderDistance2D;
			AddForce(force: UnityEngine.Vector2): void;
			AddForce(force: UnityEngine.Vector2, mode: UnityEngine.ForceMode2D): void;
			AddRelativeForce(relativeForce: UnityEngine.Vector2): void;
			AddRelativeForce(relativeForce: UnityEngine.Vector2, mode: UnityEngine.ForceMode2D): void;
			AddForceAtPosition(force: UnityEngine.Vector2, position: UnityEngine.Vector2): void;
			AddForceAtPosition(force: UnityEngine.Vector2, position: UnityEngine.Vector2, mode: UnityEngine.ForceMode2D): void;
			AddTorque(torque: number): void;
			AddTorque(torque: number, mode: UnityEngine.ForceMode2D): void;
			GetPoint(point: UnityEngine.Vector2): UnityEngine.Vector2;
			GetRelativePoint(relativePoint: UnityEngine.Vector2): UnityEngine.Vector2;
			GetVector(vector: UnityEngine.Vector2): UnityEngine.Vector2;
			GetRelativeVector(relativeVector: UnityEngine.Vector2): UnityEngine.Vector2;
			GetPointVelocity(point: UnityEngine.Vector2): UnityEngine.Vector2;
			GetRelativePointVelocity(relativePoint: UnityEngine.Vector2): UnityEngine.Vector2;
			OverlapCollider(contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			GetContacts(contacts: UnityEngine.ContactPoint2D[]): number;
			GetContacts(contactFilter: UnityEngine.ContactFilter2D, contacts: UnityEngine.ContactPoint2D[]): number;
			GetContacts(colliders: UnityEngine.Collider2D[]): number;
			GetContacts(contactFilter: UnityEngine.ContactFilter2D, colliders: UnityEngine.Collider2D[]): number;
			GetAttachedColliders(results: UnityEngine.Collider2D[]): number;
			Cast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
			Cast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
			Cast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
			Cast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Collider2D extends UnityEngine.Behaviour {
			get density(): number;
			set density(value: number);
			get isTrigger(): boolean;
			set isTrigger(value: boolean);
			get usedByEffector(): boolean;
			set usedByEffector(value: boolean);
			get usedByComposite(): boolean;
			set usedByComposite(value: boolean);
			get composite(): UnityEngine.CompositeCollider2D;
			get offset(): UnityEngine.Vector2;
			set offset(value: UnityEngine.Vector2);
			get attachedRigidbody(): UnityEngine.Rigidbody2D;
			get shapeCount(): number;
			get bounds(): UnityEngine.Bounds;
			get sharedMaterial(): UnityEngine.PhysicsMaterial2D;
			set sharedMaterial(value: UnityEngine.PhysicsMaterial2D);
			get friction(): number;
			get bounciness(): number;
			constructor();
			IsTouching(collider: UnityEngine.Collider2D): boolean;
			IsTouching(collider: UnityEngine.Collider2D, contactFilter: UnityEngine.ContactFilter2D): boolean;
			IsTouching(contactFilter: UnityEngine.ContactFilter2D): boolean;
			IsTouchingLayers(): boolean;
			IsTouchingLayers(layerMask: number): boolean;
			OverlapPoint(point: UnityEngine.Vector2): boolean;
			Distance(collider: UnityEngine.Collider2D): UnityEngine.ColliderDistance2D;
			OverlapCollider(contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.Collider2D[]): number;
			GetContacts(contacts: UnityEngine.ContactPoint2D[]): number;
			GetContacts(contactFilter: UnityEngine.ContactFilter2D, contacts: UnityEngine.ContactPoint2D[]): number;
			GetContacts(colliders: UnityEngine.Collider2D[]): number;
			GetContacts(contactFilter: UnityEngine.ContactFilter2D, colliders: UnityEngine.Collider2D[]): number;
			Cast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
			Cast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
			Cast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, ignoreSiblingColliders: boolean): number;
			Cast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
			Cast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
			Cast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number, ignoreSiblingColliders: boolean): number;
			Raycast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[]): number;
			Raycast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number): number;
			Raycast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number): number;
			Raycast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number): number;
			Raycast(direction: UnityEngine.Vector2, results: UnityEngine.RaycastHit2D[], distance: number, layerMask: number, minDepth: number, maxDepth: number): number;
			Raycast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[]): number;
			Raycast(direction: UnityEngine.Vector2, contactFilter: UnityEngine.ContactFilter2D, results: UnityEngine.RaycastHit2D[], distance: number): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CircleCollider2D extends UnityEngine.Collider2D {
			get radius(): number;
			set radius(value: number);
			/**[Obsolete][Error]--"CircleCollider2D.center has been deprecated. Use CircleCollider2D.offset instead (UnityUpgradable) -> offset" */
			get center(): UnityEngine.Vector2;
			/**[Obsolete][Error]--"CircleCollider2D.center has been deprecated. Use CircleCollider2D.offset instead (UnityUpgradable) -> offset" */
			set center(value: UnityEngine.Vector2);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CapsuleCollider2D extends UnityEngine.Collider2D {
			get size(): UnityEngine.Vector2;
			set size(value: UnityEngine.Vector2);
			get direction(): UnityEngine.CapsuleDirection2D;
			set direction(value: UnityEngine.CapsuleDirection2D);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EdgeCollider2D extends UnityEngine.Collider2D {
			get edgeRadius(): number;
			set edgeRadius(value: number);
			get edgeCount(): number;
			get pointCount(): number;
			get points(): UnityEngine.Vector2[];
			set points(value: UnityEngine.Vector2[]);
			constructor();
			Reset(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BoxCollider2D extends UnityEngine.Collider2D {
			get size(): UnityEngine.Vector2;
			set size(value: UnityEngine.Vector2);
			get edgeRadius(): number;
			set edgeRadius(value: number);
			get autoTiling(): boolean;
			set autoTiling(value: boolean);
			/**[Obsolete][Error]--"BoxCollider2D.center has been deprecated. Use BoxCollider2D.offset instead (UnityUpgradable) -> offset" */
			get center(): UnityEngine.Vector2;
			/**[Obsolete][Error]--"BoxCollider2D.center has been deprecated. Use BoxCollider2D.offset instead (UnityUpgradable) -> offset" */
			set center(value: UnityEngine.Vector2);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PolygonCollider2D extends UnityEngine.Collider2D {
			get autoTiling(): boolean;
			set autoTiling(value: boolean);
			get points(): UnityEngine.Vector2[];
			set points(value: UnityEngine.Vector2[]);
			get pathCount(): number;
			set pathCount(value: number);
			constructor();
			GetTotalPointCount(): number;
			GetPath(index: number): UnityEngine.Vector2[];
			SetPath(index: number, points: UnityEngine.Vector2[]): void;
			CreatePrimitive(sides: number): void;
			CreatePrimitive(sides: number, scale: UnityEngine.Vector2): void;
			CreatePrimitive(sides: number, scale: UnityEngine.Vector2, offset: UnityEngine.Vector2): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CompositeCollider2D extends UnityEngine.Collider2D {
			get geometryType(): UnityEngine.CompositeCollider2D.GeometryType;
			set geometryType(value: UnityEngine.CompositeCollider2D.GeometryType);
			get generationType(): UnityEngine.CompositeCollider2D.GenerationType;
			set generationType(value: UnityEngine.CompositeCollider2D.GenerationType);
			get vertexDistance(): number;
			set vertexDistance(value: number);
			get edgeRadius(): number;
			set edgeRadius(value: number);
			get pathCount(): number;
			get pointCount(): number;
			constructor();
			GenerateGeometry(): void;
			GetPathPointCount(index: number): number;
			GetPath(index: number, points: UnityEngine.Vector2[]): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Joint2D extends UnityEngine.Behaviour {
			get attachedRigidbody(): UnityEngine.Rigidbody2D;
			get connectedBody(): UnityEngine.Rigidbody2D;
			set connectedBody(value: UnityEngine.Rigidbody2D);
			get enableCollision(): boolean;
			set enableCollision(value: boolean);
			get breakForce(): number;
			set breakForce(value: number);
			get breakTorque(): number;
			set breakTorque(value: number);
			get reactionForce(): UnityEngine.Vector2;
			get reactionTorque(): number;
			/**[Obsolete][Error]--"Joint2D.collideConnected has been deprecated. Use Joint2D.enableCollision instead (UnityUpgradable) -> enableCollision" */
			get collideConnected(): boolean;
			/**[Obsolete][Error]--"Joint2D.collideConnected has been deprecated. Use Joint2D.enableCollision instead (UnityUpgradable) -> enableCollision" */
			set collideConnected(value: boolean);
			constructor();
			GetReactionForce(timeStep: number): UnityEngine.Vector2;
			GetReactionTorque(timeStep: number): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AnchoredJoint2D extends UnityEngine.Joint2D {
			get anchor(): UnityEngine.Vector2;
			set anchor(value: UnityEngine.Vector2);
			get connectedAnchor(): UnityEngine.Vector2;
			set connectedAnchor(value: UnityEngine.Vector2);
			get autoConfigureConnectedAnchor(): boolean;
			set autoConfigureConnectedAnchor(value: boolean);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SpringJoint2D extends UnityEngine.AnchoredJoint2D {
			get autoConfigureDistance(): boolean;
			set autoConfigureDistance(value: boolean);
			get distance(): number;
			set distance(value: number);
			get dampingRatio(): number;
			set dampingRatio(value: number);
			get frequency(): number;
			set frequency(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DistanceJoint2D extends UnityEngine.AnchoredJoint2D {
			get autoConfigureDistance(): boolean;
			set autoConfigureDistance(value: boolean);
			get distance(): number;
			set distance(value: number);
			get maxDistanceOnly(): boolean;
			set maxDistanceOnly(value: boolean);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FrictionJoint2D extends UnityEngine.AnchoredJoint2D {
			get maxForce(): number;
			set maxForce(value: number);
			get maxTorque(): number;
			set maxTorque(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HingeJoint2D extends UnityEngine.AnchoredJoint2D {
			get useMotor(): boolean;
			set useMotor(value: boolean);
			get useLimits(): boolean;
			set useLimits(value: boolean);
			get motor(): UnityEngine.JointMotor2D;
			set motor(value: UnityEngine.JointMotor2D);
			get limits(): UnityEngine.JointAngleLimits2D;
			set limits(value: UnityEngine.JointAngleLimits2D);
			get limitState(): UnityEngine.JointLimitState2D;
			get referenceAngle(): number;
			get jointAngle(): number;
			get jointSpeed(): number;
			constructor();
			GetMotorTorque(timeStep: number): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RelativeJoint2D extends UnityEngine.Joint2D {
			get maxForce(): number;
			set maxForce(value: number);
			get maxTorque(): number;
			set maxTorque(value: number);
			get correctionScale(): number;
			set correctionScale(value: number);
			get autoConfigureOffset(): boolean;
			set autoConfigureOffset(value: boolean);
			get linearOffset(): UnityEngine.Vector2;
			set linearOffset(value: UnityEngine.Vector2);
			get angularOffset(): number;
			set angularOffset(value: number);
			get target(): UnityEngine.Vector2;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SliderJoint2D extends UnityEngine.AnchoredJoint2D {
			get autoConfigureAngle(): boolean;
			set autoConfigureAngle(value: boolean);
			get angle(): number;
			set angle(value: number);
			get useMotor(): boolean;
			set useMotor(value: boolean);
			get useLimits(): boolean;
			set useLimits(value: boolean);
			get motor(): UnityEngine.JointMotor2D;
			set motor(value: UnityEngine.JointMotor2D);
			get limits(): UnityEngine.JointTranslationLimits2D;
			set limits(value: UnityEngine.JointTranslationLimits2D);
			get limitState(): UnityEngine.JointLimitState2D;
			get referenceAngle(): number;
			get jointTranslation(): number;
			get jointSpeed(): number;
			constructor();
			GetMotorForce(timeStep: number): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TargetJoint2D extends UnityEngine.Joint2D {
			get anchor(): UnityEngine.Vector2;
			set anchor(value: UnityEngine.Vector2);
			get target(): UnityEngine.Vector2;
			set target(value: UnityEngine.Vector2);
			get autoConfigureTarget(): boolean;
			set autoConfigureTarget(value: boolean);
			get maxForce(): number;
			set maxForce(value: number);
			get dampingRatio(): number;
			set dampingRatio(value: number);
			get frequency(): number;
			set frequency(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FixedJoint2D extends UnityEngine.AnchoredJoint2D {
			get dampingRatio(): number;
			set dampingRatio(value: number);
			get frequency(): number;
			set frequency(value: number);
			get referenceAngle(): number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WheelJoint2D extends UnityEngine.AnchoredJoint2D {
			get suspension(): UnityEngine.JointSuspension2D;
			set suspension(value: UnityEngine.JointSuspension2D);
			get useMotor(): boolean;
			set useMotor(value: boolean);
			get motor(): UnityEngine.JointMotor2D;
			set motor(value: UnityEngine.JointMotor2D);
			get jointTranslation(): number;
			get jointLinearSpeed(): number;
			get jointSpeed(): number;
			get jointAngle(): number;
			constructor();
			GetMotorTorque(timeStep: number): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Effector2D extends UnityEngine.Behaviour {
			get useColliderMask(): boolean;
			set useColliderMask(value: boolean);
			get colliderMask(): number;
			set colliderMask(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AreaEffector2D extends UnityEngine.Effector2D {
			get forceAngle(): number;
			set forceAngle(value: number);
			get useGlobalAngle(): boolean;
			set useGlobalAngle(value: boolean);
			get forceMagnitude(): number;
			set forceMagnitude(value: number);
			get forceVariation(): number;
			set forceVariation(value: number);
			get drag(): number;
			set drag(value: number);
			get angularDrag(): number;
			set angularDrag(value: number);
			get forceTarget(): UnityEngine.EffectorSelection2D;
			set forceTarget(value: UnityEngine.EffectorSelection2D);
			/**[Obsolete][Error]--"AreaEffector2D.forceDirection has been deprecated. Use AreaEffector2D.forceAngle instead (UnityUpgradable) -> forceAngle" */
			get forceDirection(): number;
			/**[Obsolete][Error]--"AreaEffector2D.forceDirection has been deprecated. Use AreaEffector2D.forceAngle instead (UnityUpgradable) -> forceAngle" */
			set forceDirection(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BuoyancyEffector2D extends UnityEngine.Effector2D {
			get surfaceLevel(): number;
			set surfaceLevel(value: number);
			get density(): number;
			set density(value: number);
			get linearDrag(): number;
			set linearDrag(value: number);
			get angularDrag(): number;
			set angularDrag(value: number);
			get flowAngle(): number;
			set flowAngle(value: number);
			get flowMagnitude(): number;
			set flowMagnitude(value: number);
			get flowVariation(): number;
			set flowVariation(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PointEffector2D extends UnityEngine.Effector2D {
			get forceMagnitude(): number;
			set forceMagnitude(value: number);
			get forceVariation(): number;
			set forceVariation(value: number);
			get distanceScale(): number;
			set distanceScale(value: number);
			get drag(): number;
			set drag(value: number);
			get angularDrag(): number;
			set angularDrag(value: number);
			get forceSource(): UnityEngine.EffectorSelection2D;
			set forceSource(value: UnityEngine.EffectorSelection2D);
			get forceTarget(): UnityEngine.EffectorSelection2D;
			set forceTarget(value: UnityEngine.EffectorSelection2D);
			get forceMode(): UnityEngine.EffectorForceMode2D;
			set forceMode(value: UnityEngine.EffectorForceMode2D);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PlatformEffector2D extends UnityEngine.Effector2D {
			get useOneWay(): boolean;
			set useOneWay(value: boolean);
			get useOneWayGrouping(): boolean;
			set useOneWayGrouping(value: boolean);
			get useSideFriction(): boolean;
			set useSideFriction(value: boolean);
			get useSideBounce(): boolean;
			set useSideBounce(value: boolean);
			get surfaceArc(): number;
			set surfaceArc(value: number);
			get sideArc(): number;
			set sideArc(value: number);
			get rotationalOffset(): number;
			set rotationalOffset(value: number);
			/**[Obsolete][Error]--"PlatformEffector2D.oneWay has been deprecated. Use PlatformEffector2D.useOneWay instead (UnityUpgradable) -> useOneWay" */
			get oneWay(): boolean;
			/**[Obsolete][Error]--"PlatformEffector2D.oneWay has been deprecated. Use PlatformEffector2D.useOneWay instead (UnityUpgradable) -> useOneWay" */
			set oneWay(value: boolean);
			/**[Obsolete][Error]--"PlatformEffector2D.sideFriction has been deprecated. Use PlatformEffector2D.useSideFriction instead (UnityUpgradable) -> useSideFriction" */
			get sideFriction(): boolean;
			/**[Obsolete][Error]--"PlatformEffector2D.sideFriction has been deprecated. Use PlatformEffector2D.useSideFriction instead (UnityUpgradable) -> useSideFriction" */
			set sideFriction(value: boolean);
			/**[Obsolete][Error]--"PlatformEffector2D.sideBounce has been deprecated. Use PlatformEffector2D.useSideBounce instead (UnityUpgradable) -> useSideBounce" */
			get sideBounce(): boolean;
			/**[Obsolete][Error]--"PlatformEffector2D.sideBounce has been deprecated. Use PlatformEffector2D.useSideBounce instead (UnityUpgradable) -> useSideBounce" */
			set sideBounce(value: boolean);
			/**[Obsolete][Error]--"PlatformEffector2D.sideAngleVariance has been deprecated. Use PlatformEffector2D.sideArc instead (UnityUpgradable) -> sideArc" */
			get sideAngleVariance(): number;
			/**[Obsolete][Error]--"PlatformEffector2D.sideAngleVariance has been deprecated. Use PlatformEffector2D.sideArc instead (UnityUpgradable) -> sideArc" */
			set sideAngleVariance(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SurfaceEffector2D extends UnityEngine.Effector2D {
			get speed(): number;
			set speed(value: number);
			get speedVariation(): number;
			set speedVariation(value: number);
			get forceScale(): number;
			set forceScale(value: number);
			get useContactForce(): boolean;
			set useContactForce(value: boolean);
			get useFriction(): boolean;
			set useFriction(value: boolean);
			get useBounce(): boolean;
			set useBounce(value: boolean);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PhysicsUpdateBehaviour2D extends UnityEngine.Behaviour {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ConstantForce2D extends UnityEngine.PhysicsUpdateBehaviour2D {
			get force(): UnityEngine.Vector2;
			set force(value: UnityEngine.Vector2);
			get relativeForce(): UnityEngine.Vector2;
			set relativeForce(value: UnityEngine.Vector2);
			get torque(): number;
			set torque(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PhysicsMaterial2D extends UnityEngine.Object {
			get bounciness(): number;
			set bounciness(value: number);
			get friction(): number;
			set friction(value: number);
			constructor();
			constructor(name: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ScreenCapture extends System.Object {
			static CaptureScreenshot(filename: string): void;
			static CaptureScreenshot(filename: string, superSize: number): void;
			static CaptureScreenshot(filename: string, stereoCaptureMode: UnityEngine.ScreenCapture.StereoScreenCaptureMode): void;
			static CaptureScreenshotAsTexture(): UnityEngine.Texture2D;
			static CaptureScreenshotAsTexture(superSize: number): UnityEngine.Texture2D;
			static CaptureScreenshotAsTexture(stereoCaptureMode: UnityEngine.ScreenCapture.StereoScreenCaptureMode): UnityEngine.Texture2D;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SpriteMask extends UnityEngine.Renderer {
			get frontSortingLayerID(): number;
			set frontSortingLayerID(value: number);
			get frontSortingOrder(): number;
			set frontSortingOrder(value: number);
			get backSortingLayerID(): number;
			set backSortingLayerID(value: number);
			get backSortingOrder(): number;
			set backSortingOrder(value: number);
			get alphaCutoff(): number;
			set alphaCutoff(value: number);
			get sprite(): UnityEngine.Sprite;
			set sprite(value: UnityEngine.Sprite);
			get isCustomRangeActive(): boolean;
			set isCustomRangeActive(value: boolean);
			get spriteSortPoint(): UnityEngine.SpriteSortPoint;
			set spriteSortPoint(value: UnityEngine.SpriteSortPoint);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StreamingController extends UnityEngine.Behaviour {
			get streamingMipmapBias(): number;
			set streamingMipmapBias(value: number);
			constructor();
			SetPreloading(timeoutSeconds?: number, activateCameraOnTimeout?: boolean, disableCameraCuttingFrom?: UnityEngine.Camera): void;
			CancelPreloading(): void;
			IsPreloading(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ProceduralMaterial extends UnityEngine.Material {
			get cacheSize(): UnityEngine.ProceduralCacheSize;
			set cacheSize(value: UnityEngine.ProceduralCacheSize);
			get animationUpdateRate(): number;
			set animationUpdateRate(value: number);
			get isProcessing(): boolean;
			get isCachedDataAvailable(): boolean;
			get isLoadTimeGenerated(): boolean;
			set isLoadTimeGenerated(value: boolean);
			get loadingBehavior(): UnityEngine.ProceduralLoadingBehavior;
			static get isSupported(): boolean;
			static get substanceProcessorUsage(): UnityEngine.ProceduralProcessorUsage;
			static set substanceProcessorUsage(value: UnityEngine.ProceduralProcessorUsage);
			get preset(): string;
			set preset(value: string);
			get isReadable(): boolean;
			set isReadable(value: boolean);
			get isFrozen(): boolean;
			static StopRebuilds(): void;
			GetProceduralPropertyDescriptions(): UnityEngine.ProceduralPropertyDescription[];
			HasProceduralProperty(inputName: string): boolean;
			GetProceduralBoolean(inputName: string): boolean;
			IsProceduralPropertyVisible(inputName: string): boolean;
			SetProceduralBoolean(inputName: string, value: boolean): void;
			GetProceduralFloat(inputName: string): number;
			SetProceduralFloat(inputName: string, value: number): void;
			GetProceduralVector(inputName: string): UnityEngine.Vector4;
			SetProceduralVector(inputName: string, value: UnityEngine.Vector4): void;
			GetProceduralColor(inputName: string): UnityEngine.Color;
			SetProceduralColor(inputName: string, value: UnityEngine.Color): void;
			GetProceduralEnum(inputName: string): number;
			SetProceduralEnum(inputName: string, value: number): void;
			GetProceduralTexture(inputName: string): UnityEngine.Texture2D;
			SetProceduralTexture(inputName: string, value: UnityEngine.Texture2D): void;
			GetProceduralString(inputName: string): string;
			SetProceduralString(inputName: string, value: string): void;
			IsProceduralPropertyCached(inputName: string): boolean;
			CacheProceduralProperty(inputName: string, value: boolean): void;
			ClearCache(): void;
			RebuildTextures(): void;
			RebuildTexturesImmediately(): void;
			GetGeneratedTextures(): UnityEngine.Texture[];
			GetGeneratedTexture(textureName: string): UnityEngine.ProceduralTexture;
			FreezeAndReleaseSourceData(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ProceduralProcessorUsage { Unsupported = 0, One = 1, Half = 2, All = 3, }
		export enum ProceduralCacheSize { Tiny = 0, Medium = 1, Heavy = 2, NoLimit = 3, None = 4, }
		export enum ProceduralLoadingBehavior { DoNothing = 0, Generate = 1, BakeAndKeep = 2, BakeAndDiscard = 3, Cache = 4, DoNothingAndCache = 5, }
		export enum ProceduralPropertyType { Boolean = 0, Float = 1, Vector2 = 2, Vector3 = 3, Vector4 = 4, Color3 = 5, Color4 = 6, Enum = 7, Texture = 8, String = 9, }
		export enum ProceduralOutputType { Unknown = 0, Diffuse = 1, Normal = 2, Height = 3, Emissive = 4, Specular = 5, Opacity = 6, Smoothness = 7, AmbientOcclusion = 8, DetailMask = 9, Metallic = 10, Roughness = 11, }
		export class ProceduralPropertyDescription extends System.Object {
			name: string;
			label: string;
			group: string;
			type: UnityEngine.ProceduralPropertyType;
			hasRange: boolean;
			minimum: number;
			maximum: number;
			step: number;
			enumOptions: string[];
			componentLabels: string[];
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ProceduralTexture extends UnityEngine.Texture {
			get hasAlpha(): boolean;
			get format(): UnityEngine.TextureFormat;
			GetProceduralOutputType(): UnityEngine.ProceduralOutputType;
			GetPixels32(x: number, y: number, blockWidth: number, blockHeight: number): UnityEngine.Color32[];
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum TerrainChangedFlags { Heightmap = 1, TreeInstances = 2, DelayedHeightmapUpdate = 4, FlushEverythingImmediately = 8, RemoveDirtyDetailsImmediately = 16, WillBeDestroyed = 256, }
		export enum TerrainRenderFlags { heightmap = 1, trees = 2, details = 4, all = 7, Heightmap = 1, Trees = 2, Details = 4, All = 7, }
		export class Terrain extends UnityEngine.Behaviour {
			get terrainData(): UnityEngine.TerrainData;
			set terrainData(value: UnityEngine.TerrainData);
			get treeDistance(): number;
			set treeDistance(value: number);
			get treeBillboardDistance(): number;
			set treeBillboardDistance(value: number);
			get treeCrossFadeLength(): number;
			set treeCrossFadeLength(value: number);
			get treeMaximumFullLODCount(): number;
			set treeMaximumFullLODCount(value: number);
			get detailObjectDistance(): number;
			set detailObjectDistance(value: number);
			get detailObjectDensity(): number;
			set detailObjectDensity(value: number);
			get heightmapPixelError(): number;
			set heightmapPixelError(value: number);
			get heightmapMaximumLOD(): number;
			set heightmapMaximumLOD(value: number);
			get basemapDistance(): number;
			set basemapDistance(value: number);
			/**[Obsolete][Error]--"splatmapDistance is deprecated, please use basemapDistance instead. (UnityUpgradable) -> basemapDistance" */
			get splatmapDistance(): number;
			/**[Obsolete][Error]--"splatmapDistance is deprecated, please use basemapDistance instead. (UnityUpgradable) -> basemapDistance" */
			set splatmapDistance(value: number);
			get lightmapIndex(): number;
			set lightmapIndex(value: number);
			get realtimeLightmapIndex(): number;
			set realtimeLightmapIndex(value: number);
			get lightmapScaleOffset(): UnityEngine.Vector4;
			set lightmapScaleOffset(value: UnityEngine.Vector4);
			get realtimeLightmapScaleOffset(): UnityEngine.Vector4;
			set realtimeLightmapScaleOffset(value: UnityEngine.Vector4);
			get freeUnusedRenderingResources(): boolean;
			set freeUnusedRenderingResources(value: boolean);
			get castShadows(): boolean;
			set castShadows(value: boolean);
			get reflectionProbeUsage(): any;
			set reflectionProbeUsage(value: any);
			get materialType(): UnityEngine.Terrain.MaterialType;
			set materialType(value: UnityEngine.Terrain.MaterialType);
			get materialTemplate(): UnityEngine.Material;
			set materialTemplate(value: UnityEngine.Material);
			get legacySpecular(): UnityEngine.Color;
			set legacySpecular(value: UnityEngine.Color);
			get legacyShininess(): number;
			set legacyShininess(value: number);
			get drawHeightmap(): boolean;
			set drawHeightmap(value: boolean);
			get allowAutoConnect(): boolean;
			set allowAutoConnect(value: boolean);
			get groupingID(): number;
			set groupingID(value: number);
			get drawInstanced(): boolean;
			set drawInstanced(value: boolean);
			get normalmapTexture(): UnityEngine.RenderTexture;
			get drawTreesAndFoliage(): boolean;
			set drawTreesAndFoliage(value: boolean);
			get patchBoundsMultiplier(): UnityEngine.Vector3;
			set patchBoundsMultiplier(value: UnityEngine.Vector3);
			get treeLODBiasMultiplier(): number;
			set treeLODBiasMultiplier(value: number);
			get collectDetailPatches(): boolean;
			set collectDetailPatches(value: boolean);
			get editorRenderFlags(): UnityEngine.TerrainRenderFlags;
			set editorRenderFlags(value: UnityEngine.TerrainRenderFlags);
			get bakeLightProbesForTrees(): boolean;
			set bakeLightProbesForTrees(value: boolean);
			get deringLightProbesForTrees(): boolean;
			set deringLightProbesForTrees(value: boolean);
			get preserveTreePrototypeLayers(): boolean;
			set preserveTreePrototypeLayers(value: boolean);
			static get heightmapTextureFormat(): UnityEngine.TextureFormat;
			static get heightmapRenderTextureFormat(): UnityEngine.RenderTextureFormat;
			static get activeTerrain(): UnityEngine.Terrain;
			static get activeTerrains(): UnityEngine.Terrain[];
			get leftNeighbor(): UnityEngine.Terrain;
			get rightNeighbor(): UnityEngine.Terrain;
			get topNeighbor(): UnityEngine.Terrain;
			get bottomNeighbor(): UnityEngine.Terrain;
			constructor();
			static SetConnectivityDirty(): void;
			static CreateTerrainGameObject(assignTerrain: UnityEngine.TerrainData): UnityEngine.GameObject;
			GetClosestReflectionProbes(result: any): void;
			SampleHeight(worldPosition: UnityEngine.Vector3): number;
			ApplyDelayedHeightmapModification(): void;
			AddTreeInstance(instance: UnityEngine.TreeInstance): void;
			SetNeighbors(left: UnityEngine.Terrain, top: UnityEngine.Terrain, right: UnityEngine.Terrain, bottom: UnityEngine.Terrain): void;
			GetPosition(): UnityEngine.Vector3;
			Flush(): void;
			SetSplatMaterialPropertyBlock(properties: UnityEngine.MaterialPropertyBlock): void;
			GetSplatMaterialPropertyBlock(dest: UnityEngine.MaterialPropertyBlock): void;
			/**extension method */
			UpdateGIMaterials(): void;
			/**extension method */
			UpdateGIMaterials(x: number, y: number, width: number, height: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TerrainExtensions extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Tree extends UnityEngine.Component {
			get data(): UnityEngine.ScriptableObject;
			set data(value: UnityEngine.ScriptableObject);
			get hasSpeedTreeWind(): boolean;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TreePrototype extends System.Object {
			get prefab(): UnityEngine.GameObject;
			set prefab(value: UnityEngine.GameObject);
			get bendFactor(): number;
			set bendFactor(value: number);
			constructor();
			constructor(other: UnityEngine.TreePrototype);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum DetailRenderMode { GrassBillboard = 0, VertexLit = 1, Grass = 2, }
		export class DetailPrototype extends System.Object {
			get prototype(): UnityEngine.GameObject;
			set prototype(value: UnityEngine.GameObject);
			get prototypeTexture(): UnityEngine.Texture2D;
			set prototypeTexture(value: UnityEngine.Texture2D);
			get minWidth(): number;
			set minWidth(value: number);
			get maxWidth(): number;
			set maxWidth(value: number);
			get minHeight(): number;
			set minHeight(value: number);
			get maxHeight(): number;
			set maxHeight(value: number);
			get noiseSpread(): number;
			set noiseSpread(value: number);
			get bendFactor(): number;
			set bendFactor(value: number);
			get healthyColor(): UnityEngine.Color;
			set healthyColor(value: UnityEngine.Color);
			get dryColor(): UnityEngine.Color;
			set dryColor(value: UnityEngine.Color);
			get renderMode(): UnityEngine.DetailRenderMode;
			set renderMode(value: UnityEngine.DetailRenderMode);
			get usePrototypeMesh(): boolean;
			set usePrototypeMesh(value: boolean);
			constructor();
			constructor(other: UnityEngine.DetailPrototype);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SplatPrototype extends System.Object {
			get texture(): UnityEngine.Texture2D;
			set texture(value: UnityEngine.Texture2D);
			get normalMap(): UnityEngine.Texture2D;
			set normalMap(value: UnityEngine.Texture2D);
			get tileSize(): UnityEngine.Vector2;
			set tileSize(value: UnityEngine.Vector2);
			get tileOffset(): UnityEngine.Vector2;
			set tileOffset(value: UnityEngine.Vector2);
			get specular(): UnityEngine.Color;
			set specular(value: UnityEngine.Color);
			get metallic(): number;
			set metallic(value: number);
			get smoothness(): number;
			set smoothness(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TreeInstance {
			position: UnityEngine.Vector3;
			widthScale: number;
			heightScale: number;
			rotation: number;
			color: UnityEngine.Color32;
			lightmapColor: UnityEngine.Color32;
			prototypeIndex: number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PatchExtents {
			get min(): number;
			set min(value: number);
			get max(): number;
			set max(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TerrainData extends UnityEngine.Object {
			get heightmapWidth(): number;
			get heightmapHeight(): number;
			get heightmapTexture(): UnityEngine.RenderTexture;
			get heightmapResolution(): number;
			set heightmapResolution(value: number);
			get heightmapScale(): UnityEngine.Vector3;
			get size(): UnityEngine.Vector3;
			set size(value: UnityEngine.Vector3);
			get bounds(): UnityEngine.Bounds;
			get thickness(): number;
			set thickness(value: number);
			get wavingGrassStrength(): number;
			set wavingGrassStrength(value: number);
			get wavingGrassAmount(): number;
			set wavingGrassAmount(value: number);
			get wavingGrassSpeed(): number;
			set wavingGrassSpeed(value: number);
			get wavingGrassTint(): UnityEngine.Color;
			set wavingGrassTint(value: UnityEngine.Color);
			get detailWidth(): number;
			get detailHeight(): number;
			get detailPatchCount(): number;
			get detailResolution(): number;
			get detailResolutionPerPatch(): number;
			get detailPrototypes(): UnityEngine.DetailPrototype[];
			set detailPrototypes(value: UnityEngine.DetailPrototype[]);
			get treeInstances(): UnityEngine.TreeInstance[];
			set treeInstances(value: UnityEngine.TreeInstance[]);
			get treeInstanceCount(): number;
			get treePrototypes(): UnityEngine.TreePrototype[];
			set treePrototypes(value: UnityEngine.TreePrototype[]);
			get alphamapLayers(): number;
			get alphamapResolution(): number;
			set alphamapResolution(value: number);
			get alphamapWidth(): number;
			get alphamapHeight(): number;
			get baseMapResolution(): number;
			set baseMapResolution(value: number);
			get alphamapTextureCount(): number;
			get alphamapTextures(): UnityEngine.Texture2D[];
			/**[Obsolete]--"Please use the terrainLayers API instead." */
			get splatPrototypes(): UnityEngine.SplatPrototype[];
			/**[Obsolete]--"Please use the terrainLayers API instead." */
			set splatPrototypes(value: UnityEngine.SplatPrototype[]);
			get terrainLayers(): UnityEngine.TerrainLayer[];
			set terrainLayers(value: UnityEngine.TerrainLayer[]);
			constructor();
			UpdateDirtyRegion(x: number, y: number, width: number, height: number, syncHeightmapTextureImmediately: boolean): void;
			GetHeight(x: number, y: number): number;
			GetInterpolatedHeight(x: number, y: number): number;
			GetHeights(xBase: number, yBase: number, width: number, height: number): number[];
			SetHeights(xBase: number, yBase: number, heights: number[]): void;
			GetPatchMinMaxHeights(): UnityEngine.PatchExtents[];
			OverrideMinMaxPatchHeights(minMaxHeights: UnityEngine.PatchExtents[]): void;
			GetMaximumHeightError(): number[];
			OverrideMaximumHeightError(maxError: number[]): void;
			SetHeightsDelayLOD(xBase: number, yBase: number, heights: number[]): void;
			GetSteepness(x: number, y: number): number;
			GetInterpolatedNormal(x: number, y: number): UnityEngine.Vector3;
			SetDetailResolution(detailResolution: number, resolutionPerPatch: number): void;
			RefreshPrototypes(): void;
			GetSupportedLayers(xBase: number, yBase: number, totalWidth: number, totalHeight: number): number[];
			GetDetailLayer(xBase: number, yBase: number, width: number, height: number, layer: number): number[];
			SetDetailLayer(xBase: number, yBase: number, layer: number, details: number[]): void;
			GetTreeInstance(index: number): UnityEngine.TreeInstance;
			SetTreeInstance(index: number, instance: UnityEngine.TreeInstance): void;
			GetAlphamaps(x: number, y: number, width: number, height: number): number[];
			SetAlphamaps(x: number, y: number, map: number[]): void;
			SetBaseMapDirty(): void;
			GetAlphamapTexture(index: number): UnityEngine.Texture2D;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TerrainLayer extends UnityEngine.Object {
			get diffuseTexture(): UnityEngine.Texture2D;
			set diffuseTexture(value: UnityEngine.Texture2D);
			get normalMapTexture(): UnityEngine.Texture2D;
			set normalMapTexture(value: UnityEngine.Texture2D);
			get maskMapTexture(): UnityEngine.Texture2D;
			set maskMapTexture(value: UnityEngine.Texture2D);
			get tileSize(): UnityEngine.Vector2;
			set tileSize(value: UnityEngine.Vector2);
			get tileOffset(): UnityEngine.Vector2;
			set tileOffset(value: UnityEngine.Vector2);
			get specular(): UnityEngine.Color;
			set specular(value: UnityEngine.Color);
			get metallic(): number;
			set metallic(value: number);
			get smoothness(): number;
			set smoothness(value: number);
			get normalScale(): number;
			set normalScale(value: number);
			get diffuseRemapMin(): UnityEngine.Vector4;
			set diffuseRemapMin(value: UnityEngine.Vector4);
			get diffuseRemapMax(): UnityEngine.Vector4;
			set diffuseRemapMax(value: UnityEngine.Vector4);
			get maskMapRemapMin(): UnityEngine.Vector4;
			set maskMapRemapMin(value: UnityEngine.Vector4);
			get maskMapRemapMax(): UnityEngine.Vector4;
			set maskMapRemapMax(value: UnityEngine.Vector4);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TerrainCollider extends UnityEngine.Collider {
			get terrainData(): UnityEngine.TerrainData;
			set terrainData(value: UnityEngine.TerrainData);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum FontStyle { Normal = 0, Bold = 1, Italic = 2, BoldAndItalic = 3, }
		export class TextGenerationSettings {
			font: UnityEngine.Font;
			color: UnityEngine.Color;
			fontSize: number;
			lineSpacing: number;
			richText: boolean;
			scaleFactor: number;
			fontStyle: UnityEngine.FontStyle;
			textAnchor: UnityEngine.TextAnchor;
			alignByGeometry: boolean;
			resizeTextForBestFit: boolean;
			resizeTextMinSize: number;
			resizeTextMaxSize: number;
			updateBounds: boolean;
			verticalOverflow: UnityEngine.VerticalWrapMode;
			horizontalOverflow: UnityEngine.HorizontalWrapMode;
			generationExtents: UnityEngine.Vector2;
			pivot: UnityEngine.Vector2;
			generateOutOfBounds: boolean;
			Equals(other: UnityEngine.TextGenerationSettings): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TextGenerator extends System.Object {
			get characterCountVisible(): number;
			get verts(): any;
			get characters(): any;
			get lines(): any;
			get rectExtents(): UnityEngine.Rect;
			get vertexCount(): number;
			get characterCount(): number;
			get lineCount(): number;
			get fontSizeUsedForBestFit(): number;
			constructor();
			constructor(initialCapacity: number);
			Invalidate(): void;
			GetCharacters(characters: any): void;
			GetLines(lines: any): void;
			GetVertices(vertices: any): void;
			GetPreferredWidth(str: string, settings: UnityEngine.TextGenerationSettings): number;
			GetPreferredHeight(str: string, settings: UnityEngine.TextGenerationSettings): number;
			PopulateWithErrors(str: string, settings: UnityEngine.TextGenerationSettings, context: UnityEngine.GameObject): boolean;
			Populate(str: string, settings: UnityEngine.TextGenerationSettings): boolean;
			GetVerticesArray(): UnityEngine.UIVertex[];
			GetCharactersArray(): UnityEngine.UICharInfo[];
			GetLinesArray(): UnityEngine.UILineInfo[];
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum TextAlignment { Left = 0, Center = 1, Right = 2, }
		export enum TextAnchor { UpperLeft = 0, UpperCenter = 1, UpperRight = 2, MiddleLeft = 3, MiddleCenter = 4, MiddleRight = 5, LowerLeft = 6, LowerCenter = 7, LowerRight = 8, }
		export enum HorizontalWrapMode { Wrap = 0, Overflow = 1, }
		export enum VerticalWrapMode { Truncate = 0, Overflow = 1, }
		export class GUIText extends UnityEngine.GUIElement {
			get text(): string;
			set text(value: string);
			get material(): UnityEngine.Material;
			set material(value: UnityEngine.Material);
			get font(): UnityEngine.Font;
			set font(value: UnityEngine.Font);
			get alignment(): UnityEngine.TextAlignment;
			set alignment(value: UnityEngine.TextAlignment);
			get anchor(): UnityEngine.TextAnchor;
			set anchor(value: UnityEngine.TextAnchor);
			get lineSpacing(): number;
			set lineSpacing(value: number);
			get tabSize(): number;
			set tabSize(value: number);
			get fontSize(): number;
			set fontSize(value: number);
			get fontStyle(): UnityEngine.FontStyle;
			set fontStyle(value: UnityEngine.FontStyle);
			get richText(): boolean;
			set richText(value: boolean);
			get color(): UnityEngine.Color;
			set color(value: UnityEngine.Color);
			get pixelOffset(): UnityEngine.Vector2;
			set pixelOffset(value: UnityEngine.Vector2);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TextMesh extends UnityEngine.Component {
			get text(): string;
			set text(value: string);
			get font(): UnityEngine.Font;
			set font(value: UnityEngine.Font);
			get fontSize(): number;
			set fontSize(value: number);
			get fontStyle(): UnityEngine.FontStyle;
			set fontStyle(value: UnityEngine.FontStyle);
			get offsetZ(): number;
			set offsetZ(value: number);
			get alignment(): UnityEngine.TextAlignment;
			set alignment(value: UnityEngine.TextAlignment);
			get anchor(): UnityEngine.TextAnchor;
			set anchor(value: UnityEngine.TextAnchor);
			get characterSize(): number;
			set characterSize(value: number);
			get lineSpacing(): number;
			set lineSpacing(value: number);
			get tabSize(): number;
			set tabSize(value: number);
			get richText(): boolean;
			set richText(value: boolean);
			get color(): UnityEngine.Color;
			set color(value: UnityEngine.Color);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CharacterInfo {
			index: number;
			/**[Obsolete]--"CharacterInfo.uv is deprecated. Use uvBottomLeft, uvBottomRight, uvTopRight or uvTopLeft instead." */
			uv: UnityEngine.Rect;
			/**[Obsolete]--"CharacterInfo.vert is deprecated. Use minX, maxX, minY, maxY instead." */
			vert: UnityEngine.Rect;
			/**[Obsolete]--"CharacterInfo.width is deprecated. Use advance instead." */
			width: number;
			size: number;
			style: UnityEngine.FontStyle;
			/**[Obsolete]--"CharacterInfo.flipped is deprecated. Use uvBottomLeft, uvBottomRight, uvTopRight or uvTopLeft instead, which will be correct regardless of orientation." */
			flipped: boolean;
			get advance(): number;
			set advance(value: number);
			get glyphWidth(): number;
			set glyphWidth(value: number);
			get glyphHeight(): number;
			set glyphHeight(value: number);
			get bearing(): number;
			set bearing(value: number);
			get minY(): number;
			set minY(value: number);
			get maxY(): number;
			set maxY(value: number);
			get minX(): number;
			set minX(value: number);
			get maxX(): number;
			set maxX(value: number);
			get uvBottomLeft(): UnityEngine.Vector2;
			set uvBottomLeft(value: UnityEngine.Vector2);
			get uvBottomRight(): UnityEngine.Vector2;
			set uvBottomRight(value: UnityEngine.Vector2);
			get uvTopRight(): UnityEngine.Vector2;
			set uvTopRight(value: UnityEngine.Vector2);
			get uvTopLeft(): UnityEngine.Vector2;
			set uvTopLeft(value: UnityEngine.Vector2);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UICharInfo {
			cursorPos: UnityEngine.Vector2;
			charWidth: number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UILineInfo {
			startCharIdx: number;
			height: number;
			topY: number;
			leading: number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UIVertex {
			position: UnityEngine.Vector3;
			normal: UnityEngine.Vector3;
			tangent: UnityEngine.Vector4;
			color: UnityEngine.Color32;
			uv0: UnityEngine.Vector2;
			uv1: UnityEngine.Vector2;
			uv2: UnityEngine.Vector2;
			uv3: UnityEngine.Vector2;
			static simpleVert: UnityEngine.UIVertex;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Font extends UnityEngine.Object {
			get material(): UnityEngine.Material;
			set material(value: UnityEngine.Material);
			get fontNames(): string[];
			set fontNames(value: string[]);
			get dynamic(): boolean;
			get ascent(): number;
			get fontSize(): number;
			get characterInfo(): UnityEngine.CharacterInfo[];
			set characterInfo(value: UnityEngine.CharacterInfo[]);
			get lineHeight(): number;
			/**[Obsolete]--"Font.textureRebuildCallback has been deprecated. Use Font.textureRebuilt instead." */
			get textureRebuildCallback(): UnityEngine.Font.FontTextureRebuildCallback;
			/**[Obsolete]--"Font.textureRebuildCallback has been deprecated. Use Font.textureRebuilt instead." */
			set textureRebuildCallback(value: UnityEngine.Font.FontTextureRebuildCallback);
			constructor();
			constructor(name: string);
			static add_textureRebuilt(value: System.Action$1): void;
			static remove_textureRebuilt(value: System.Action$1): void;
			static CreateDynamicFontFromOSFont(fontname: string, size: number): UnityEngine.Font;
			static CreateDynamicFontFromOSFont(fontnames: string[], size: number): UnityEngine.Font;
			static GetMaxVertsForString(str: string): number;
			static GetOSInstalledFontNames(): string[];
			HasCharacter(c: string): boolean;
			GetCharacterInfo(ch: string, info: any, size: number, style: UnityEngine.FontStyle): boolean;
			GetCharacterInfo(ch: string, info: any, size: number): boolean;
			GetCharacterInfo(ch: string, info: any): boolean;
			RequestCharactersInTexture(characters: string, size: number, style: UnityEngine.FontStyle): void;
			RequestCharactersInTexture(characters: string, size: number): void;
			RequestCharactersInTexture(characters: string): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CustomGridBrushAttribute extends System.Attribute {
			get hideAssetInstances(): boolean;
			get hideDefaultInstance(): boolean;
			get defaultBrush(): boolean;
			get defaultName(): string;
			constructor();
			constructor(hideAssetInstances: boolean, hideDefaultInstance: boolean, defaultBrush: boolean, defaultName: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GridBrushBase extends UnityEngine.ScriptableObject {
			Paint(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.Vector3Int): void;
			Erase(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.Vector3Int): void;
			BoxFill(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.BoundsInt): void;
			BoxErase(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.BoundsInt): void;
			Select(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.BoundsInt): void;
			FloodFill(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.Vector3Int): void;
			Rotate(direction: UnityEngine.GridBrushBase.RotationDirection, layout: UnityEngine.GridLayout.CellLayout): void;
			Flip(flip: UnityEngine.GridBrushBase.FlipAxis, layout: UnityEngine.GridLayout.CellLayout): void;
			Pick(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.BoundsInt, pivot: UnityEngine.Vector3Int): void;
			Move(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, from: UnityEngine.BoundsInt, to: UnityEngine.BoundsInt): void;
			MoveStart(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.BoundsInt): void;
			MoveEnd(gridLayout: UnityEngine.GridLayout, brushTarget: UnityEngine.GameObject, position: UnityEngine.BoundsInt): void;
			ChangeZPosition(change: number): void;
			ResetZPosition(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum RenderMode { ScreenSpaceOverlay = 0, ScreenSpaceCamera = 1, WorldSpace = 2, }
		export enum AdditionalCanvasShaderChannels { None = 0, TexCoord1 = 1, TexCoord2 = 2, TexCoord3 = 4, Normal = 8, Tangent = 16, }
		export class Canvas extends UnityEngine.Behaviour {
			get renderMode(): UnityEngine.RenderMode;
			set renderMode(value: UnityEngine.RenderMode);
			get isRootCanvas(): boolean;
			get pixelRect(): UnityEngine.Rect;
			get scaleFactor(): number;
			set scaleFactor(value: number);
			get referencePixelsPerUnit(): number;
			set referencePixelsPerUnit(value: number);
			get overridePixelPerfect(): boolean;
			set overridePixelPerfect(value: boolean);
			get pixelPerfect(): boolean;
			set pixelPerfect(value: boolean);
			get planeDistance(): number;
			set planeDistance(value: number);
			get renderOrder(): number;
			get overrideSorting(): boolean;
			set overrideSorting(value: boolean);
			get sortingOrder(): number;
			set sortingOrder(value: number);
			get targetDisplay(): number;
			set targetDisplay(value: number);
			get sortingLayerID(): number;
			set sortingLayerID(value: number);
			get cachedSortingLayerValue(): number;
			get additionalShaderChannels(): UnityEngine.AdditionalCanvasShaderChannels;
			set additionalShaderChannels(value: UnityEngine.AdditionalCanvasShaderChannels);
			get sortingLayerName(): string;
			set sortingLayerName(value: string);
			get rootCanvas(): UnityEngine.Canvas;
			get worldCamera(): UnityEngine.Camera;
			set worldCamera(value: UnityEngine.Camera);
			get normalizedSortingGridSize(): number;
			set normalizedSortingGridSize(value: number);
			/**[Obsolete]--"Setting normalizedSize via a int is not supported. Please use normalizedSortingGridSize" */
			get sortingGridNormalizedSize(): number;
			/**[Obsolete]--"Setting normalizedSize via a int is not supported. Please use normalizedSortingGridSize" */
			set sortingGridNormalizedSize(value: number);
			constructor();
			static add_willRenderCanvases(value: UnityEngine.Canvas.WillRenderCanvases): void;
			static remove_willRenderCanvases(value: UnityEngine.Canvas.WillRenderCanvases): void;
			/**[Obsolete]--"Shared default material now used for text and general UI elements, call Canvas.GetDefaultCanvasMaterial()" */
			static GetDefaultCanvasTextMaterial(): UnityEngine.Material;
			static GetDefaultCanvasMaterial(): UnityEngine.Material;
			static GetETC1SupportedCanvasMaterial(): UnityEngine.Material;
			static ForceUpdateCanvases(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UISystemProfilerApi extends System.Object {
			static BeginSample(type: UnityEngine.UISystemProfilerApi.SampleType): void;
			static EndSample(type: UnityEngine.UISystemProfilerApi.SampleType): void;
			static AddMarker(name: string, obj: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface ICanvasRaycastFilter {
			IsRaycastLocationValid(sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera): boolean;
		}
		export class CanvasGroup extends UnityEngine.Behaviour {
			get alpha(): number;
			set alpha(value: number);
			get interactable(): boolean;
			set interactable(value: boolean);
			get blocksRaycasts(): boolean;
			set blocksRaycasts(value: boolean);
			get ignoreParentGroups(): boolean;
			set ignoreParentGroups(value: boolean);
			constructor();
			IsRaycastLocationValid(sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CanvasRenderer extends UnityEngine.Component {
			get hasPopInstruction(): boolean;
			set hasPopInstruction(value: boolean);
			get materialCount(): number;
			set materialCount(value: number);
			get popMaterialCount(): number;
			set popMaterialCount(value: number);
			get absoluteDepth(): number;
			get hasMoved(): boolean;
			get cullTransparentMesh(): boolean;
			set cullTransparentMesh(value: boolean);
			get hasRectClipping(): boolean;
			get relativeDepth(): number;
			get cull(): boolean;
			set cull(value: boolean);
			/**[Obsolete]--"isMask is no longer supported.See EnableClipping for vertex clipping configuration" */
			get isMask(): boolean;
			/**[Obsolete]--"isMask is no longer supported.See EnableClipping for vertex clipping configuration" */
			set isMask(value: boolean);
			constructor();
			static SplitUIVertexStreams(verts: any, positions: any, colors: any, uv0S: any, uv1S: any, normals: any, tangents: any, indices: any): void;
			static SplitUIVertexStreams(verts: any, positions: any, colors: any, uv0S: any, uv1S: any, uv2S: any, uv3S: any, normals: any, tangents: any, indices: any): void;
			static CreateUIVertexStream(verts: any, positions: any, colors: any, uv0S: any, uv1S: any, normals: any, tangents: any, indices: any): void;
			static CreateUIVertexStream(verts: any, positions: any, colors: any, uv0S: any, uv1S: any, uv2S: any, uv3S: any, normals: any, tangents: any, indices: any): void;
			static AddUIVertexStream(verts: any, positions: any, colors: any, uv0S: any, uv1S: any, normals: any, tangents: any): void;
			static AddUIVertexStream(verts: any, positions: any, colors: any, uv0S: any, uv1S: any, uv2S: any, uv3S: any, normals: any, tangents: any): void;
			static add_onRequestRebuild(value: UnityEngine.CanvasRenderer.OnRequestRebuild): void;
			static remove_onRequestRebuild(value: UnityEngine.CanvasRenderer.OnRequestRebuild): void;
			SetColor(color: UnityEngine.Color): void;
			GetColor(): UnityEngine.Color;
			EnableRectClipping(rect: UnityEngine.Rect): void;
			DisableRectClipping(): void;
			SetMaterial(material: UnityEngine.Material, index: number): void;
			SetMaterial(material: UnityEngine.Material, texture: UnityEngine.Texture): void;
			GetMaterial(index: number): UnityEngine.Material;
			GetMaterial(): UnityEngine.Material;
			SetPopMaterial(material: UnityEngine.Material, index: number): void;
			GetPopMaterial(index: number): UnityEngine.Material;
			SetTexture(texture: UnityEngine.Texture): void;
			SetAlphaTexture(texture: UnityEngine.Texture): void;
			SetMesh(mesh: UnityEngine.Mesh): void;
			Clear(): void;
			GetAlpha(): number;
			SetAlpha(alpha: number): void;
			GetInheritedAlpha(): number;
			/**[Obsolete]--"UI System now uses meshes.Generate a mesh and use 'SetMesh' instead" */
			SetVertices(vertices: any): void;
			/**[Obsolete]--"UI System now uses meshes.Generate a mesh and use 'SetMesh' instead" */
			SetVertices(vertices: UnityEngine.UIVertex[], size: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RectTransformUtility extends System.Object {
			static RectangleContainsScreenPoint(rect: UnityEngine.RectTransform, screenPoint: UnityEngine.Vector2): boolean;
			static RectangleContainsScreenPoint(rect: UnityEngine.RectTransform, screenPoint: UnityEngine.Vector2, cam: UnityEngine.Camera): boolean;
			static ScreenPointToWorldPointInRectangle(rect: UnityEngine.RectTransform, screenPoint: UnityEngine.Vector2, cam: UnityEngine.Camera, worldPoint: any): boolean;
			static ScreenPointToLocalPointInRectangle(rect: UnityEngine.RectTransform, screenPoint: UnityEngine.Vector2, cam: UnityEngine.Camera, localPoint: any): boolean;
			static ScreenPointToRay(cam: UnityEngine.Camera, screenPos: UnityEngine.Vector2): UnityEngine.Ray;
			static WorldToScreenPoint(cam: UnityEngine.Camera, worldPoint: UnityEngine.Vector3): UnityEngine.Vector2;
			static CalculateRelativeRectTransformBounds(root: UnityEngine.Transform, child: UnityEngine.Transform): UnityEngine.Bounds;
			static CalculateRelativeRectTransformBounds(trans: UnityEngine.Transform): UnityEngine.Bounds;
			static FlipLayoutOnAxis(rect: UnityEngine.RectTransform, axis: number, keepPositioning: boolean, recursive: boolean): void;
			static FlipLayoutAxes(rect: UnityEngine.RectTransform, keepPositioning: boolean, recursive: boolean): void;
			static PixelAdjustPoint(point: UnityEngine.Vector2, elementTransform: UnityEngine.Transform, canvas: UnityEngine.Canvas): UnityEngine.Vector2;
			static PixelAdjustRect(rectTransform: UnityEngine.RectTransform, canvas: UnityEngine.Canvas): UnityEngine.Rect;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RemoteSettings extends System.Object {
			static add_Updated(value: UnityEngine.RemoteSettings.UpdatedEventHandler): void;
			static remove_Updated(value: UnityEngine.RemoteSettings.UpdatedEventHandler): void;
			static add_BeforeFetchFromServer(value: System.Action): void;
			static remove_BeforeFetchFromServer(value: System.Action): void;
			static add_Completed(value: System.Action$3): void;
			static remove_Completed(value: System.Action$3): void;
			/**[Obsolete][Error]--"Calling CallOnUpdate() is not necessary any more and should be removed. Use RemoteSettingsUpdated instead" */
			static CallOnUpdate(): void;
			static ForceUpdate(): void;
			static WasLastUpdatedFromServer(): boolean;
			static GetInt(key: string): number;
			static GetInt(key: string, defaultValue: number): number;
			static GetLong(key: string): number;
			static GetLong(key: string, defaultValue: number): number;
			static GetFloat(key: string): number;
			static GetFloat(key: string, defaultValue: number): number;
			static GetString(key: string): string;
			static GetString(key: string, defaultValue: string): string;
			static GetBool(key: string): boolean;
			static GetBool(key: string, defaultValue: boolean): boolean;
			static HasKey(key: string): boolean;
			static GetCount(): number;
			static GetKeys(): string[];
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RemoteConfigSettings extends System.Object {
			constructor(configKey: string);
			static QueueConfig(name: string, param: any, ver?: number, prefix?: string): boolean;
			static SendDeviceInfoInConfigRequest(): boolean;
			add_Updated(value: System.Action$1): void;
			remove_Updated(value: System.Action$1): void;
			Dispose(): void;
			ForceUpdate(): void;
			WasLastUpdatedFromServer(): boolean;
			GetInt(key: string): number;
			GetInt(key: string, defaultValue: number): number;
			GetLong(key: string): number;
			GetLong(key: string, defaultValue: number): number;
			GetFloat(key: string): number;
			GetFloat(key: string, defaultValue: number): number;
			GetString(key: string): string;
			GetString(key: string, defaultValue: string): string;
			GetBool(key: string): boolean;
			GetBool(key: string, defaultValue: boolean): boolean;
			HasKey(key: string): boolean;
			GetCount(): number;
			GetKeys(): string[];
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WWWForm extends System.Object {
			get headers(): any;
			get data(): Uint8Array;
			constructor();
			AddField(fieldName: string, value: string): void;
			AddField(fieldName: string, value: string, e: System.Text.Encoding): void;
			AddField(fieldName: string, i: number): void;
			AddBinaryData(fieldName: string, contents: Uint8Array): void;
			AddBinaryData(fieldName: string, contents: Uint8Array, fileName: string): void;
			AddBinaryData(fieldName: string, contents: Uint8Array, fileName: string, mimeType: string): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WWW extends UnityEngine.CustomYieldInstruction {
			get assetBundle(): UnityEngine.AssetBundle;
			/**[Obsolete][Error]--"Obsolete msg (UnityUpgradable) -> * UnityEngine.WWW.GetAudioClip()" */
			get audioClip(): any;
			get bytes(): Uint8Array;
			/**[Obsolete][Error]--"Obsolete msg (UnityUpgradable) -> * UnityEngine.WWW.GetMovieTexture()" */
			get movie(): any;
			/**[Obsolete]--"WWW.size is obsolete. Please use WWW.bytesDownloaded instead" */
			get size(): number;
			get bytesDownloaded(): number;
			get error(): string;
			get isDone(): boolean;
			/**[Obsolete][Error]--"Obsolete msg (UnityUpgradable) -> * UnityEngine.WWW.GetAudioClip()" */
			get oggVorbis(): any;
			get progress(): number;
			get responseHeaders(): any;
			/**[Obsolete][Error]--"Please use WWW.text instead. (UnityUpgradable) -> text" */
			get data(): string;
			get text(): string;
			get texture(): UnityEngine.Texture2D;
			get textureNonReadable(): UnityEngine.Texture2D;
			get threadPriority(): UnityEngine.ThreadPriority;
			set threadPriority(value: UnityEngine.ThreadPriority);
			get uploadProgress(): number;
			get url(): string;
			get keepWaiting(): boolean;
			constructor(url: string);
			constructor(url: string, form: UnityEngine.WWWForm);
			constructor(url: string, postData: Uint8Array);
			constructor(url: string, postData: Uint8Array, headers: any);
			constructor(url: string, postData: Uint8Array, headers: any);
			static EscapeURL(s: string): string;
			static EscapeURL(s: string, e: System.Text.Encoding): string;
			static UnEscapeURL(s: string): string;
			static UnEscapeURL(s: string, e: System.Text.Encoding): string;
			static LoadFromCacheOrDownload(url: string, version: number): UnityEngine.WWW;
			static LoadFromCacheOrDownload(url: string, version: number, crc: number): UnityEngine.WWW;
			static LoadFromCacheOrDownload(url: string, hash: UnityEngine.Hash128): UnityEngine.WWW;
			static LoadFromCacheOrDownload(url: string, hash: UnityEngine.Hash128, crc: number): UnityEngine.WWW;
			static LoadFromCacheOrDownload(url: string, cachedBundle: UnityEngine.CachedAssetBundle, crc?: number): UnityEngine.WWW;
			LoadImageIntoTexture(texture: UnityEngine.Texture2D): void;
			Dispose(): void;
			GetAudioClip(): UnityEngine.AudioClip;
			GetAudioClip(threeD: boolean): UnityEngine.AudioClip;
			GetAudioClip(threeD: boolean, stream: boolean): UnityEngine.AudioClip;
			GetAudioClip(threeD: boolean, stream: boolean, audioType: UnityEngine.AudioType): UnityEngine.AudioClip;
			GetAudioClipCompressed(): UnityEngine.AudioClip;
			GetAudioClipCompressed(threeD: boolean): UnityEngine.AudioClip;
			GetAudioClipCompressed(threeD: boolean, audioType: UnityEngine.AudioType): UnityEngine.AudioClip;
			/**[Obsolete]--"MovieTexture is deprecated. Use VideoPlayer instead." */
			GetMovieTexture(): UnityEngine.MovieTexture;
			/**extension method */
			GetAudioClip(): UnityEngine.AudioClip;
			/**extension method */
			GetAudioClip(threeD: boolean): UnityEngine.AudioClip;
			/**extension method */
			GetAudioClip(threeD: boolean, stream: boolean): UnityEngine.AudioClip;
			/**extension method */
			GetAudioClip(threeD: boolean, stream: boolean, audioType: UnityEngine.AudioType): UnityEngine.AudioClip;
			/**extension method */
			GetAudioClipCompressed(): UnityEngine.AudioClip;
			/**extension method */
			GetAudioClipCompressed(threeD: boolean): UnityEngine.AudioClip;
			/**extension method */
			GetAudioClipCompressed(threeD: boolean, audioType: UnityEngine.AudioType): UnityEngine.AudioClip;
			/**extension method */
			GetMovieTexture(): UnityEngine.MovieTexture;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WWWAudioExtensions extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WheelHit {
			get collider(): UnityEngine.Collider;
			set collider(value: UnityEngine.Collider);
			get point(): UnityEngine.Vector3;
			set point(value: UnityEngine.Vector3);
			get normal(): UnityEngine.Vector3;
			set normal(value: UnityEngine.Vector3);
			get forwardDir(): UnityEngine.Vector3;
			set forwardDir(value: UnityEngine.Vector3);
			get sidewaysDir(): UnityEngine.Vector3;
			set sidewaysDir(value: UnityEngine.Vector3);
			get force(): number;
			set force(value: number);
			get forwardSlip(): number;
			set forwardSlip(value: number);
			get sidewaysSlip(): number;
			set sidewaysSlip(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class WheelCollider extends UnityEngine.Collider {
			get center(): UnityEngine.Vector3;
			set center(value: UnityEngine.Vector3);
			get radius(): number;
			set radius(value: number);
			get suspensionDistance(): number;
			set suspensionDistance(value: number);
			get suspensionSpring(): UnityEngine.JointSpring;
			set suspensionSpring(value: UnityEngine.JointSpring);
			get forceAppPointDistance(): number;
			set forceAppPointDistance(value: number);
			get mass(): number;
			set mass(value: number);
			get wheelDampingRate(): number;
			set wheelDampingRate(value: number);
			get forwardFriction(): UnityEngine.WheelFrictionCurve;
			set forwardFriction(value: UnityEngine.WheelFrictionCurve);
			get sidewaysFriction(): UnityEngine.WheelFrictionCurve;
			set sidewaysFriction(value: UnityEngine.WheelFrictionCurve);
			get motorTorque(): number;
			set motorTorque(value: number);
			get brakeTorque(): number;
			set brakeTorque(value: number);
			get steerAngle(): number;
			set steerAngle(value: number);
			get isGrounded(): boolean;
			get rpm(): number;
			get sprungMass(): number;
			constructor();
			ConfigureVehicleSubsteps(speedThreshold: number, stepsBelowThreshold: number, stepsAboveThreshold: number): void;
			GetWorldPose(pos: any, quat: any): void;
			GetGroundHit(hit: any): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum WindZoneMode { Directional = 0, Spherical = 1, }
		export class WindZone extends UnityEngine.Component {
			get mode(): UnityEngine.WindZoneMode;
			set mode(value: UnityEngine.WindZoneMode);
			get radius(): number;
			set radius(value: number);
			get windMain(): number;
			set windMain(value: number);
			get windTurbulence(): number;
			set windTurbulence(value: number);
			get windPulseMagnitude(): number;
			set windPulseMagnitude(value: number);
			get windPulseFrequency(): number;
			set windPulseFrequency(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.AudioSettings {
		export class AudioConfigurationChangeHandler extends Function {
		}

	}
	export namespace UnityEngine.AudioClip {
		export class PCMReaderCallback extends Function {
		}
		export class PCMSetPositionCallback extends Function {
		}

	}
	export namespace UnityEngine.Application {
		export class AdvertisingIdentifierCallback extends Function {
		}
		export class LowMemoryCallback extends Function {
		}
		export class LogCallback extends Function {
		}

	}
	export namespace UnityEngine.BoundsInt {
		export class PositionEnumerator {
			get Current(): UnityEngine.Vector3Int;
			constructor(min: UnityEngine.Vector3Int, max: UnityEngine.Vector3Int);
			GetEnumerator(): UnityEngine.BoundsInt.PositionEnumerator;
			MoveNext(): boolean;
			Reset(): void;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.Camera {
		export enum GateFitMode { Vertical = 1, Horizontal = 2, Fill = 3, Overscan = 4, None = 0, }
		export class GateFitParameters {
			get mode(): UnityEngine.Camera.GateFitMode;
			set mode(value: UnityEngine.Camera.GateFitMode);
			get aspect(): number;
			set aspect(value: number);
			constructor(mode: UnityEngine.Camera.GateFitMode, aspect: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum StereoscopicEye { Left = 0, Right = 1, }
		export enum MonoOrStereoscopicEye { Left = 0, Right = 1, Mono = 2, }
		export class CameraCallback extends Function {
		}

	}
	export namespace UnityEngine.CullingGroup {
		export class StateChanged extends Function {
		}

	}
	export namespace UnityEngine.Display {
		export class DisplaysUpdatedDelegate extends Function {
		}

	}
	export namespace UnityEngine.LightProbeProxyVolume {
		export enum ResolutionMode { Automatic = 0, Custom = 1, }
		export enum BoundingBoxMode { AutomaticLocal = 0, AutomaticWorld = 1, Custom = 2, }
		export enum ProbePositionMode { CellCorner = 0, CellCenter = 1, }
		export enum RefreshMode { Automatic = 0, EveryFrame = 1, ViaScripting = 2, }
		export enum QualityMode { Low = 0, Normal = 1, }

	}
	export namespace UnityEngine.TouchScreenKeyboard {
		export enum Status { Visible = 0, Done = 1, Canceled = 2, LostFocus = 3, }

	}
	export namespace UnityEngine.Random {
		export class State {
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.RectInt {
		export class PositionEnumerator {
			get Current(): UnityEngine.Vector2Int;
			constructor(min: UnityEngine.Vector2Int, max: UnityEngine.Vector2Int);
			GetEnumerator(): UnityEngine.RectInt.PositionEnumerator;
			MoveNext(): boolean;
			Reset(): void;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.ReflectionProbe {
		export enum ReflectionProbeEvent { ReflectionProbeAdded = 0, ReflectionProbeRemoved = 1, }

	}
	export namespace UnityEngine.ShaderVariantCollection {
		export class ShaderVariant {
			shader: UnityEngine.Shader;
			passType: any;
			keywords: string[];
			constructor(shader: UnityEngine.Shader, passType: any, keywords: string[]);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.Texture2D {
		export enum EXRFlags { None = 0, OutputAsFloat = 1, CompressZIP = 2, CompressRLE = 4, CompressPIZ = 8, }

	}
	export namespace UnityEngine.Events {
		export enum PersistentListenerMode { EventDefined = 0, Void = 1, Object = 2, Int = 3, Float = 4, String = 5, Bool = 6, }
		export enum UnityEventCallState { Off = 0, EditorAndRuntime = 1, RuntimeOnly = 2, }
		export class UnityEventBase extends System.Object {
			static GetValidMethodInfo(obj: any, functionName: string, argumentTypes: System.Type[]): System.Reflection.MethodInfo;
			GetPersistentEventCount(): number;
			GetPersistentTarget(index: number): any;
			GetPersistentMethodName(index: number): string;
			SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
			RemoveAllListeners(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnityAction extends Function {
		}
		export class UnityEvent extends UnityEngine.Events.UnityEventBase {
			constructor();
			AddListener(call: UnityEngine.Events.UnityAction): void;
			RemoveListener(call: UnityEngine.Events.UnityAction): void;
			Invoke(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnityAction$1 extends Function {
		}
		export class UnityEvent$1 extends UnityEngine.Events.UnityEventBase {
			constructor();
			AddListener(call: UnityEngine.Events.UnityAction$1): void;
			RemoveListener(call: UnityEngine.Events.UnityAction$1): void;
			Invoke(arg0: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnityAction$2 extends Function {
		}
		export class UnityEvent$2 extends UnityEngine.Events.UnityEventBase {
			constructor();
			AddListener(call: UnityEngine.Events.UnityAction$2): void;
			RemoveListener(call: UnityEngine.Events.UnityAction$2): void;
			Invoke(arg0: any, arg1: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnityAction$3 extends Function {
		}
		export class UnityEvent$3 extends UnityEngine.Events.UnityEventBase {
			constructor();
			AddListener(call: UnityEngine.Events.UnityAction$3): void;
			RemoveListener(call: UnityEngine.Events.UnityAction$3): void;
			Invoke(arg0: any, arg1: any, arg2: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnityAction$4 extends Function {
		}
		export class UnityEvent$4 extends UnityEngine.Events.UnityEventBase {
			constructor();
			AddListener(call: UnityEngine.Events.UnityAction$4): void;
			RemoveListener(call: UnityEngine.Events.UnityAction$4): void;
			Invoke(arg0: any, arg1: any, arg2: any, arg3: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.ADBannerView {
		export enum Layout { Top = 0, Bottom = 1, TopLeft = 0, TopRight = 4, TopCenter = 8, BottomLeft = 1, BottomRight = 5, BottomCenter = 9, CenterLeft = 2, CenterRight = 6, Center = 10, Manual = -1, }
		export enum Type { Banner = 0, MediumRect = 1, }
		export class BannerWasClickedDelegate extends Function {
		}
		export class BannerWasLoadedDelegate extends Function {
		}

	}
	export namespace UnityEngine.ADInterstitialAd {
		export class InterstitialWasLoadedDelegate extends Function {
		}

	}
	export namespace UnityEngine.SceneManagement {
		export class Scene {
			get handle(): number;
			get path(): string;
			get name(): string;
			set name(value: string);
			get isLoaded(): boolean;
			get buildIndex(): number;
			get isDirty(): boolean;
			get rootCount(): number;
			static op_Equality(lhs: UnityEngine.SceneManagement.Scene, rhs: UnityEngine.SceneManagement.Scene): boolean;
			static op_Inequality(lhs: UnityEngine.SceneManagement.Scene, rhs: UnityEngine.SceneManagement.Scene): boolean;
			IsValid(): boolean;
			GetRootGameObjects(): UnityEngine.GameObject[];
			GetRootGameObjects(rootGameObjects: any): void;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(other: any): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			/**extension method */
			GetPhysicsScene(): UnityEngine.PhysicsScene;
			/**extension method */
			GetPhysicsScene2D(): UnityEngine.PhysicsScene2D;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SceneManager extends System.Object {
			static get sceneCount(): number;
			static get sceneCountInBuildSettings(): number;
			constructor();
			static GetActiveScene(): UnityEngine.SceneManagement.Scene;
			static SetActiveScene(scene: UnityEngine.SceneManagement.Scene): boolean;
			static GetSceneByPath(scenePath: string): UnityEngine.SceneManagement.Scene;
			static GetSceneByName(name: string): UnityEngine.SceneManagement.Scene;
			static GetSceneByBuildIndex(buildIndex: number): UnityEngine.SceneManagement.Scene;
			static GetSceneAt(index: number): UnityEngine.SceneManagement.Scene;
			static CreateScene(sceneName: string, parameters: UnityEngine.SceneManagement.CreateSceneParameters): UnityEngine.SceneManagement.Scene;
			static CreateScene(sceneName: string): UnityEngine.SceneManagement.Scene;
			static MergeScenes(sourceScene: UnityEngine.SceneManagement.Scene, destinationScene: UnityEngine.SceneManagement.Scene): void;
			static MoveGameObjectToScene(go: UnityEngine.GameObject, scene: UnityEngine.SceneManagement.Scene): void;
			static add_sceneLoaded(value: UnityEngine.Events.UnityAction$2): void;
			static remove_sceneLoaded(value: UnityEngine.Events.UnityAction$2): void;
			static add_sceneUnloaded(value: UnityEngine.Events.UnityAction$1): void;
			static remove_sceneUnloaded(value: UnityEngine.Events.UnityAction$1): void;
			static add_activeSceneChanged(value: UnityEngine.Events.UnityAction$2): void;
			static remove_activeSceneChanged(value: UnityEngine.Events.UnityAction$2): void;
			/**[Obsolete]--"Use SceneManager.sceneCount and SceneManager.GetSceneAt(int index) to loop the all scenes instead." */
			static GetAllScenes(): UnityEngine.SceneManagement.Scene[];
			static LoadScene(sceneName: string, mode: UnityEngine.SceneManagement.LoadSceneMode): void;
			static LoadScene(sceneName: string): void;
			static LoadScene(sceneName: string, parameters: UnityEngine.SceneManagement.LoadSceneParameters): UnityEngine.SceneManagement.Scene;
			static LoadScene(sceneBuildIndex: number, mode: UnityEngine.SceneManagement.LoadSceneMode): void;
			static LoadScene(sceneBuildIndex: number): void;
			static LoadScene(sceneBuildIndex: number, parameters: UnityEngine.SceneManagement.LoadSceneParameters): UnityEngine.SceneManagement.Scene;
			static LoadSceneAsync(sceneBuildIndex: number, mode: UnityEngine.SceneManagement.LoadSceneMode): UnityEngine.AsyncOperation;
			static LoadSceneAsync(sceneBuildIndex: number): UnityEngine.AsyncOperation;
			static LoadSceneAsync(sceneBuildIndex: number, parameters: UnityEngine.SceneManagement.LoadSceneParameters): UnityEngine.AsyncOperation;
			static LoadSceneAsync(sceneName: string, mode: UnityEngine.SceneManagement.LoadSceneMode): UnityEngine.AsyncOperation;
			static LoadSceneAsync(sceneName: string): UnityEngine.AsyncOperation;
			static LoadSceneAsync(sceneName: string, parameters: UnityEngine.SceneManagement.LoadSceneParameters): UnityEngine.AsyncOperation;
			/**[Obsolete]--"Use SceneManager.UnloadSceneAsync. This function is not safe to use during triggers and under other circumstances. See Scripting reference for more details." */
			static UnloadScene(scene: UnityEngine.SceneManagement.Scene): boolean;
			/**[Obsolete]--"Use SceneManager.UnloadSceneAsync. This function is not safe to use during triggers and under other circumstances. See Scripting reference for more details." */
			static UnloadScene(sceneBuildIndex: number): boolean;
			/**[Obsolete]--"Use SceneManager.UnloadSceneAsync. This function is not safe to use during triggers and under other circumstances. See Scripting reference for more details." */
			static UnloadScene(sceneName: string): boolean;
			static UnloadSceneAsync(sceneBuildIndex: number): UnityEngine.AsyncOperation;
			static UnloadSceneAsync(sceneName: string): UnityEngine.AsyncOperation;
			static UnloadSceneAsync(scene: UnityEngine.SceneManagement.Scene): UnityEngine.AsyncOperation;
			static UnloadSceneAsync(sceneBuildIndex: number, options: UnityEngine.SceneManagement.UnloadSceneOptions): UnityEngine.AsyncOperation;
			static UnloadSceneAsync(sceneName: string, options: UnityEngine.SceneManagement.UnloadSceneOptions): UnityEngine.AsyncOperation;
			static UnloadSceneAsync(scene: UnityEngine.SceneManagement.Scene, options: UnityEngine.SceneManagement.UnloadSceneOptions): UnityEngine.AsyncOperation;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum LoadSceneMode { Single = 0, Additive = 1, }
		export enum LocalPhysicsMode { None = 0, Physics2D = 1, Physics3D = 2, }
		export class LoadSceneParameters {
			get loadSceneMode(): UnityEngine.SceneManagement.LoadSceneMode;
			set loadSceneMode(value: UnityEngine.SceneManagement.LoadSceneMode);
			get localPhysicsMode(): UnityEngine.SceneManagement.LocalPhysicsMode;
			set localPhysicsMode(value: UnityEngine.SceneManagement.LocalPhysicsMode);
			constructor(mode: UnityEngine.SceneManagement.LoadSceneMode);
			constructor(mode: UnityEngine.SceneManagement.LoadSceneMode, physicsMode: UnityEngine.SceneManagement.LocalPhysicsMode);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CreateSceneParameters {
			get localPhysicsMode(): UnityEngine.SceneManagement.LocalPhysicsMode;
			set localPhysicsMode(value: UnityEngine.SceneManagement.LocalPhysicsMode);
			constructor(physicsMode: UnityEngine.SceneManagement.LocalPhysicsMode);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum UnloadSceneOptions { None = 0, UnloadAllEmbeddedSceneObjects = 1, }
		export class SceneUtility extends System.Object {
			static GetScenePathByBuildIndex(buildIndex: number): string;
			static GetBuildIndexByScenePath(scenePath: string): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.RectTransform {
		export enum Edge { Left = 0, Right = 1, Top = 2, Bottom = 3, }
		export enum Axis { Horizontal = 0, Vertical = 1, }
		export class ReapplyDrivenProperties extends Function {
		}

	}
	export namespace UnityEngine.GridLayout {
		export enum CellLayout { Rectangle = 0, Hexagon = 1, Isometric = 2, IsometricZAsY = 3, }
		export enum CellSwizzle { XYZ = 0, XZY = 1, YXZ = 2, YZX = 3, ZXY = 4, ZYX = 5, }

	}
	export namespace UnityEngine.GUI {
		export enum ToolbarButtonSize { Fixed = 0, FitToContents = 1, }
		export class WindowFunction extends Function {
		}
		export class Scope extends System.Object {
			Dispose(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GroupScope extends UnityEngine.GUI.Scope {
			constructor(position: UnityEngine.Rect);
			constructor(position: UnityEngine.Rect, text: string);
			constructor(position: UnityEngine.Rect, image: UnityEngine.Texture);
			constructor(position: UnityEngine.Rect, content: UnityEngine.GUIContent);
			constructor(position: UnityEngine.Rect, style: UnityEngine.GUIStyle);
			constructor(position: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle);
			constructor(position: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ScrollViewScope extends UnityEngine.GUI.Scope {
			get scrollPosition(): UnityEngine.Vector2;
			set scrollPosition(value: UnityEngine.Vector2);
			get handleScrollWheel(): boolean;
			set handleScrollWheel(value: boolean);
			constructor(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect);
			constructor(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean);
			constructor(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle);
			constructor(position: UnityEngine.Rect, scrollPosition: UnityEngine.Vector2, viewRect: UnityEngine.Rect, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ClipScope extends UnityEngine.GUI.Scope {
			constructor(position: UnityEngine.Rect);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.GUILayout {
		export class HorizontalScope extends UnityEngine.GUI.Scope {
			constructor(options: UnityEngine.GUILayoutOption[]);
			constructor(style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
			constructor(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
			constructor(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
			constructor(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class VerticalScope extends UnityEngine.GUI.Scope {
			constructor(options: UnityEngine.GUILayoutOption[]);
			constructor(style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
			constructor(text: string, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
			constructor(image: UnityEngine.Texture, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
			constructor(content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AreaScope extends UnityEngine.GUI.Scope {
			constructor(screenRect: UnityEngine.Rect);
			constructor(screenRect: UnityEngine.Rect, text: string);
			constructor(screenRect: UnityEngine.Rect, image: UnityEngine.Texture);
			constructor(screenRect: UnityEngine.Rect, content: UnityEngine.GUIContent);
			constructor(screenRect: UnityEngine.Rect, text: string, style: UnityEngine.GUIStyle);
			constructor(screenRect: UnityEngine.Rect, image: UnityEngine.Texture, style: UnityEngine.GUIStyle);
			constructor(screenRect: UnityEngine.Rect, content: UnityEngine.GUIContent, style: UnityEngine.GUIStyle);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ScrollViewScope extends UnityEngine.GUI.Scope {
			get scrollPosition(): UnityEngine.Vector2;
			set scrollPosition(value: UnityEngine.Vector2);
			get handleScrollWheel(): boolean;
			set handleScrollWheel(value: boolean);
			constructor(scrollPosition: UnityEngine.Vector2, options: UnityEngine.GUILayoutOption[]);
			constructor(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, options: UnityEngine.GUILayoutOption[]);
			constructor(scrollPosition: UnityEngine.Vector2, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
			constructor(scrollPosition: UnityEngine.Vector2, style: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
			constructor(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
			constructor(scrollPosition: UnityEngine.Vector2, alwaysShowHorizontal: boolean, alwaysShowVertical: boolean, horizontalScrollbar: UnityEngine.GUIStyle, verticalScrollbar: UnityEngine.GUIStyle, background: UnityEngine.GUIStyle, options: UnityEngine.GUILayoutOption[]);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.TextEditor {
		export enum DblClickSnapping { WORDS = 0, PARAGRAPHS = 1, }

	}
	export namespace UnityEngine.ParticleSystem {
		export class MainModule {
			get duration(): number;
			set duration(value: number);
			get loop(): boolean;
			set loop(value: boolean);
			get prewarm(): boolean;
			set prewarm(value: boolean);
			get startDelay(): UnityEngine.ParticleSystem.MinMaxCurve;
			set startDelay(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get startDelayMultiplier(): number;
			set startDelayMultiplier(value: number);
			get startLifetime(): UnityEngine.ParticleSystem.MinMaxCurve;
			set startLifetime(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get startLifetimeMultiplier(): number;
			set startLifetimeMultiplier(value: number);
			get startSpeed(): UnityEngine.ParticleSystem.MinMaxCurve;
			set startSpeed(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get startSpeedMultiplier(): number;
			set startSpeedMultiplier(value: number);
			get startSize3D(): boolean;
			set startSize3D(value: boolean);
			get startSize(): UnityEngine.ParticleSystem.MinMaxCurve;
			set startSize(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get startSizeMultiplier(): number;
			set startSizeMultiplier(value: number);
			get startSizeX(): UnityEngine.ParticleSystem.MinMaxCurve;
			set startSizeX(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get startSizeXMultiplier(): number;
			set startSizeXMultiplier(value: number);
			get startSizeY(): UnityEngine.ParticleSystem.MinMaxCurve;
			set startSizeY(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get startSizeYMultiplier(): number;
			set startSizeYMultiplier(value: number);
			get startSizeZ(): UnityEngine.ParticleSystem.MinMaxCurve;
			set startSizeZ(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get startSizeZMultiplier(): number;
			set startSizeZMultiplier(value: number);
			get startRotation3D(): boolean;
			set startRotation3D(value: boolean);
			get startRotation(): UnityEngine.ParticleSystem.MinMaxCurve;
			set startRotation(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get startRotationMultiplier(): number;
			set startRotationMultiplier(value: number);
			get startRotationX(): UnityEngine.ParticleSystem.MinMaxCurve;
			set startRotationX(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get startRotationXMultiplier(): number;
			set startRotationXMultiplier(value: number);
			get startRotationY(): UnityEngine.ParticleSystem.MinMaxCurve;
			set startRotationY(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get startRotationYMultiplier(): number;
			set startRotationYMultiplier(value: number);
			get startRotationZ(): UnityEngine.ParticleSystem.MinMaxCurve;
			set startRotationZ(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get startRotationZMultiplier(): number;
			set startRotationZMultiplier(value: number);
			get flipRotation(): number;
			set flipRotation(value: number);
			get startColor(): UnityEngine.ParticleSystem.MinMaxGradient;
			set startColor(value: UnityEngine.ParticleSystem.MinMaxGradient);
			get gravityModifier(): UnityEngine.ParticleSystem.MinMaxCurve;
			set gravityModifier(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get gravityModifierMultiplier(): number;
			set gravityModifierMultiplier(value: number);
			get simulationSpace(): UnityEngine.ParticleSystemSimulationSpace;
			set simulationSpace(value: UnityEngine.ParticleSystemSimulationSpace);
			get customSimulationSpace(): UnityEngine.Transform;
			set customSimulationSpace(value: UnityEngine.Transform);
			get simulationSpeed(): number;
			set simulationSpeed(value: number);
			get useUnscaledTime(): boolean;
			set useUnscaledTime(value: boolean);
			get scalingMode(): UnityEngine.ParticleSystemScalingMode;
			set scalingMode(value: UnityEngine.ParticleSystemScalingMode);
			get playOnAwake(): boolean;
			set playOnAwake(value: boolean);
			get maxParticles(): number;
			set maxParticles(value: number);
			get emitterVelocityMode(): UnityEngine.ParticleSystemEmitterVelocityMode;
			set emitterVelocityMode(value: UnityEngine.ParticleSystemEmitterVelocityMode);
			get stopAction(): UnityEngine.ParticleSystemStopAction;
			set stopAction(value: UnityEngine.ParticleSystemStopAction);
			get cullingMode(): UnityEngine.ParticleSystemCullingMode;
			set cullingMode(value: UnityEngine.ParticleSystemCullingMode);
			get ringBufferMode(): UnityEngine.ParticleSystemRingBufferMode;
			set ringBufferMode(value: UnityEngine.ParticleSystemRingBufferMode);
			get ringBufferLoopRange(): UnityEngine.Vector2;
			set ringBufferLoopRange(value: UnityEngine.Vector2);
			/**[Obsolete]--"Please use flipRotation instead. (UnityUpgradable) -> UnityEngine.ParticleSystem/MainModule.flipRotation" */
			get randomizeRotationDirection(): number;
			/**[Obsolete]--"Please use flipRotation instead. (UnityUpgradable) -> UnityEngine.ParticleSystem/MainModule.flipRotation" */
			set randomizeRotationDirection(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EmissionModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get rateOverTime(): UnityEngine.ParticleSystem.MinMaxCurve;
			set rateOverTime(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get rateOverTimeMultiplier(): number;
			set rateOverTimeMultiplier(value: number);
			get rateOverDistance(): UnityEngine.ParticleSystem.MinMaxCurve;
			set rateOverDistance(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get rateOverDistanceMultiplier(): number;
			set rateOverDistanceMultiplier(value: number);
			get burstCount(): number;
			set burstCount(value: number);
			/**[Obsolete]--"ParticleSystemEmissionType no longer does anything. Time and Distance based emission are now both always active." */
			get type(): UnityEngine.ParticleSystemEmissionType;
			/**[Obsolete]--"ParticleSystemEmissionType no longer does anything. Time and Distance based emission are now both always active." */
			set type(value: UnityEngine.ParticleSystemEmissionType);
			/**[Obsolete]--"rate property is deprecated. Use rateOverTime or rateOverDistance instead." */
			get rate(): UnityEngine.ParticleSystem.MinMaxCurve;
			/**[Obsolete]--"rate property is deprecated. Use rateOverTime or rateOverDistance instead." */
			set rate(value: UnityEngine.ParticleSystem.MinMaxCurve);
			/**[Obsolete]--"rateMultiplier property is deprecated. Use rateOverTimeMultiplier or rateOverDistanceMultiplier instead." */
			get rateMultiplier(): number;
			/**[Obsolete]--"rateMultiplier property is deprecated. Use rateOverTimeMultiplier or rateOverDistanceMultiplier instead." */
			set rateMultiplier(value: number);
			SetBursts(bursts: UnityEngine.ParticleSystem.Burst[]): void;
			SetBursts(bursts: UnityEngine.ParticleSystem.Burst[], size: number): void;
			GetBursts(bursts: UnityEngine.ParticleSystem.Burst[]): number;
			SetBurst(index: number, burst: UnityEngine.ParticleSystem.Burst): void;
			GetBurst(index: number): UnityEngine.ParticleSystem.Burst;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ShapeModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get shapeType(): UnityEngine.ParticleSystemShapeType;
			set shapeType(value: UnityEngine.ParticleSystemShapeType);
			get randomDirectionAmount(): number;
			set randomDirectionAmount(value: number);
			get sphericalDirectionAmount(): number;
			set sphericalDirectionAmount(value: number);
			get randomPositionAmount(): number;
			set randomPositionAmount(value: number);
			get alignToDirection(): boolean;
			set alignToDirection(value: boolean);
			get radius(): number;
			set radius(value: number);
			get radiusMode(): UnityEngine.ParticleSystemShapeMultiModeValue;
			set radiusMode(value: UnityEngine.ParticleSystemShapeMultiModeValue);
			get radiusSpread(): number;
			set radiusSpread(value: number);
			get radiusSpeed(): UnityEngine.ParticleSystem.MinMaxCurve;
			set radiusSpeed(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get radiusSpeedMultiplier(): number;
			set radiusSpeedMultiplier(value: number);
			get radiusThickness(): number;
			set radiusThickness(value: number);
			get angle(): number;
			set angle(value: number);
			get length(): number;
			set length(value: number);
			get boxThickness(): UnityEngine.Vector3;
			set boxThickness(value: UnityEngine.Vector3);
			get meshShapeType(): UnityEngine.ParticleSystemMeshShapeType;
			set meshShapeType(value: UnityEngine.ParticleSystemMeshShapeType);
			get mesh(): UnityEngine.Mesh;
			set mesh(value: UnityEngine.Mesh);
			get meshRenderer(): UnityEngine.MeshRenderer;
			set meshRenderer(value: UnityEngine.MeshRenderer);
			get skinnedMeshRenderer(): UnityEngine.SkinnedMeshRenderer;
			set skinnedMeshRenderer(value: UnityEngine.SkinnedMeshRenderer);
			get sprite(): UnityEngine.Sprite;
			set sprite(value: UnityEngine.Sprite);
			get spriteRenderer(): UnityEngine.SpriteRenderer;
			set spriteRenderer(value: UnityEngine.SpriteRenderer);
			get useMeshMaterialIndex(): boolean;
			set useMeshMaterialIndex(value: boolean);
			get meshMaterialIndex(): number;
			set meshMaterialIndex(value: number);
			get useMeshColors(): boolean;
			set useMeshColors(value: boolean);
			get normalOffset(): number;
			set normalOffset(value: number);
			get meshSpawnMode(): UnityEngine.ParticleSystemShapeMultiModeValue;
			set meshSpawnMode(value: UnityEngine.ParticleSystemShapeMultiModeValue);
			get meshSpawnSpread(): number;
			set meshSpawnSpread(value: number);
			get meshSpawnSpeed(): UnityEngine.ParticleSystem.MinMaxCurve;
			set meshSpawnSpeed(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get meshSpawnSpeedMultiplier(): number;
			set meshSpawnSpeedMultiplier(value: number);
			get arc(): number;
			set arc(value: number);
			get arcMode(): UnityEngine.ParticleSystemShapeMultiModeValue;
			set arcMode(value: UnityEngine.ParticleSystemShapeMultiModeValue);
			get arcSpread(): number;
			set arcSpread(value: number);
			get arcSpeed(): UnityEngine.ParticleSystem.MinMaxCurve;
			set arcSpeed(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get arcSpeedMultiplier(): number;
			set arcSpeedMultiplier(value: number);
			get donutRadius(): number;
			set donutRadius(value: number);
			get position(): UnityEngine.Vector3;
			set position(value: UnityEngine.Vector3);
			get rotation(): UnityEngine.Vector3;
			set rotation(value: UnityEngine.Vector3);
			get scale(): UnityEngine.Vector3;
			set scale(value: UnityEngine.Vector3);
			get texture(): UnityEngine.Texture2D;
			set texture(value: UnityEngine.Texture2D);
			get textureClipChannel(): UnityEngine.ParticleSystemShapeTextureChannel;
			set textureClipChannel(value: UnityEngine.ParticleSystemShapeTextureChannel);
			get textureClipThreshold(): number;
			set textureClipThreshold(value: number);
			get textureColorAffectsParticles(): boolean;
			set textureColorAffectsParticles(value: boolean);
			get textureAlphaAffectsParticles(): boolean;
			set textureAlphaAffectsParticles(value: boolean);
			get textureBilinearFiltering(): boolean;
			set textureBilinearFiltering(value: boolean);
			get textureUVChannel(): number;
			set textureUVChannel(value: number);
			/**[Obsolete]--"Please use scale instead. (UnityUpgradable) -> UnityEngine.ParticleSystem/ShapeModule.scale" */
			get box(): UnityEngine.Vector3;
			/**[Obsolete]--"Please use scale instead. (UnityUpgradable) -> UnityEngine.ParticleSystem/ShapeModule.scale" */
			set box(value: UnityEngine.Vector3);
			/**[Obsolete]--"meshScale property is deprecated.Please use scale instead." */
			get meshScale(): number;
			/**[Obsolete]--"meshScale property is deprecated.Please use scale instead." */
			set meshScale(value: number);
			/**[Obsolete]--"randomDirection property is deprecated. Use randomDirectionAmount instead." */
			get randomDirection(): boolean;
			/**[Obsolete]--"randomDirection property is deprecated. Use randomDirectionAmount instead." */
			set randomDirection(value: boolean);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class VelocityOverLifetimeModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get x(): UnityEngine.ParticleSystem.MinMaxCurve;
			set x(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get y(): UnityEngine.ParticleSystem.MinMaxCurve;
			set y(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get z(): UnityEngine.ParticleSystem.MinMaxCurve;
			set z(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get xMultiplier(): number;
			set xMultiplier(value: number);
			get yMultiplier(): number;
			set yMultiplier(value: number);
			get zMultiplier(): number;
			set zMultiplier(value: number);
			get orbitalX(): UnityEngine.ParticleSystem.MinMaxCurve;
			set orbitalX(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get orbitalY(): UnityEngine.ParticleSystem.MinMaxCurve;
			set orbitalY(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get orbitalZ(): UnityEngine.ParticleSystem.MinMaxCurve;
			set orbitalZ(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get orbitalXMultiplier(): number;
			set orbitalXMultiplier(value: number);
			get orbitalYMultiplier(): number;
			set orbitalYMultiplier(value: number);
			get orbitalZMultiplier(): number;
			set orbitalZMultiplier(value: number);
			get orbitalOffsetX(): UnityEngine.ParticleSystem.MinMaxCurve;
			set orbitalOffsetX(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get orbitalOffsetY(): UnityEngine.ParticleSystem.MinMaxCurve;
			set orbitalOffsetY(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get orbitalOffsetZ(): UnityEngine.ParticleSystem.MinMaxCurve;
			set orbitalOffsetZ(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get orbitalOffsetXMultiplier(): number;
			set orbitalOffsetXMultiplier(value: number);
			get orbitalOffsetYMultiplier(): number;
			set orbitalOffsetYMultiplier(value: number);
			get orbitalOffsetZMultiplier(): number;
			set orbitalOffsetZMultiplier(value: number);
			get radial(): UnityEngine.ParticleSystem.MinMaxCurve;
			set radial(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get radialMultiplier(): number;
			set radialMultiplier(value: number);
			get speedModifier(): UnityEngine.ParticleSystem.MinMaxCurve;
			set speedModifier(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get speedModifierMultiplier(): number;
			set speedModifierMultiplier(value: number);
			get space(): UnityEngine.ParticleSystemSimulationSpace;
			set space(value: UnityEngine.ParticleSystemSimulationSpace);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LimitVelocityOverLifetimeModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get limitX(): UnityEngine.ParticleSystem.MinMaxCurve;
			set limitX(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get limitXMultiplier(): number;
			set limitXMultiplier(value: number);
			get limitY(): UnityEngine.ParticleSystem.MinMaxCurve;
			set limitY(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get limitYMultiplier(): number;
			set limitYMultiplier(value: number);
			get limitZ(): UnityEngine.ParticleSystem.MinMaxCurve;
			set limitZ(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get limitZMultiplier(): number;
			set limitZMultiplier(value: number);
			get limit(): UnityEngine.ParticleSystem.MinMaxCurve;
			set limit(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get limitMultiplier(): number;
			set limitMultiplier(value: number);
			get dampen(): number;
			set dampen(value: number);
			get separateAxes(): boolean;
			set separateAxes(value: boolean);
			get space(): UnityEngine.ParticleSystemSimulationSpace;
			set space(value: UnityEngine.ParticleSystemSimulationSpace);
			get drag(): UnityEngine.ParticleSystem.MinMaxCurve;
			set drag(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get dragMultiplier(): number;
			set dragMultiplier(value: number);
			get multiplyDragByParticleSize(): boolean;
			set multiplyDragByParticleSize(value: boolean);
			get multiplyDragByParticleVelocity(): boolean;
			set multiplyDragByParticleVelocity(value: boolean);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class InheritVelocityModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get mode(): UnityEngine.ParticleSystemInheritVelocityMode;
			set mode(value: UnityEngine.ParticleSystemInheritVelocityMode);
			get curve(): UnityEngine.ParticleSystem.MinMaxCurve;
			set curve(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get curveMultiplier(): number;
			set curveMultiplier(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ForceOverLifetimeModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get x(): UnityEngine.ParticleSystem.MinMaxCurve;
			set x(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get y(): UnityEngine.ParticleSystem.MinMaxCurve;
			set y(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get z(): UnityEngine.ParticleSystem.MinMaxCurve;
			set z(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get xMultiplier(): number;
			set xMultiplier(value: number);
			get yMultiplier(): number;
			set yMultiplier(value: number);
			get zMultiplier(): number;
			set zMultiplier(value: number);
			get space(): UnityEngine.ParticleSystemSimulationSpace;
			set space(value: UnityEngine.ParticleSystemSimulationSpace);
			get randomized(): boolean;
			set randomized(value: boolean);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ColorOverLifetimeModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get color(): UnityEngine.ParticleSystem.MinMaxGradient;
			set color(value: UnityEngine.ParticleSystem.MinMaxGradient);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ColorBySpeedModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get color(): UnityEngine.ParticleSystem.MinMaxGradient;
			set color(value: UnityEngine.ParticleSystem.MinMaxGradient);
			get range(): UnityEngine.Vector2;
			set range(value: UnityEngine.Vector2);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SizeOverLifetimeModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get size(): UnityEngine.ParticleSystem.MinMaxCurve;
			set size(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get sizeMultiplier(): number;
			set sizeMultiplier(value: number);
			get x(): UnityEngine.ParticleSystem.MinMaxCurve;
			set x(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get xMultiplier(): number;
			set xMultiplier(value: number);
			get y(): UnityEngine.ParticleSystem.MinMaxCurve;
			set y(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get yMultiplier(): number;
			set yMultiplier(value: number);
			get z(): UnityEngine.ParticleSystem.MinMaxCurve;
			set z(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get zMultiplier(): number;
			set zMultiplier(value: number);
			get separateAxes(): boolean;
			set separateAxes(value: boolean);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SizeBySpeedModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get size(): UnityEngine.ParticleSystem.MinMaxCurve;
			set size(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get sizeMultiplier(): number;
			set sizeMultiplier(value: number);
			get x(): UnityEngine.ParticleSystem.MinMaxCurve;
			set x(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get xMultiplier(): number;
			set xMultiplier(value: number);
			get y(): UnityEngine.ParticleSystem.MinMaxCurve;
			set y(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get yMultiplier(): number;
			set yMultiplier(value: number);
			get z(): UnityEngine.ParticleSystem.MinMaxCurve;
			set z(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get zMultiplier(): number;
			set zMultiplier(value: number);
			get separateAxes(): boolean;
			set separateAxes(value: boolean);
			get range(): UnityEngine.Vector2;
			set range(value: UnityEngine.Vector2);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RotationOverLifetimeModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get x(): UnityEngine.ParticleSystem.MinMaxCurve;
			set x(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get xMultiplier(): number;
			set xMultiplier(value: number);
			get y(): UnityEngine.ParticleSystem.MinMaxCurve;
			set y(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get yMultiplier(): number;
			set yMultiplier(value: number);
			get z(): UnityEngine.ParticleSystem.MinMaxCurve;
			set z(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get zMultiplier(): number;
			set zMultiplier(value: number);
			get separateAxes(): boolean;
			set separateAxes(value: boolean);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RotationBySpeedModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get x(): UnityEngine.ParticleSystem.MinMaxCurve;
			set x(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get xMultiplier(): number;
			set xMultiplier(value: number);
			get y(): UnityEngine.ParticleSystem.MinMaxCurve;
			set y(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get yMultiplier(): number;
			set yMultiplier(value: number);
			get z(): UnityEngine.ParticleSystem.MinMaxCurve;
			set z(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get zMultiplier(): number;
			set zMultiplier(value: number);
			get separateAxes(): boolean;
			set separateAxes(value: boolean);
			get range(): UnityEngine.Vector2;
			set range(value: UnityEngine.Vector2);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ExternalForcesModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get multiplier(): number;
			set multiplier(value: number);
			get influenceFilter(): UnityEngine.ParticleSystemGameObjectFilter;
			set influenceFilter(value: UnityEngine.ParticleSystemGameObjectFilter);
			get influenceCount(): number;
			AddInfluence(field: UnityEngine.ParticleSystemForceField): void;
			RemoveInfluence(index: number): void;
			RemoveInfluence(field: UnityEngine.ParticleSystemForceField): void;
			SetInfluence(index: number, field: UnityEngine.ParticleSystemForceField): void;
			GetInfluence(index: number): UnityEngine.ParticleSystemForceField;
			IsAffectedBy(field: UnityEngine.ParticleSystemForceField): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NoiseModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get separateAxes(): boolean;
			set separateAxes(value: boolean);
			get strength(): UnityEngine.ParticleSystem.MinMaxCurve;
			set strength(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get strengthMultiplier(): number;
			set strengthMultiplier(value: number);
			get strengthX(): UnityEngine.ParticleSystem.MinMaxCurve;
			set strengthX(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get strengthXMultiplier(): number;
			set strengthXMultiplier(value: number);
			get strengthY(): UnityEngine.ParticleSystem.MinMaxCurve;
			set strengthY(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get strengthYMultiplier(): number;
			set strengthYMultiplier(value: number);
			get strengthZ(): UnityEngine.ParticleSystem.MinMaxCurve;
			set strengthZ(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get strengthZMultiplier(): number;
			set strengthZMultiplier(value: number);
			get frequency(): number;
			set frequency(value: number);
			get damping(): boolean;
			set damping(value: boolean);
			get octaveCount(): number;
			set octaveCount(value: number);
			get octaveMultiplier(): number;
			set octaveMultiplier(value: number);
			get octaveScale(): number;
			set octaveScale(value: number);
			get quality(): UnityEngine.ParticleSystemNoiseQuality;
			set quality(value: UnityEngine.ParticleSystemNoiseQuality);
			get scrollSpeed(): UnityEngine.ParticleSystem.MinMaxCurve;
			set scrollSpeed(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get scrollSpeedMultiplier(): number;
			set scrollSpeedMultiplier(value: number);
			get remapEnabled(): boolean;
			set remapEnabled(value: boolean);
			get remap(): UnityEngine.ParticleSystem.MinMaxCurve;
			set remap(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get remapMultiplier(): number;
			set remapMultiplier(value: number);
			get remapX(): UnityEngine.ParticleSystem.MinMaxCurve;
			set remapX(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get remapXMultiplier(): number;
			set remapXMultiplier(value: number);
			get remapY(): UnityEngine.ParticleSystem.MinMaxCurve;
			set remapY(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get remapYMultiplier(): number;
			set remapYMultiplier(value: number);
			get remapZ(): UnityEngine.ParticleSystem.MinMaxCurve;
			set remapZ(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get remapZMultiplier(): number;
			set remapZMultiplier(value: number);
			get positionAmount(): UnityEngine.ParticleSystem.MinMaxCurve;
			set positionAmount(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get rotationAmount(): UnityEngine.ParticleSystem.MinMaxCurve;
			set rotationAmount(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get sizeAmount(): UnityEngine.ParticleSystem.MinMaxCurve;
			set sizeAmount(value: UnityEngine.ParticleSystem.MinMaxCurve);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CollisionModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get type(): UnityEngine.ParticleSystemCollisionType;
			set type(value: UnityEngine.ParticleSystemCollisionType);
			get mode(): UnityEngine.ParticleSystemCollisionMode;
			set mode(value: UnityEngine.ParticleSystemCollisionMode);
			get dampen(): UnityEngine.ParticleSystem.MinMaxCurve;
			set dampen(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get dampenMultiplier(): number;
			set dampenMultiplier(value: number);
			get bounce(): UnityEngine.ParticleSystem.MinMaxCurve;
			set bounce(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get bounceMultiplier(): number;
			set bounceMultiplier(value: number);
			get lifetimeLoss(): UnityEngine.ParticleSystem.MinMaxCurve;
			set lifetimeLoss(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get lifetimeLossMultiplier(): number;
			set lifetimeLossMultiplier(value: number);
			get minKillSpeed(): number;
			set minKillSpeed(value: number);
			get maxKillSpeed(): number;
			set maxKillSpeed(value: number);
			get collidesWith(): UnityEngine.LayerMask;
			set collidesWith(value: UnityEngine.LayerMask);
			get enableDynamicColliders(): boolean;
			set enableDynamicColliders(value: boolean);
			get maxCollisionShapes(): number;
			set maxCollisionShapes(value: number);
			get quality(): UnityEngine.ParticleSystemCollisionQuality;
			set quality(value: UnityEngine.ParticleSystemCollisionQuality);
			get voxelSize(): number;
			set voxelSize(value: number);
			get radiusScale(): number;
			set radiusScale(value: number);
			get sendCollisionMessages(): boolean;
			set sendCollisionMessages(value: boolean);
			get colliderForce(): number;
			set colliderForce(value: number);
			get multiplyColliderForceByCollisionAngle(): boolean;
			set multiplyColliderForceByCollisionAngle(value: boolean);
			get multiplyColliderForceByParticleSpeed(): boolean;
			set multiplyColliderForceByParticleSpeed(value: boolean);
			get multiplyColliderForceByParticleSize(): boolean;
			set multiplyColliderForceByParticleSize(value: boolean);
			get maxPlaneCount(): number;
			/**[Obsolete]--"enableInteriorCollisions property is deprecated and is no longer required and has no effect on the particle system." */
			get enableInteriorCollisions(): boolean;
			/**[Obsolete]--"enableInteriorCollisions property is deprecated and is no longer required and has no effect on the particle system." */
			set enableInteriorCollisions(value: boolean);
			SetPlane(index: number, transform: UnityEngine.Transform): void;
			GetPlane(index: number): UnityEngine.Transform;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TriggerModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get inside(): UnityEngine.ParticleSystemOverlapAction;
			set inside(value: UnityEngine.ParticleSystemOverlapAction);
			get outside(): UnityEngine.ParticleSystemOverlapAction;
			set outside(value: UnityEngine.ParticleSystemOverlapAction);
			get enter(): UnityEngine.ParticleSystemOverlapAction;
			set enter(value: UnityEngine.ParticleSystemOverlapAction);
			get exit(): UnityEngine.ParticleSystemOverlapAction;
			set exit(value: UnityEngine.ParticleSystemOverlapAction);
			get radiusScale(): number;
			set radiusScale(value: number);
			get maxColliderCount(): number;
			SetCollider(index: number, collider: UnityEngine.Component): void;
			GetCollider(index: number): UnityEngine.Component;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SubEmittersModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get subEmittersCount(): number;
			/**[Obsolete]--"birth0 property is deprecated. Use AddSubEmitter, RemoveSubEmitter, SetSubEmitterSystem and GetSubEmitterSystem instead." */
			get birth0(): UnityEngine.ParticleSystem;
			/**[Obsolete]--"birth0 property is deprecated. Use AddSubEmitter, RemoveSubEmitter, SetSubEmitterSystem and GetSubEmitterSystem instead." */
			set birth0(value: UnityEngine.ParticleSystem);
			/**[Obsolete]--"birth1 property is deprecated. Use AddSubEmitter, RemoveSubEmitter, SetSubEmitterSystem and GetSubEmitterSystem instead." */
			get birth1(): UnityEngine.ParticleSystem;
			/**[Obsolete]--"birth1 property is deprecated. Use AddSubEmitter, RemoveSubEmitter, SetSubEmitterSystem and GetSubEmitterSystem instead." */
			set birth1(value: UnityEngine.ParticleSystem);
			/**[Obsolete]--"collision0 property is deprecated. Use AddSubEmitter, RemoveSubEmitter, SetSubEmitterSystem and GetSubEmitterSystem instead." */
			get collision0(): UnityEngine.ParticleSystem;
			/**[Obsolete]--"collision0 property is deprecated. Use AddSubEmitter, RemoveSubEmitter, SetSubEmitterSystem and GetSubEmitterSystem instead." */
			set collision0(value: UnityEngine.ParticleSystem);
			/**[Obsolete]--"collision1 property is deprecated. Use AddSubEmitter, RemoveSubEmitter, SetSubEmitterSystem and GetSubEmitterSystem instead." */
			get collision1(): UnityEngine.ParticleSystem;
			/**[Obsolete]--"collision1 property is deprecated. Use AddSubEmitter, RemoveSubEmitter, SetSubEmitterSystem and GetSubEmitterSystem instead." */
			set collision1(value: UnityEngine.ParticleSystem);
			/**[Obsolete]--"death0 property is deprecated. Use AddSubEmitter, RemoveSubEmitter, SetSubEmitterSystem and GetSubEmitterSystem instead." */
			get death0(): UnityEngine.ParticleSystem;
			/**[Obsolete]--"death0 property is deprecated. Use AddSubEmitter, RemoveSubEmitter, SetSubEmitterSystem and GetSubEmitterSystem instead." */
			set death0(value: UnityEngine.ParticleSystem);
			/**[Obsolete]--"death1 property is deprecated. Use AddSubEmitter, RemoveSubEmitter, SetSubEmitterSystem and GetSubEmitterSystem instead." */
			get death1(): UnityEngine.ParticleSystem;
			/**[Obsolete]--"death1 property is deprecated. Use AddSubEmitter, RemoveSubEmitter, SetSubEmitterSystem and GetSubEmitterSystem instead." */
			set death1(value: UnityEngine.ParticleSystem);
			AddSubEmitter(subEmitter: UnityEngine.ParticleSystem, type: UnityEngine.ParticleSystemSubEmitterType, properties: UnityEngine.ParticleSystemSubEmitterProperties): void;
			AddSubEmitter(subEmitter: UnityEngine.ParticleSystem, type: UnityEngine.ParticleSystemSubEmitterType, properties: UnityEngine.ParticleSystemSubEmitterProperties, emitProbability: number): void;
			RemoveSubEmitter(index: number): void;
			SetSubEmitterSystem(index: number, subEmitter: UnityEngine.ParticleSystem): void;
			SetSubEmitterType(index: number, type: UnityEngine.ParticleSystemSubEmitterType): void;
			SetSubEmitterEmitProbability(index: number, emitProbability: number): void;
			SetSubEmitterProperties(index: number, properties: UnityEngine.ParticleSystemSubEmitterProperties): void;
			GetSubEmitterSystem(index: number): UnityEngine.ParticleSystem;
			GetSubEmitterType(index: number): UnityEngine.ParticleSystemSubEmitterType;
			GetSubEmitterEmitProbability(index: number): number;
			GetSubEmitterProperties(index: number): UnityEngine.ParticleSystemSubEmitterProperties;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TextureSheetAnimationModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get mode(): UnityEngine.ParticleSystemAnimationMode;
			set mode(value: UnityEngine.ParticleSystemAnimationMode);
			get timeMode(): UnityEngine.ParticleSystemAnimationTimeMode;
			set timeMode(value: UnityEngine.ParticleSystemAnimationTimeMode);
			get fps(): number;
			set fps(value: number);
			get numTilesX(): number;
			set numTilesX(value: number);
			get numTilesY(): number;
			set numTilesY(value: number);
			get animation(): UnityEngine.ParticleSystemAnimationType;
			set animation(value: UnityEngine.ParticleSystemAnimationType);
			get useRandomRow(): boolean;
			set useRandomRow(value: boolean);
			get frameOverTime(): UnityEngine.ParticleSystem.MinMaxCurve;
			set frameOverTime(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get frameOverTimeMultiplier(): number;
			set frameOverTimeMultiplier(value: number);
			get startFrame(): UnityEngine.ParticleSystem.MinMaxCurve;
			set startFrame(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get startFrameMultiplier(): number;
			set startFrameMultiplier(value: number);
			get cycleCount(): number;
			set cycleCount(value: number);
			get rowIndex(): number;
			set rowIndex(value: number);
			get uvChannelMask(): any;
			set uvChannelMask(value: any);
			get spriteCount(): number;
			get speedRange(): UnityEngine.Vector2;
			set speedRange(value: UnityEngine.Vector2);
			/**[Obsolete]--"flipU property is deprecated. Use ParticleSystemRenderer.flip.x instead." */
			get flipU(): number;
			/**[Obsolete]--"flipU property is deprecated. Use ParticleSystemRenderer.flip.x instead." */
			set flipU(value: number);
			/**[Obsolete]--"flipV property is deprecated. Use ParticleSystemRenderer.flip.y instead." */
			get flipV(): number;
			/**[Obsolete]--"flipV property is deprecated. Use ParticleSystemRenderer.flip.y instead." */
			set flipV(value: number);
			AddSprite(sprite: UnityEngine.Sprite): void;
			RemoveSprite(index: number): void;
			SetSprite(index: number, sprite: UnityEngine.Sprite): void;
			GetSprite(index: number): UnityEngine.Sprite;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LightsModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get ratio(): number;
			set ratio(value: number);
			get useRandomDistribution(): boolean;
			set useRandomDistribution(value: boolean);
			get light(): UnityEngine.Light;
			set light(value: UnityEngine.Light);
			get useParticleColor(): boolean;
			set useParticleColor(value: boolean);
			get sizeAffectsRange(): boolean;
			set sizeAffectsRange(value: boolean);
			get alphaAffectsIntensity(): boolean;
			set alphaAffectsIntensity(value: boolean);
			get range(): UnityEngine.ParticleSystem.MinMaxCurve;
			set range(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get rangeMultiplier(): number;
			set rangeMultiplier(value: number);
			get intensity(): UnityEngine.ParticleSystem.MinMaxCurve;
			set intensity(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get intensityMultiplier(): number;
			set intensityMultiplier(value: number);
			get maxLights(): number;
			set maxLights(value: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TrailModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			get mode(): UnityEngine.ParticleSystemTrailMode;
			set mode(value: UnityEngine.ParticleSystemTrailMode);
			get ratio(): number;
			set ratio(value: number);
			get lifetime(): UnityEngine.ParticleSystem.MinMaxCurve;
			set lifetime(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get lifetimeMultiplier(): number;
			set lifetimeMultiplier(value: number);
			get minVertexDistance(): number;
			set minVertexDistance(value: number);
			get textureMode(): UnityEngine.ParticleSystemTrailTextureMode;
			set textureMode(value: UnityEngine.ParticleSystemTrailTextureMode);
			get worldSpace(): boolean;
			set worldSpace(value: boolean);
			get dieWithParticles(): boolean;
			set dieWithParticles(value: boolean);
			get sizeAffectsWidth(): boolean;
			set sizeAffectsWidth(value: boolean);
			get sizeAffectsLifetime(): boolean;
			set sizeAffectsLifetime(value: boolean);
			get inheritParticleColor(): boolean;
			set inheritParticleColor(value: boolean);
			get colorOverLifetime(): UnityEngine.ParticleSystem.MinMaxGradient;
			set colorOverLifetime(value: UnityEngine.ParticleSystem.MinMaxGradient);
			get widthOverTrail(): UnityEngine.ParticleSystem.MinMaxCurve;
			set widthOverTrail(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get widthOverTrailMultiplier(): number;
			set widthOverTrailMultiplier(value: number);
			get colorOverTrail(): UnityEngine.ParticleSystem.MinMaxGradient;
			set colorOverTrail(value: UnityEngine.ParticleSystem.MinMaxGradient);
			get generateLightingData(): boolean;
			set generateLightingData(value: boolean);
			get ribbonCount(): number;
			set ribbonCount(value: number);
			get shadowBias(): number;
			set shadowBias(value: number);
			get splitSubEmitterRibbons(): boolean;
			set splitSubEmitterRibbons(value: boolean);
			get attachRibbonsToTransform(): boolean;
			set attachRibbonsToTransform(value: boolean);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CustomDataModule {
			get enabled(): boolean;
			set enabled(value: boolean);
			SetMode(stream: UnityEngine.ParticleSystemCustomData, mode: UnityEngine.ParticleSystemCustomDataMode): void;
			GetMode(stream: UnityEngine.ParticleSystemCustomData): UnityEngine.ParticleSystemCustomDataMode;
			SetVectorComponentCount(stream: UnityEngine.ParticleSystemCustomData, count: number): void;
			GetVectorComponentCount(stream: UnityEngine.ParticleSystemCustomData): number;
			SetVector(stream: UnityEngine.ParticleSystemCustomData, component: number, curve: UnityEngine.ParticleSystem.MinMaxCurve): void;
			GetVector(stream: UnityEngine.ParticleSystemCustomData, component: number): UnityEngine.ParticleSystem.MinMaxCurve;
			SetColor(stream: UnityEngine.ParticleSystemCustomData, gradient: UnityEngine.ParticleSystem.MinMaxGradient): void;
			GetColor(stream: UnityEngine.ParticleSystemCustomData): UnityEngine.ParticleSystem.MinMaxGradient;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MinMaxCurve {
			/**[Obsolete]--"Please use MinMaxCurve.curveMultiplier instead. (UnityUpgradable) -> UnityEngine.ParticleSystem/MinMaxCurve.curveMultiplier" */
			get curveScalar(): number;
			/**[Obsolete]--"Please use MinMaxCurve.curveMultiplier instead. (UnityUpgradable) -> UnityEngine.ParticleSystem/MinMaxCurve.curveMultiplier" */
			set curveScalar(value: number);
			get mode(): UnityEngine.ParticleSystemCurveMode;
			set mode(value: UnityEngine.ParticleSystemCurveMode);
			get curveMultiplier(): number;
			set curveMultiplier(value: number);
			get curveMax(): UnityEngine.AnimationCurve;
			set curveMax(value: UnityEngine.AnimationCurve);
			get curveMin(): UnityEngine.AnimationCurve;
			set curveMin(value: UnityEngine.AnimationCurve);
			get constantMax(): number;
			set constantMax(value: number);
			get constantMin(): number;
			set constantMin(value: number);
			get constant(): number;
			set constant(value: number);
			get curve(): UnityEngine.AnimationCurve;
			set curve(value: UnityEngine.AnimationCurve);
			constructor(constant: number);
			constructor(multiplier: number, curve: UnityEngine.AnimationCurve);
			constructor(multiplier: number, min: UnityEngine.AnimationCurve, max: UnityEngine.AnimationCurve);
			constructor(min: number, max: number);
			static op_Implicit(constant: number): UnityEngine.ParticleSystem.MinMaxCurve;
			Evaluate(time: number): number;
			Evaluate(time: number, lerpFactor: number): number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Particle {
			/**[Obsolete]--"Please use Particle.remainingLifetime instead. (UnityUpgradable) -> UnityEngine.ParticleSystem/Particle.remainingLifetime" */
			get lifetime(): number;
			/**[Obsolete]--"Please use Particle.remainingLifetime instead. (UnityUpgradable) -> UnityEngine.ParticleSystem/Particle.remainingLifetime" */
			set lifetime(value: number);
			/**[Obsolete]--"randomValue property is deprecated. Use randomSeed instead to control random behavior of particles." */
			get randomValue(): number;
			/**[Obsolete]--"randomValue property is deprecated. Use randomSeed instead to control random behavior of particles." */
			set randomValue(value: number);
			/**[Obsolete]--"size property is deprecated. Use startSize or GetCurrentSize() instead." */
			get size(): number;
			/**[Obsolete]--"size property is deprecated. Use startSize or GetCurrentSize() instead." */
			set size(value: number);
			/**[Obsolete]--"color property is deprecated. Use startColor or GetCurrentColor() instead." */
			get color(): UnityEngine.Color32;
			/**[Obsolete]--"color property is deprecated. Use startColor or GetCurrentColor() instead." */
			set color(value: UnityEngine.Color32);
			get position(): UnityEngine.Vector3;
			set position(value: UnityEngine.Vector3);
			get velocity(): UnityEngine.Vector3;
			set velocity(value: UnityEngine.Vector3);
			get animatedVelocity(): UnityEngine.Vector3;
			get totalVelocity(): UnityEngine.Vector3;
			get remainingLifetime(): number;
			set remainingLifetime(value: number);
			get startLifetime(): number;
			set startLifetime(value: number);
			get startColor(): UnityEngine.Color32;
			set startColor(value: UnityEngine.Color32);
			get randomSeed(): number;
			set randomSeed(value: number);
			get axisOfRotation(): UnityEngine.Vector3;
			set axisOfRotation(value: UnityEngine.Vector3);
			get startSize(): number;
			set startSize(value: number);
			get startSize3D(): UnityEngine.Vector3;
			set startSize3D(value: UnityEngine.Vector3);
			get rotation(): number;
			set rotation(value: number);
			get rotation3D(): UnityEngine.Vector3;
			set rotation3D(value: UnityEngine.Vector3);
			get angularVelocity(): number;
			set angularVelocity(value: number);
			get angularVelocity3D(): UnityEngine.Vector3;
			set angularVelocity3D(value: UnityEngine.Vector3);
			GetCurrentSize(system: UnityEngine.ParticleSystem): number;
			GetCurrentSize3D(system: UnityEngine.ParticleSystem): UnityEngine.Vector3;
			GetCurrentColor(system: UnityEngine.ParticleSystem): UnityEngine.Color32;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CollisionEvent {
			get intersection(): UnityEngine.Vector3;
			get normal(): UnityEngine.Vector3;
			get velocity(): UnityEngine.Vector3;
			get collider(): UnityEngine.Component;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Burst {
			get time(): number;
			set time(value: number);
			get count(): UnityEngine.ParticleSystem.MinMaxCurve;
			set count(value: UnityEngine.ParticleSystem.MinMaxCurve);
			get minCount(): number;
			set minCount(value: number);
			get maxCount(): number;
			set maxCount(value: number);
			get cycleCount(): number;
			set cycleCount(value: number);
			get repeatInterval(): number;
			set repeatInterval(value: number);
			get probability(): number;
			set probability(value: number);
			constructor(_time: number, _count: number);
			constructor(_time: number, _minCount: number, _maxCount: number);
			constructor(_time: number, _minCount: number, _maxCount: number, _cycleCount: number, _repeatInterval: number);
			constructor(_time: number, _count: UnityEngine.ParticleSystem.MinMaxCurve);
			constructor(_time: number, _count: UnityEngine.ParticleSystem.MinMaxCurve, _cycleCount: number, _repeatInterval: number);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MinMaxGradient {
			get mode(): UnityEngine.ParticleSystemGradientMode;
			set mode(value: UnityEngine.ParticleSystemGradientMode);
			get gradientMax(): UnityEngine.Gradient;
			set gradientMax(value: UnityEngine.Gradient);
			get gradientMin(): UnityEngine.Gradient;
			set gradientMin(value: UnityEngine.Gradient);
			get colorMax(): UnityEngine.Color;
			set colorMax(value: UnityEngine.Color);
			get colorMin(): UnityEngine.Color;
			set colorMin(value: UnityEngine.Color);
			get color(): UnityEngine.Color;
			set color(value: UnityEngine.Color);
			get gradient(): UnityEngine.Gradient;
			set gradient(value: UnityEngine.Gradient);
			constructor(color: UnityEngine.Color);
			constructor(gradient: UnityEngine.Gradient);
			constructor(min: UnityEngine.Color, max: UnityEngine.Color);
			constructor(min: UnityEngine.Gradient, max: UnityEngine.Gradient);
			static op_Implicit(color: UnityEngine.Color): UnityEngine.ParticleSystem.MinMaxGradient;
			static op_Implicit(gradient: UnityEngine.Gradient): UnityEngine.ParticleSystem.MinMaxGradient;
			Evaluate(time: number): UnityEngine.Color;
			Evaluate(time: number, lerpFactor: number): UnityEngine.Color;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EmitParams {
			get position(): UnityEngine.Vector3;
			set position(value: UnityEngine.Vector3);
			get applyShapeToPosition(): boolean;
			set applyShapeToPosition(value: boolean);
			get velocity(): UnityEngine.Vector3;
			set velocity(value: UnityEngine.Vector3);
			get startLifetime(): number;
			set startLifetime(value: number);
			get startSize(): number;
			set startSize(value: number);
			get startSize3D(): UnityEngine.Vector3;
			set startSize3D(value: UnityEngine.Vector3);
			get axisOfRotation(): UnityEngine.Vector3;
			set axisOfRotation(value: UnityEngine.Vector3);
			get rotation(): number;
			set rotation(value: number);
			get rotation3D(): UnityEngine.Vector3;
			set rotation3D(value: UnityEngine.Vector3);
			get angularVelocity(): number;
			set angularVelocity(value: number);
			get angularVelocity3D(): UnityEngine.Vector3;
			set angularVelocity3D(value: UnityEngine.Vector3);
			get startColor(): UnityEngine.Color32;
			set startColor(value: UnityEngine.Color32);
			get randomSeed(): number;
			set randomSeed(value: number);
			ResetPosition(): void;
			ResetVelocity(): void;
			ResetAxisOfRotation(): void;
			ResetRotation(): void;
			ResetAngularVelocity(): void;
			ResetStartSize(): void;
			ResetStartColor(): void;
			ResetRandomSeed(): void;
			ResetStartLifetime(): void;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.CompositeCollider2D {
		export enum GeometryType { Outlines = 0, Polygons = 1, }
		export enum GenerationType { Synchronous = 0, Manual = 1, }

	}
	export namespace UnityEngine.ScreenCapture {
		export enum StereoScreenCaptureMode { LeftEye = 1, RightEye = 2, BothEyes = 3, }

	}
	export namespace UnityEngine.Terrain {
		export enum MaterialType { BuiltInStandard = 0, BuiltInLegacyDiffuse = 1, BuiltInLegacySpecular = 2, Custom = 3, }

	}
	export namespace UnityEngine.Font {
		export class FontTextureRebuildCallback extends Function {
		}

	}
	export namespace UnityEngine.GridBrushBase {
		export enum Tool { Select = 0, Move = 1, Paint = 2, Box = 3, Pick = 4, Erase = 5, FloodFill = 6, }
		export enum RotationDirection { Clockwise = 0, CounterClockwise = 1, }
		export enum FlipAxis { X = 0, Y = 1, }

	}
	export namespace UnityEngine.Canvas {
		export class WillRenderCanvases extends Function {
		}

	}
	export namespace UnityEngine.UISystemProfilerApi {
		export enum SampleType { Layout = 0, Render = 1, }

	}
	export namespace UnityEngine.CanvasRenderer {
		export class OnRequestRebuild extends Function {
		}

	}
	export namespace UnityEngine.Networking {
		export class Utility extends System.Object {
			/**[Obsolete][Error]--"This property is unused and should not be referenced in code." */
			static get useRandomSourceID(): boolean;
			/**[Obsolete][Error]--"This property is unused and should not be referenced in code." */
			static set useRandomSourceID(value: boolean);
			static GetSourceID(): any;
			/**[Obsolete][Error]--"This function is unused and should not be referenced in code. Please sign in and setup your project in the editor instead." */
			static SetAppID(newAppID: any): void;
			/**[Obsolete][Error]--"This function is unused and should not be referenced in code. Please sign in and setup your project in the editor instead." */
			static GetAppID(): any;
			static SetAccessTokenForNetwork(netId: any, accessToken: any): void;
			static GetAccessTokenForNetwork(netId: any): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkTransport extends System.Object {
			static get IsStarted(): boolean;
			static ConnectEndPoint(hostId: number, endPoint: any, exceptionConnectionId: number, error: any): number;
			static Init(): void;
			static Init(config: UnityEngine.Networking.GlobalConfig): void;
			static Shutdown(): void;
			/**[Obsolete]--"This function has been deprecated. Use AssetDatabase utilities instead." */
			static GetAssetId(go: UnityEngine.GameObject): string;
			static AddSceneId(id: number): void;
			static GetNextSceneId(): number;
			static AddHostWithSimulator(topology: UnityEngine.Networking.HostTopology, minTimeout: number, maxTimeout: number, port: number, ip: string): number;
			static AddHostWithSimulator(topology: UnityEngine.Networking.HostTopology, minTimeout: number, maxTimeout: number, port: number): number;
			static AddHostWithSimulator(topology: UnityEngine.Networking.HostTopology, minTimeout: number, maxTimeout: number): number;
			static AddHost(topology: UnityEngine.Networking.HostTopology, port: number, ip: string): number;
			static AddHost(topology: UnityEngine.Networking.HostTopology, port: number): number;
			static AddHost(topology: UnityEngine.Networking.HostTopology): number;
			static AddWebsocketHost(topology: UnityEngine.Networking.HostTopology, port: number, ip: string): number;
			static AddWebsocketHost(topology: UnityEngine.Networking.HostTopology, port: number): number;
			static ConnectAsNetworkHost(hostId: number, address: string, port: number, network: any, source: any, node: any, error: any): void;
			static DisconnectNetworkHost(hostId: number, error: any): void;
			static ReceiveRelayEventFromHost(hostId: number, error: any): UnityEngine.Networking.NetworkEventType;
			static ConnectToNetworkPeer(hostId: number, address: string, port: number, exceptionConnectionId: number, relaySlotId: number, network: any, source: any, node: any, bytesPerSec: number, bucketSizeFactor: number, error: any): number;
			static ConnectToNetworkPeer(hostId: number, address: string, port: number, exceptionConnectionId: number, relaySlotId: number, network: any, source: any, node: any, error: any): number;
			/**[Obsolete]--"GetCurrentIncomingMessageAmount has been deprecated." */
			static GetCurrentIncomingMessageAmount(): number;
			/**[Obsolete]--"GetCurrentOutgoingMessageAmount has been deprecated." */
			static GetCurrentOutgoingMessageAmount(): number;
			static GetIncomingMessageQueueSize(hostId: number, error: any): number;
			static GetOutgoingMessageQueueSize(hostId: number, error: any): number;
			static GetCurrentRTT(hostId: number, connectionId: number, error: any): number;
			/**[Obsolete]--"GetCurrentRtt() has been deprecated." */
			static GetCurrentRtt(hostId: number, connectionId: number, error: any): number;
			static GetIncomingPacketLossCount(hostId: number, connectionId: number, error: any): number;
			/**[Obsolete]--"GetNetworkLostPacketNum() has been deprecated." */
			static GetNetworkLostPacketNum(hostId: number, connectionId: number, error: any): number;
			static GetIncomingPacketCount(hostId: number, connectionId: number, error: any): number;
			static GetOutgoingPacketNetworkLossPercent(hostId: number, connectionId: number, error: any): number;
			static GetOutgoingPacketOverflowLossPercent(hostId: number, connectionId: number, error: any): number;
			static GetMaxAllowedBandwidth(hostId: number, connectionId: number, error: any): number;
			static GetAckBufferCount(hostId: number, connectionId: number, error: any): number;
			static GetIncomingPacketDropCountForAllHosts(): number;
			static GetIncomingPacketCountForAllHosts(): number;
			static GetOutgoingPacketCount(): number;
			static GetOutgoingPacketCountForHost(hostId: number, error: any): number;
			static GetOutgoingPacketCountForConnection(hostId: number, connectionId: number, error: any): number;
			static GetOutgoingMessageCount(): number;
			static GetOutgoingMessageCountForHost(hostId: number, error: any): number;
			static GetOutgoingMessageCountForConnection(hostId: number, connectionId: number, error: any): number;
			static GetOutgoingUserBytesCount(): number;
			static GetOutgoingUserBytesCountForHost(hostId: number, error: any): number;
			static GetOutgoingUserBytesCountForConnection(hostId: number, connectionId: number, error: any): number;
			static GetOutgoingSystemBytesCount(): number;
			static GetOutgoingSystemBytesCountForHost(hostId: number, error: any): number;
			static GetOutgoingSystemBytesCountForConnection(hostId: number, connectionId: number, error: any): number;
			static GetOutgoingFullBytesCount(): number;
			static GetOutgoingFullBytesCountForHost(hostId: number, error: any): number;
			static GetOutgoingFullBytesCountForConnection(hostId: number, connectionId: number, error: any): number;
			/**[Obsolete]--"GetPacketSentRate has been deprecated." */
			static GetPacketSentRate(hostId: number, connectionId: number, error: any): number;
			/**[Obsolete]--"GetPacketReceivedRate has been deprecated." */
			static GetPacketReceivedRate(hostId: number, connectionId: number, error: any): number;
			/**[Obsolete]--"GetRemotePacketReceivedRate has been deprecated." */
			static GetRemotePacketReceivedRate(hostId: number, connectionId: number, error: any): number;
			/**[Obsolete]--"GetNetIOTimeuS has been deprecated." */
			static GetNetIOTimeuS(): number;
			static GetConnectionInfo(hostId: number, connectionId: number, port: any, network: any, dstNode: any, error: any): string;
			static GetConnectionInfo(hostId: number, connectionId: number, address: any, port: any, network: any, dstNode: any, error: any): void;
			static GetNetworkTimestamp(): number;
			static GetRemoteDelayTimeMS(hostId: number, connectionId: number, remoteTime: number, error: any): number;
			static StartSendMulticast(hostId: number, channelId: number, buffer: Uint8Array, size: number, error: any): boolean;
			static SendMulticast(hostId: number, connectionId: number, error: any): boolean;
			static FinishSendMulticast(hostId: number, error: any): boolean;
			static RemoveHost(hostId: number): boolean;
			static Connect(hostId: number, address: string, port: number, exeptionConnectionId: number, error: any): number;
			static ConnectWithSimulator(hostId: number, address: string, port: number, exeptionConnectionId: number, error: any, conf: UnityEngine.Networking.ConnectionSimulatorConfig): number;
			static Disconnect(hostId: number, connectionId: number, error: any): boolean;
			static Send(hostId: number, connectionId: number, channelId: number, buffer: Uint8Array, size: number, error: any): boolean;
			static QueueMessageForSending(hostId: number, connectionId: number, channelId: number, buffer: Uint8Array, size: number, error: any): boolean;
			static SendQueuedMessages(hostId: number, connectionId: number, error: any): boolean;
			static Receive(hostId: any, connectionId: any, channelId: any, buffer: Uint8Array, bufferSize: number, receivedSize: any, error: any): UnityEngine.Networking.NetworkEventType;
			static ReceiveFromHost(hostId: number, connectionId: any, channelId: any, buffer: Uint8Array, bufferSize: number, receivedSize: any, error: any): UnityEngine.Networking.NetworkEventType;
			static SetPacketStat(direction: number, packetStatId: number, numMsgs: number, numBytes: number): void;
			static NotifyWhenConnectionReadyForSend(hostId: number, connectionId: number, notificationLevel: number, error: any): boolean;
			static GetHostPort(hostId: number): number;
			static StartBroadcastDiscovery(hostId: number, broadcastPort: number, key: number, version: number, subversion: number, buffer: Uint8Array, size: number, timeout: number, error: any): boolean;
			static StopBroadcastDiscovery(): void;
			static IsBroadcastDiscoveryRunning(): boolean;
			static SetBroadcastCredentials(hostId: number, key: number, version: number, subversion: number, error: any): void;
			static GetBroadcastConnectionInfo(hostId: number, port: any, error: any): string;
			static GetBroadcastConnectionInfo(hostId: number, address: any, port: any, error: any): void;
			static GetBroadcastConnectionMessage(hostId: number, buffer: Uint8Array, bufferSize: number, receivedSize: any, error: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum NetworkEventType { DataEvent = 0, ConnectEvent = 1, DisconnectEvent = 2, Nothing = 3, BroadcastEvent = 4, }
		export enum QosType { Unreliable = 0, UnreliableFragmented = 1, UnreliableSequenced = 2, Reliable = 3, ReliableFragmented = 4, ReliableSequenced = 5, StateUpdate = 6, ReliableStateUpdate = 7, AllCostDelivery = 8, UnreliableFragmentedSequenced = 9, ReliableFragmentedSequenced = 10, }
		export enum NetworkError { Ok = 0, WrongHost = 1, WrongConnection = 2, WrongChannel = 3, NoResources = 4, BadMessage = 5, Timeout = 6, MessageToLong = 7, WrongOperation = 8, VersionMismatch = 9, CRCMismatch = 10, DNSFailure = 11, UsageError = 12, }
		export enum ReactorModel { SelectReactor = 0, FixRateReactor = 1, }
		export enum ConnectionAcksType { Acks32 = 1, Acks64 = 2, Acks96 = 3, Acks128 = 4, }
		export class ChannelQOS extends System.Object {
			get QOS(): UnityEngine.Networking.QosType;
			get BelongsToSharedOrderChannel(): boolean;
			constructor(value: UnityEngine.Networking.QosType);
			constructor();
			constructor(channel: UnityEngine.Networking.ChannelQOS);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ConnectionConfig extends System.Object {
			get PacketSize(): number;
			set PacketSize(value: number);
			get FragmentSize(): number;
			set FragmentSize(value: number);
			get ResendTimeout(): number;
			set ResendTimeout(value: number);
			get DisconnectTimeout(): number;
			set DisconnectTimeout(value: number);
			get ConnectTimeout(): number;
			set ConnectTimeout(value: number);
			get MinUpdateTimeout(): number;
			set MinUpdateTimeout(value: number);
			get PingTimeout(): number;
			set PingTimeout(value: number);
			get ReducedPingTimeout(): number;
			set ReducedPingTimeout(value: number);
			get AllCostTimeout(): number;
			set AllCostTimeout(value: number);
			get NetworkDropThreshold(): number;
			set NetworkDropThreshold(value: number);
			get OverflowDropThreshold(): number;
			set OverflowDropThreshold(value: number);
			get MaxConnectionAttempt(): number;
			set MaxConnectionAttempt(value: number);
			get AckDelay(): number;
			set AckDelay(value: number);
			get SendDelay(): number;
			set SendDelay(value: number);
			get MaxCombinedReliableMessageSize(): number;
			set MaxCombinedReliableMessageSize(value: number);
			get MaxCombinedReliableMessageCount(): number;
			set MaxCombinedReliableMessageCount(value: number);
			get MaxSentMessageQueueSize(): number;
			set MaxSentMessageQueueSize(value: number);
			get AcksType(): UnityEngine.Networking.ConnectionAcksType;
			set AcksType(value: UnityEngine.Networking.ConnectionAcksType);
			/**[Obsolete]--"IsAcksLong is deprecated. Use AcksType = ConnectionAcksType.Acks64" */
			get IsAcksLong(): boolean;
			/**[Obsolete]--"IsAcksLong is deprecated. Use AcksType = ConnectionAcksType.Acks64" */
			set IsAcksLong(value: boolean);
			get UsePlatformSpecificProtocols(): boolean;
			set UsePlatformSpecificProtocols(value: boolean);
			get InitialBandwidth(): number;
			set InitialBandwidth(value: number);
			get BandwidthPeakFactor(): number;
			set BandwidthPeakFactor(value: number);
			get WebSocketReceiveBufferMaxSize(): number;
			set WebSocketReceiveBufferMaxSize(value: number);
			get UdpSocketReceiveBufferMaxSize(): number;
			set UdpSocketReceiveBufferMaxSize(value: number);
			get SSLCertFilePath(): string;
			set SSLCertFilePath(value: string);
			get SSLPrivateKeyFilePath(): string;
			set SSLPrivateKeyFilePath(value: string);
			get SSLCAFilePath(): string;
			set SSLCAFilePath(value: string);
			get ChannelCount(): number;
			get SharedOrderChannelCount(): number;
			get Channels(): any;
			constructor();
			constructor(config: UnityEngine.Networking.ConnectionConfig);
			static Validate(config: UnityEngine.Networking.ConnectionConfig): void;
			AddChannel(value: UnityEngine.Networking.QosType): number;
			MakeChannelsSharedOrder(channelIndices: any): void;
			GetChannel(idx: number): UnityEngine.Networking.QosType;
			GetSharedOrderChannels(idx: number): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HostTopology extends System.Object {
			get DefaultConfig(): UnityEngine.Networking.ConnectionConfig;
			get MaxDefaultConnections(): number;
			get SpecialConnectionConfigsCount(): number;
			get SpecialConnectionConfigs(): any;
			get ReceivedMessagePoolSize(): number;
			set ReceivedMessagePoolSize(value: number);
			get SentMessagePoolSize(): number;
			set SentMessagePoolSize(value: number);
			get MessagePoolSizeGrowthFactor(): number;
			set MessagePoolSizeGrowthFactor(value: number);
			constructor(defaultConfig: UnityEngine.Networking.ConnectionConfig, maxDefaultConnections: number);
			GetSpecialConnectionConfig(i: number): UnityEngine.Networking.ConnectionConfig;
			AddSpecialConnectionConfig(config: UnityEngine.Networking.ConnectionConfig): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GlobalConfig extends System.Object {
			get ThreadAwakeTimeout(): number;
			set ThreadAwakeTimeout(value: number);
			get ReactorModel(): UnityEngine.Networking.ReactorModel;
			set ReactorModel(value: UnityEngine.Networking.ReactorModel);
			get ReactorMaximumReceivedMessages(): number;
			set ReactorMaximumReceivedMessages(value: number);
			get ReactorMaximumSentMessages(): number;
			set ReactorMaximumSentMessages(value: number);
			get MaxPacketSize(): number;
			set MaxPacketSize(value: number);
			get MaxHosts(): number;
			set MaxHosts(value: number);
			get ThreadPoolSize(): number;
			set ThreadPoolSize(value: number);
			get MinTimerTimeout(): number;
			set MinTimerTimeout(value: number);
			get MaxTimerTimeout(): number;
			set MaxTimerTimeout(value: number);
			get MinNetSimulatorTimeout(): number;
			set MinNetSimulatorTimeout(value: number);
			get MaxNetSimulatorTimeout(): number;
			set MaxNetSimulatorTimeout(value: number);
			get NetworkEventAvailable(): System.Action$1;
			set NetworkEventAvailable(value: System.Action$1);
			get ConnectionReadyForSend(): System.Action$2;
			set ConnectionReadyForSend(value: System.Action$2);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ConnectionSimulatorConfig extends System.Object {
			constructor(outMinDelay: number, outAvgDelay: number, inMinDelay: number, inAvgDelay: number, packetLossPercentage: number);
			Dispose(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface IMultipartFormSection {
		}
		export class MultipartFormDataSection extends System.Object {
			get sectionName(): string;
			get sectionData(): Uint8Array;
			get fileName(): string;
			get contentType(): string;
			constructor(name: string, data: Uint8Array, contentType: string);
			constructor(name: string, data: Uint8Array);
			constructor(data: Uint8Array);
			constructor(name: string, data: string, encoding: System.Text.Encoding, contentType: string);
			constructor(name: string, data: string, contentType: string);
			constructor(name: string, data: string);
			constructor(data: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MultipartFormFileSection extends System.Object {
			get sectionName(): string;
			get sectionData(): Uint8Array;
			get fileName(): string;
			get contentType(): string;
			constructor(name: string, data: Uint8Array, fileName: string, contentType: string);
			constructor(data: Uint8Array);
			constructor(fileName: string, data: Uint8Array);
			constructor(name: string, data: string, dataEncoding: System.Text.Encoding, fileName: string);
			constructor(data: string, dataEncoding: System.Text.Encoding, fileName: string);
			constructor(data: string, fileName: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnityWebRequestAsyncOperation extends UnityEngine.AsyncOperation {
			get webRequest(): UnityEngine.Networking.UnityWebRequest;
			set webRequest(value: UnityEngine.Networking.UnityWebRequest);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnityWebRequest extends System.Object {
			static kHttpVerbGET: string;
			static kHttpVerbHEAD: string;
			static kHttpVerbPOST: string;
			static kHttpVerbPUT: string;
			static kHttpVerbCREATE: string;
			static kHttpVerbDELETE: string;
			get disposeCertificateHandlerOnDispose(): boolean;
			set disposeCertificateHandlerOnDispose(value: boolean);
			get disposeDownloadHandlerOnDispose(): boolean;
			set disposeDownloadHandlerOnDispose(value: boolean);
			get disposeUploadHandlerOnDispose(): boolean;
			set disposeUploadHandlerOnDispose(value: boolean);
			get method(): string;
			set method(value: string);
			get error(): string;
			get useHttpContinue(): boolean;
			set useHttpContinue(value: boolean);
			get url(): string;
			set url(value: string);
			get uri(): System.Uri;
			set uri(value: System.Uri);
			get responseCode(): number;
			get uploadProgress(): number;
			get isModifiable(): boolean;
			get isDone(): boolean;
			get isNetworkError(): boolean;
			get isHttpError(): boolean;
			get downloadProgress(): number;
			get uploadedBytes(): number;
			get downloadedBytes(): number;
			get redirectLimit(): number;
			set redirectLimit(value: number);
			get chunkedTransfer(): boolean;
			set chunkedTransfer(value: boolean);
			get uploadHandler(): UnityEngine.Networking.UploadHandler;
			set uploadHandler(value: UnityEngine.Networking.UploadHandler);
			get downloadHandler(): UnityEngine.Networking.DownloadHandler;
			set downloadHandler(value: UnityEngine.Networking.DownloadHandler);
			get certificateHandler(): UnityEngine.Networking.CertificateHandler;
			set certificateHandler(value: UnityEngine.Networking.CertificateHandler);
			get timeout(): number;
			set timeout(value: number);
			/**[Obsolete]--"UnityWebRequest.isError has been renamed to isNetworkError for clarity. (UnityUpgradable) -> isNetworkError" */
			get isError(): boolean;
			constructor();
			constructor(url: string);
			constructor(uri: System.Uri);
			constructor(url: string, method: string);
			constructor(uri: System.Uri, method: string);
			constructor(url: string, method: string, downloadHandler: UnityEngine.Networking.DownloadHandler, uploadHandler: UnityEngine.Networking.UploadHandler);
			constructor(uri: System.Uri, method: string, downloadHandler: UnityEngine.Networking.DownloadHandler, uploadHandler: UnityEngine.Networking.UploadHandler);
			static ClearCookieCache(): void;
			static ClearCookieCache(uri: System.Uri): void;
			static Get(uri: string): UnityEngine.Networking.UnityWebRequest;
			static Get(uri: System.Uri): UnityEngine.Networking.UnityWebRequest;
			static Delete(uri: string): UnityEngine.Networking.UnityWebRequest;
			static Delete(uri: System.Uri): UnityEngine.Networking.UnityWebRequest;
			static Head(uri: string): UnityEngine.Networking.UnityWebRequest;
			static Head(uri: System.Uri): UnityEngine.Networking.UnityWebRequest;
			/**[Obsolete][Error]--"UnityWebRequest.GetTexture is obsolete. Use UnityWebRequestTexture.GetTexture instead (UnityUpgradable) -> [UnityEngine] UnityWebRequestTexture.GetTexture(*)" */
			static GetTexture(uri: string): UnityEngine.Networking.UnityWebRequest;
			/**[Obsolete][Error]--"UnityWebRequest.GetTexture is obsolete. Use UnityWebRequestTexture.GetTexture instead (UnityUpgradable) -> [UnityEngine] UnityWebRequestTexture.GetTexture(*)" */
			static GetTexture(uri: string, nonReadable: boolean): UnityEngine.Networking.UnityWebRequest;
			/**[Obsolete][Error]--"UnityWebRequest.GetAudioClip is obsolete. Use UnityWebRequestMultimedia.GetAudioClip instead (UnityUpgradable) -> [UnityEngine] UnityWebRequestMultimedia.GetAudioClip(*)" */
			static GetAudioClip(uri: string, audioType: UnityEngine.AudioType): UnityEngine.Networking.UnityWebRequest;
			/**[Obsolete][Error]--"UnityWebRequest.GetAssetBundle is obsolete. Use UnityWebRequestAssetBundle.GetAssetBundle instead (UnityUpgradable) -> [UnityEngine] UnityWebRequestAssetBundle.GetAssetBundle(*)" */
			static GetAssetBundle(uri: string): UnityEngine.Networking.UnityWebRequest;
			/**[Obsolete][Error]--"UnityWebRequest.GetAssetBundle is obsolete. Use UnityWebRequestAssetBundle.GetAssetBundle instead (UnityUpgradable) -> [UnityEngine] UnityWebRequestAssetBundle.GetAssetBundle(*)" */
			static GetAssetBundle(uri: string, crc: number): UnityEngine.Networking.UnityWebRequest;
			/**[Obsolete][Error]--"UnityWebRequest.GetAssetBundle is obsolete. Use UnityWebRequestAssetBundle.GetAssetBundle instead (UnityUpgradable) -> [UnityEngine] UnityWebRequestAssetBundle.GetAssetBundle(*)" */
			static GetAssetBundle(uri: string, version: number, crc: number): UnityEngine.Networking.UnityWebRequest;
			/**[Obsolete][Error]--"UnityWebRequest.GetAssetBundle is obsolete. Use UnityWebRequestAssetBundle.GetAssetBundle instead (UnityUpgradable) -> [UnityEngine] UnityWebRequestAssetBundle.GetAssetBundle(*)" */
			static GetAssetBundle(uri: string, hash: UnityEngine.Hash128, crc: number): UnityEngine.Networking.UnityWebRequest;
			/**[Obsolete][Error]--"UnityWebRequest.GetAssetBundle is obsolete. Use UnityWebRequestAssetBundle.GetAssetBundle instead (UnityUpgradable) -> [UnityEngine] UnityWebRequestAssetBundle.GetAssetBundle(*)" */
			static GetAssetBundle(uri: string, cachedAssetBundle: UnityEngine.CachedAssetBundle, crc: number): UnityEngine.Networking.UnityWebRequest;
			static Put(uri: string, bodyData: Uint8Array): UnityEngine.Networking.UnityWebRequest;
			static Put(uri: System.Uri, bodyData: Uint8Array): UnityEngine.Networking.UnityWebRequest;
			static Put(uri: string, bodyData: string): UnityEngine.Networking.UnityWebRequest;
			static Put(uri: System.Uri, bodyData: string): UnityEngine.Networking.UnityWebRequest;
			static Post(uri: string, postData: string): UnityEngine.Networking.UnityWebRequest;
			static Post(uri: System.Uri, postData: string): UnityEngine.Networking.UnityWebRequest;
			static Post(uri: string, formData: UnityEngine.WWWForm): UnityEngine.Networking.UnityWebRequest;
			static Post(uri: System.Uri, formData: UnityEngine.WWWForm): UnityEngine.Networking.UnityWebRequest;
			static Post(uri: string, multipartFormSections: any): UnityEngine.Networking.UnityWebRequest;
			static Post(uri: System.Uri, multipartFormSections: any): UnityEngine.Networking.UnityWebRequest;
			static Post(uri: string, multipartFormSections: any, boundary: Uint8Array): UnityEngine.Networking.UnityWebRequest;
			static Post(uri: System.Uri, multipartFormSections: any, boundary: Uint8Array): UnityEngine.Networking.UnityWebRequest;
			static Post(uri: string, formFields: any): UnityEngine.Networking.UnityWebRequest;
			static Post(uri: System.Uri, formFields: any): UnityEngine.Networking.UnityWebRequest;
			static EscapeURL(s: string): string;
			static EscapeURL(s: string, e: System.Text.Encoding): string;
			static UnEscapeURL(s: string): string;
			static UnEscapeURL(s: string, e: System.Text.Encoding): string;
			static SerializeFormSections(multipartFormSections: any, boundary: Uint8Array): Uint8Array;
			static GenerateBoundary(): Uint8Array;
			static SerializeSimpleForm(formFields: any): Uint8Array;
			Dispose(): void;
			/**[Obsolete]--"Use SendWebRequest.  It returns a UnityWebRequestAsyncOperation which contains a reference to the WebRequest object." */
			Send(): UnityEngine.AsyncOperation;
			SendWebRequest(): UnityEngine.Networking.UnityWebRequestAsyncOperation;
			Abort(): void;
			GetRequestHeader(name: string): string;
			SetRequestHeader(name: string, value: string): void;
			GetResponseHeader(name: string): string;
			GetResponseHeaders(): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CertificateHandler extends System.Object {
			Dispose(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DownloadHandler extends System.Object {
			get isDone(): boolean;
			get data(): Uint8Array;
			get text(): string;
			Dispose(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DownloadHandlerBuffer extends UnityEngine.Networking.DownloadHandler {
			constructor();
			static GetContent(www: UnityEngine.Networking.UnityWebRequest): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DownloadHandlerScript extends UnityEngine.Networking.DownloadHandler {
			constructor();
			constructor(preallocatedBuffer: Uint8Array);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DownloadHandlerFile extends UnityEngine.Networking.DownloadHandler {
			get removeFileOnAbort(): boolean;
			set removeFileOnAbort(value: boolean);
			constructor(path: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UploadHandler extends System.Object {
			get data(): Uint8Array;
			get contentType(): string;
			set contentType(value: string);
			get progress(): number;
			Dispose(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UploadHandlerRaw extends UnityEngine.Networking.UploadHandler {
			constructor(data: Uint8Array);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UploadHandlerFile extends UnityEngine.Networking.UploadHandler {
			constructor(filePath: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnityWebRequestAssetBundle extends System.Object {
			static GetAssetBundle(uri: string): UnityEngine.Networking.UnityWebRequest;
			static GetAssetBundle(uri: System.Uri): UnityEngine.Networking.UnityWebRequest;
			static GetAssetBundle(uri: string, crc: number): UnityEngine.Networking.UnityWebRequest;
			static GetAssetBundle(uri: System.Uri, crc: number): UnityEngine.Networking.UnityWebRequest;
			static GetAssetBundle(uri: string, version: number, crc: number): UnityEngine.Networking.UnityWebRequest;
			static GetAssetBundle(uri: System.Uri, version: number, crc: number): UnityEngine.Networking.UnityWebRequest;
			static GetAssetBundle(uri: string, hash: UnityEngine.Hash128, crc?: number): UnityEngine.Networking.UnityWebRequest;
			static GetAssetBundle(uri: System.Uri, hash: UnityEngine.Hash128, crc?: number): UnityEngine.Networking.UnityWebRequest;
			static GetAssetBundle(uri: string, cachedAssetBundle: UnityEngine.CachedAssetBundle, crc?: number): UnityEngine.Networking.UnityWebRequest;
			static GetAssetBundle(uri: System.Uri, cachedAssetBundle: UnityEngine.CachedAssetBundle, crc?: number): UnityEngine.Networking.UnityWebRequest;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DownloadHandlerAssetBundle extends UnityEngine.Networking.DownloadHandler {
			get assetBundle(): UnityEngine.AssetBundle;
			constructor(url: string, crc: number);
			constructor(url: string, version: number, crc: number);
			constructor(url: string, hash: UnityEngine.Hash128, crc: number);
			constructor(url: string, name: string, hash: UnityEngine.Hash128, crc: number);
			constructor(url: string, cachedBundle: UnityEngine.CachedAssetBundle, crc: number);
			static GetContent(www: UnityEngine.Networking.UnityWebRequest): UnityEngine.AssetBundle;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnityWebRequestMultimedia extends System.Object {
			static GetAudioClip(uri: string, audioType: UnityEngine.AudioType): UnityEngine.Networking.UnityWebRequest;
			static GetAudioClip(uri: System.Uri, audioType: UnityEngine.AudioType): UnityEngine.Networking.UnityWebRequest;
			/**[Obsolete]--"MovieTexture is deprecated. Use VideoPlayer instead." */
			static GetMovieTexture(uri: string): UnityEngine.Networking.UnityWebRequest;
			/**[Obsolete]--"MovieTexture is deprecated. Use VideoPlayer instead." */
			static GetMovieTexture(uri: System.Uri): UnityEngine.Networking.UnityWebRequest;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DownloadHandlerAudioClip extends UnityEngine.Networking.DownloadHandler {
			get audioClip(): UnityEngine.AudioClip;
			get streamAudio(): boolean;
			set streamAudio(value: boolean);
			get compressed(): boolean;
			set compressed(value: boolean);
			constructor(url: string, audioType: UnityEngine.AudioType);
			constructor(uri: System.Uri, audioType: UnityEngine.AudioType);
			static GetContent(www: UnityEngine.Networking.UnityWebRequest): UnityEngine.AudioClip;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DownloadHandlerMovieTexture extends UnityEngine.Networking.DownloadHandler {
			get movieTexture(): UnityEngine.MovieTexture;
			constructor();
			static GetContent(uwr: UnityEngine.Networking.UnityWebRequest): UnityEngine.MovieTexture;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UnityWebRequestTexture extends System.Object {
			static GetTexture(uri: string): UnityEngine.Networking.UnityWebRequest;
			static GetTexture(uri: System.Uri): UnityEngine.Networking.UnityWebRequest;
			static GetTexture(uri: string, nonReadable: boolean): UnityEngine.Networking.UnityWebRequest;
			static GetTexture(uri: System.Uri, nonReadable: boolean): UnityEngine.Networking.UnityWebRequest;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DownloadHandlerTexture extends UnityEngine.Networking.DownloadHandler {
			get texture(): UnityEngine.Texture2D;
			constructor();
			constructor(readable: boolean);
			static GetContent(www: UnityEngine.Networking.UnityWebRequest): UnityEngine.Texture2D;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ClientScene extends System.Object {
			static ReconnectIdInvalid: number;
			static ReconnectIdHost: number;
			static get localPlayers(): any;
			static get ready(): boolean;
			static get readyConnection(): UnityEngine.Networking.NetworkConnection;
			static get reconnectId(): number;
			static get objects(): any;
			static get prefabs(): any;
			static get spawnableObjects(): any;
			constructor();
			static SetReconnectId(newReconnectId: number, peers: any): void;
			static AddPlayer(playerControllerId: number): boolean;
			static AddPlayer(readyConn: UnityEngine.Networking.NetworkConnection, playerControllerId: number): boolean;
			static AddPlayer(readyConn: UnityEngine.Networking.NetworkConnection, playerControllerId: number, extraMessage: UnityEngine.Networking.MessageBase): boolean;
			static SendReconnectMessage(extraMessage: UnityEngine.Networking.MessageBase): boolean;
			static RemovePlayer(playerControllerId: number): boolean;
			static Ready(conn: UnityEngine.Networking.NetworkConnection): boolean;
			static ConnectLocalServer(): UnityEngine.Networking.NetworkClient;
			static RegisterPrefab(prefab: UnityEngine.GameObject, newAssetId: UnityEngine.Networking.NetworkHash128): void;
			static RegisterPrefab(prefab: UnityEngine.GameObject): void;
			static RegisterPrefab(prefab: UnityEngine.GameObject, spawnHandler: UnityEngine.Networking.SpawnDelegate, unspawnHandler: UnityEngine.Networking.UnSpawnDelegate): void;
			static UnregisterPrefab(prefab: UnityEngine.GameObject): void;
			static RegisterSpawnHandler(assetId: UnityEngine.Networking.NetworkHash128, spawnHandler: UnityEngine.Networking.SpawnDelegate, unspawnHandler: UnityEngine.Networking.UnSpawnDelegate): void;
			static UnregisterSpawnHandler(assetId: UnityEngine.Networking.NetworkHash128): void;
			static ClearSpawners(): void;
			static DestroyAllClientObjects(): void;
			static SetLocalObject(netId: UnityEngine.Networking.NetworkInstanceId, obj: UnityEngine.GameObject): void;
			static FindLocalObject(netId: UnityEngine.Networking.NetworkInstanceId): UnityEngine.GameObject;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkSettingsAttribute extends System.Attribute {
			channel: number;
			sendInterval: number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SyncVarAttribute extends System.Attribute {
			hook: string;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CommandAttribute extends System.Attribute {
			channel: number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ClientRpcAttribute extends System.Attribute {
			channel: number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TargetRpcAttribute extends System.Attribute {
			channel: number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SyncEventAttribute extends System.Attribute {
			channel: number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ServerAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ServerCallbackAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ClientAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ClientCallbackAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface INetworkTransport {
			Init(): void;
			Init(config: UnityEngine.Networking.GlobalConfig): void;
			Shutdown(): void;
			AddHost(topology: UnityEngine.Networking.HostTopology, port: number, ip: string): number;
			AddWebsocketHost(topology: UnityEngine.Networking.HostTopology, port: number, ip: string): number;
			ConnectWithSimulator(hostId: number, address: string, port: number, specialConnectionId: number, error: any, conf: UnityEngine.Networking.ConnectionSimulatorConfig): number;
			Connect(hostId: number, address: string, port: number, specialConnectionId: number, error: any): number;
			ConnectAsNetworkHost(hostId: number, address: string, port: number, network: any, source: any, node: any, error: any): void;
			ConnectToNetworkPeer(hostId: number, address: string, port: number, specialConnectionId: number, relaySlotId: number, network: any, source: any, node: any, error: any): number;
			ConnectEndPoint(hostId: number, endPoint: any, specialConnectionId: number, error: any): number;
			DoesEndPointUsePlatformProtocols(endPoint: any): boolean;
			AddHostWithSimulator(topology: UnityEngine.Networking.HostTopology, minTimeout: number, maxTimeout: number, port: number): number;
			RemoveHost(hostId: number): boolean;
			Send(hostId: number, connectionId: number, channelId: number, buffer: Uint8Array, size: number, error: any): boolean;
			Receive(hostId: any, connectionId: any, channelId: any, buffer: Uint8Array, bufferSize: number, receivedSize: any, error: any): UnityEngine.Networking.NetworkEventType;
			ReceiveFromHost(hostId: number, connectionId: any, channelId: any, buffer: Uint8Array, bufferSize: number, receivedSize: any, error: any): UnityEngine.Networking.NetworkEventType;
			ReceiveRelayEventFromHost(hostId: number, error: any): UnityEngine.Networking.NetworkEventType;
			GetCurrentRTT(hostId: number, connectionId: number, error: any): number;
			GetConnectionInfo(hostId: number, connectionId: number, address: any, port: any, network: any, dstNode: any, error: any): void;
			Disconnect(hostId: number, connectionId: number, error: any): boolean;
			SetBroadcastCredentials(hostId: number, key: number, version: number, subversion: number, error: any): void;
			StartBroadcastDiscovery(hostId: number, broadcastPort: number, key: number, version: number, subversion: number, buffer: Uint8Array, size: number, timeout: number, error: any): boolean;
			GetBroadcastConnectionInfo(hostId: number, address: any, port: any, error: any): void;
			GetBroadcastConnectionMessage(hostId: number, buffer: Uint8Array, bufferSize: number, receivedSize: any, error: any): void;
			StopBroadcastDiscovery(): void;
			SetPacketStat(direction: number, packetStatId: number, numMsgs: number, numBytes: number): void;
		}
		export class LogFilter extends System.Object {
			static Debug: number;
			static Info: number;
			static Warn: number;
			static Error: number;
			static Fatal: number;
			/**[Obsolete]--"Use LogFilter.currentLogLevel instead" */
			static current: UnityEngine.Networking.LogFilter.FilterLevel;
			static get currentLogLevel(): number;
			static set currentLogLevel(value: number);
			static get logDebug(): boolean;
			static get logInfo(): boolean;
			static get logWarn(): boolean;
			static get logError(): boolean;
			static get logFatal(): boolean;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MessageBase extends System.Object {
			Deserialize(reader: UnityEngine.Networking.NetworkReader): void;
			Serialize(writer: UnityEngine.Networking.NetworkWriter): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkAnimator extends UnityEngine.Networking.NetworkBehaviour {
			param0: string;
			param1: string;
			param2: string;
			param3: string;
			param4: string;
			param5: string;
			get animator(): UnityEngine.Animator;
			set animator(value: UnityEngine.Animator);
			constructor();
			SetParameterAutoSend(index: number, value: boolean): void;
			GetParameterAutoSend(index: number): boolean;
			SetTrigger(triggerName: string): void;
			SetTrigger(hash: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkBehaviour extends UnityEngine.MonoBehaviour {
			get localPlayerAuthority(): boolean;
			get isServer(): boolean;
			get isClient(): boolean;
			get isLocalPlayer(): boolean;
			get hasAuthority(): boolean;
			get netId(): UnityEngine.Networking.NetworkInstanceId;
			get connectionToServer(): UnityEngine.Networking.NetworkConnection;
			get connectionToClient(): UnityEngine.Networking.NetworkConnection;
			get playerControllerId(): number;
			constructor();
			InvokeCommand(cmdHash: number, reader: UnityEngine.Networking.NetworkReader): boolean;
			InvokeRPC(cmdHash: number, reader: UnityEngine.Networking.NetworkReader): boolean;
			InvokeSyncEvent(cmdHash: number, reader: UnityEngine.Networking.NetworkReader): boolean;
			InvokeSyncList(cmdHash: number, reader: UnityEngine.Networking.NetworkReader): boolean;
			SetDirtyBit(dirtyBit: number): void;
			ClearAllDirtyBits(): void;
			OnSerialize(writer: UnityEngine.Networking.NetworkWriter, initialState: boolean): boolean;
			OnDeserialize(reader: UnityEngine.Networking.NetworkReader, initialState: boolean): void;
			PreStartClient(): void;
			OnNetworkDestroy(): void;
			OnStartServer(): void;
			OnStartClient(): void;
			OnStartLocalPlayer(): void;
			OnStartAuthority(): void;
			OnStopAuthority(): void;
			OnRebuildObservers(observers: any, initialize: boolean): boolean;
			OnSetLocalVisibility(vis: boolean): void;
			OnCheckObserver(conn: UnityEngine.Networking.NetworkConnection): boolean;
			GetNetworkChannel(): number;
			GetNetworkSendInterval(): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkClient extends System.Object {
			static get allClients(): any;
			static get active(): boolean;
			get serverIp(): string;
			get serverPort(): number;
			get connection(): UnityEngine.Networking.NetworkConnection;
			/**[Obsolete]--"Moved to NetworkMigrationManager." */
			get peers(): any;
			get handlers(): any;
			get numChannels(): number;
			get hostTopology(): UnityEngine.Networking.HostTopology;
			get hostPort(): number;
			set hostPort(value: number);
			get isConnected(): boolean;
			get networkConnectionClass(): System.Type;
			constructor();
			constructor(conn: UnityEngine.Networking.NetworkConnection);
			static GetTotalConnectionStats(): any;
			static ShutdownAll(): void;
			Configure(config: UnityEngine.Networking.ConnectionConfig, maxConnections: number): boolean;
			Configure(topology: UnityEngine.Networking.HostTopology): boolean;
			Connect(matchInfo: any): void;
			Connect(serverIp: string, serverPort: number): void;
			Connect(secureTunnelEndPoint: any): void;
			ReconnectToNewHost(serverIp: string, serverPort: number): boolean;
			ReconnectToNewHost(secureTunnelEndPoint: any): boolean;
			ConnectWithSimulator(serverIp: string, serverPort: number, latency: number, packetLoss: number): void;
			Disconnect(): void;
			Send(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
			SendWriter(writer: UnityEngine.Networking.NetworkWriter, channelId: number): boolean;
			SendBytes(data: Uint8Array, numBytes: number, channelId: number): boolean;
			SendUnreliable(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
			SendByChannel(msgType: number, msg: UnityEngine.Networking.MessageBase, channelId: number): boolean;
			SetMaxDelay(seconds: number): void;
			Shutdown(): void;
			GetStatsOut(numMsgs: any, numBufferedMsgs: any, numBytes: any, lastBufferedPerSecond: any): void;
			GetStatsIn(numMsgs: any, numBytes: any): void;
			GetConnectionStats(): any;
			ResetConnectionStats(): void;
			GetRTT(): number;
			RegisterHandler(msgType: number, handler: UnityEngine.Networking.NetworkMessageDelegate): void;
			RegisterHandlerSafe(msgType: number, handler: UnityEngine.Networking.NetworkMessageDelegate): void;
			UnregisterHandler(msgType: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkConnection extends System.Object {
			hostId: number;
			connectionId: number;
			isReady: boolean;
			address: string;
			lastMessageTime: number;
			logNetworkMessages: boolean;
			get playerControllers(): any;
			get clientOwnedObjects(): any;
			get isConnected(): boolean;
			get lastError(): UnityEngine.Networking.NetworkError;
			set lastError(value: UnityEngine.Networking.NetworkError);
			constructor();
			Initialize(networkAddress: string, networkHostId: number, networkConnectionId: number, hostTopology: UnityEngine.Networking.HostTopology): void;
			Dispose(): void;
			SetChannelOption(channelId: number, option: UnityEngine.Networking.ChannelOption, value: number): boolean;
			Disconnect(): void;
			CheckHandler(msgType: number): boolean;
			InvokeHandlerNoData(msgType: number): boolean;
			InvokeHandler(msgType: number, reader: UnityEngine.Networking.NetworkReader, channelId: number): boolean;
			InvokeHandler(netMsg: UnityEngine.Networking.NetworkMessage): boolean;
			RegisterHandler(msgType: number, handler: UnityEngine.Networking.NetworkMessageDelegate): void;
			UnregisterHandler(msgType: number): void;
			FlushChannels(): void;
			SetMaxDelay(seconds: number): void;
			Send(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
			SendUnreliable(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
			SendByChannel(msgType: number, msg: UnityEngine.Networking.MessageBase, channelId: number): boolean;
			SendBytes(bytes: Uint8Array, numBytes: number, channelId: number): boolean;
			SendWriter(writer: UnityEngine.Networking.NetworkWriter, channelId: number): boolean;
			ResetStats(): void;
			GetStatsOut(numMsgs: any, numBufferedMsgs: any, numBytes: any, lastBufferedPerSecond: any): void;
			GetStatsIn(numMsgs: any, numBytes: any): void;
			TransportReceive(bytes: Uint8Array, numBytes: number, channelId: number): void;
			/**[Obsolete]--"TransportRecieve has been deprecated. Use TransportReceive instead." */
			TransportRecieve(bytes: Uint8Array, numBytes: number, channelId: number): void;
			TransportSend(bytes: Uint8Array, numBytes: number, channelId: number, error: any): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkCRC extends System.Object {
			get scripts(): any;
			static get scriptCRCCheck(): boolean;
			static set scriptCRCCheck(value: boolean);
			constructor();
			static ReinitializeScriptCRCs(callingAssembly: System.Reflection.Assembly): void;
			static RegisterBehaviour(name: string, channel: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkBroadcastResult {
			serverAddress: string;
			broadcastData: Uint8Array;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkDiscovery extends UnityEngine.MonoBehaviour {
			get broadcastPort(): number;
			set broadcastPort(value: number);
			get broadcastKey(): number;
			set broadcastKey(value: number);
			get broadcastVersion(): number;
			set broadcastVersion(value: number);
			get broadcastSubVersion(): number;
			set broadcastSubVersion(value: number);
			get broadcastInterval(): number;
			set broadcastInterval(value: number);
			get useNetworkManager(): boolean;
			set useNetworkManager(value: boolean);
			get broadcastData(): string;
			set broadcastData(value: string);
			get showGUI(): boolean;
			set showGUI(value: boolean);
			get offsetX(): number;
			set offsetX(value: number);
			get offsetY(): number;
			set offsetY(value: number);
			get hostId(): number;
			set hostId(value: number);
			get running(): boolean;
			set running(value: boolean);
			get isServer(): boolean;
			set isServer(value: boolean);
			get isClient(): boolean;
			set isClient(value: boolean);
			get broadcastsReceived(): any;
			constructor();
			Initialize(): boolean;
			StartAsClient(): boolean;
			StartAsServer(): boolean;
			StopBroadcast(): void;
			OnReceivedBroadcast(fromAddress: string, data: string): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkHash128 {
			i0: number;
			i1: number;
			i2: number;
			i3: number;
			i4: number;
			i5: number;
			i6: number;
			i7: number;
			i8: number;
			i9: number;
			i10: number;
			i11: number;
			i12: number;
			i13: number;
			i14: number;
			i15: number;
			static Parse(text: string): UnityEngine.Networking.NetworkHash128;
			Reset(): void;
			IsValid(): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkIdentity extends UnityEngine.MonoBehaviour {
			static clientAuthorityCallback: UnityEngine.Networking.NetworkIdentity.ClientAuthorityCallback;
			get isClient(): boolean;
			get isServer(): boolean;
			get hasAuthority(): boolean;
			get netId(): UnityEngine.Networking.NetworkInstanceId;
			get sceneId(): UnityEngine.Networking.NetworkSceneId;
			get serverOnly(): boolean;
			set serverOnly(value: boolean);
			get localPlayerAuthority(): boolean;
			set localPlayerAuthority(value: boolean);
			get clientAuthorityOwner(): UnityEngine.Networking.NetworkConnection;
			get assetId(): UnityEngine.Networking.NetworkHash128;
			get isLocalPlayer(): boolean;
			get playerControllerId(): number;
			get connectionToServer(): UnityEngine.Networking.NetworkConnection;
			get connectionToClient(): UnityEngine.Networking.NetworkConnection;
			get observers(): any;
			constructor();
			ForceSceneId(newSceneId: number): void;
			RebuildObservers(initialize: boolean): void;
			RemoveClientAuthority(conn: UnityEngine.Networking.NetworkConnection): boolean;
			AssignClientAuthority(conn: UnityEngine.Networking.NetworkConnection): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkInstanceId {
			static Invalid: UnityEngine.Networking.NetworkInstanceId;
			get Value(): number;
			constructor(value: number);
			static op_Equality(c1: UnityEngine.Networking.NetworkInstanceId, c2: UnityEngine.Networking.NetworkInstanceId): boolean;
			static op_Inequality(c1: UnityEngine.Networking.NetworkInstanceId, c2: UnityEngine.Networking.NetworkInstanceId): boolean;
			IsEmpty(): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: UnityEngine.Networking.NetworkInstanceId): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkLobbyManager extends UnityEngine.Networking.NetworkManager {
			lobbySlots: UnityEngine.Networking.NetworkLobbyPlayer[];
			get showLobbyGUI(): boolean;
			set showLobbyGUI(value: boolean);
			get maxPlayers(): number;
			set maxPlayers(value: number);
			get maxPlayersPerConnection(): number;
			set maxPlayersPerConnection(value: number);
			get minPlayers(): number;
			set minPlayers(value: number);
			get lobbyPlayerPrefab(): UnityEngine.Networking.NetworkLobbyPlayer;
			set lobbyPlayerPrefab(value: UnityEngine.Networking.NetworkLobbyPlayer);
			get gamePlayerPrefab(): UnityEngine.GameObject;
			set gamePlayerPrefab(value: UnityEngine.GameObject);
			get lobbyScene(): string;
			set lobbyScene(value: string);
			get playScene(): string;
			set playScene(value: string);
			constructor();
			CheckReadyToBegin(): void;
			ServerReturnToLobby(): void;
			SendReturnToLobby(): boolean;
			OnLobbyStartHost(): void;
			OnLobbyStopHost(): void;
			OnLobbyStartServer(): void;
			OnLobbyServerConnect(conn: UnityEngine.Networking.NetworkConnection): void;
			OnLobbyServerDisconnect(conn: UnityEngine.Networking.NetworkConnection): void;
			OnLobbyServerSceneChanged(sceneName: string): void;
			OnLobbyServerCreateLobbyPlayer(conn: UnityEngine.Networking.NetworkConnection, playerControllerId: number): UnityEngine.GameObject;
			OnLobbyServerCreateGamePlayer(conn: UnityEngine.Networking.NetworkConnection, playerControllerId: number): UnityEngine.GameObject;
			OnLobbyServerPlayerRemoved(conn: UnityEngine.Networking.NetworkConnection, playerControllerId: number): void;
			OnLobbyServerSceneLoadedForPlayer(lobbyPlayer: UnityEngine.GameObject, gamePlayer: UnityEngine.GameObject): boolean;
			OnLobbyServerPlayersReady(): void;
			OnLobbyClientEnter(): void;
			OnLobbyClientExit(): void;
			OnLobbyClientConnect(conn: UnityEngine.Networking.NetworkConnection): void;
			OnLobbyClientDisconnect(conn: UnityEngine.Networking.NetworkConnection): void;
			OnLobbyStartClient(lobbyClient: UnityEngine.Networking.NetworkClient): void;
			OnLobbyStopClient(): void;
			OnLobbyClientSceneChanged(conn: UnityEngine.Networking.NetworkConnection): void;
			OnLobbyClientAddPlayerFailed(): void;
			TryToAddPlayer(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkLobbyPlayer extends UnityEngine.Networking.NetworkBehaviour {
			ShowLobbyGUI: boolean;
			get slot(): number;
			set slot(value: number);
			get readyToBegin(): boolean;
			set readyToBegin(value: boolean);
			constructor();
			SendReadyToBeginMessage(): void;
			SendNotReadyToBeginMessage(): void;
			SendSceneLoadedMessage(): void;
			RemovePlayer(): void;
			OnClientEnterLobby(): void;
			OnClientExitLobby(): void;
			OnClientReady(readyState: boolean): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum PlayerSpawnMethod { Random = 0, RoundRobin = 1, }
		export class NetworkManager extends UnityEngine.MonoBehaviour {
			matchName: string;
			matchSize: number;
			static networkSceneName: string;
			isNetworkActive: boolean;
			client: UnityEngine.Networking.NetworkClient;
			matchInfo: any;
			matchMaker: any;
			matches: any;
			static singleton: UnityEngine.Networking.NetworkManager;
			get networkPort(): number;
			set networkPort(value: number);
			get serverBindToIP(): boolean;
			set serverBindToIP(value: boolean);
			get serverBindAddress(): string;
			set serverBindAddress(value: string);
			get networkAddress(): string;
			set networkAddress(value: string);
			get dontDestroyOnLoad(): boolean;
			set dontDestroyOnLoad(value: boolean);
			get runInBackground(): boolean;
			set runInBackground(value: boolean);
			get scriptCRCCheck(): boolean;
			set scriptCRCCheck(value: boolean);
			/**[Obsolete]--"moved to NetworkMigrationManager" */
			get sendPeerInfo(): boolean;
			/**[Obsolete]--"moved to NetworkMigrationManager" */
			set sendPeerInfo(value: boolean);
			get maxDelay(): number;
			set maxDelay(value: number);
			get logLevel(): UnityEngine.Networking.LogFilter.FilterLevel;
			set logLevel(value: UnityEngine.Networking.LogFilter.FilterLevel);
			get playerPrefab(): UnityEngine.GameObject;
			set playerPrefab(value: UnityEngine.GameObject);
			get autoCreatePlayer(): boolean;
			set autoCreatePlayer(value: boolean);
			get playerSpawnMethod(): UnityEngine.Networking.PlayerSpawnMethod;
			set playerSpawnMethod(value: UnityEngine.Networking.PlayerSpawnMethod);
			get offlineScene(): string;
			set offlineScene(value: string);
			get onlineScene(): string;
			set onlineScene(value: string);
			get spawnPrefabs(): any;
			get startPositions(): any;
			get customConfig(): boolean;
			set customConfig(value: boolean);
			get connectionConfig(): UnityEngine.Networking.ConnectionConfig;
			get globalConfig(): UnityEngine.Networking.GlobalConfig;
			get maxConnections(): number;
			set maxConnections(value: number);
			get channels(): any;
			get secureTunnelEndpoint(): any;
			set secureTunnelEndpoint(value: any);
			get useWebSockets(): boolean;
			set useWebSockets(value: boolean);
			get useSimulator(): boolean;
			set useSimulator(value: boolean);
			get simulatedLatency(): number;
			set simulatedLatency(value: number);
			get packetLossPercentage(): number;
			set packetLossPercentage(value: number);
			get matchHost(): string;
			set matchHost(value: string);
			get matchPort(): number;
			set matchPort(value: number);
			get clientLoadedScene(): boolean;
			set clientLoadedScene(value: boolean);
			get migrationManager(): UnityEngine.Networking.NetworkMigrationManager;
			get numPlayers(): number;
			static get defaultTransport(): UnityEngine.Networking.INetworkTransport;
			static get activeTransport(): UnityEngine.Networking.INetworkTransport;
			static set activeTransport(value: UnityEngine.Networking.INetworkTransport);
			constructor();
			static RegisterStartPosition(start: UnityEngine.Transform): void;
			static UnRegisterStartPosition(start: UnityEngine.Transform): void;
			static Shutdown(): void;
			SetupMigrationManager(man: UnityEngine.Networking.NetworkMigrationManager): void;
			StartServer(config: UnityEngine.Networking.ConnectionConfig, maxConnections: number): boolean;
			StartServer(): boolean;
			StartServer(info: any): boolean;
			UseExternalClient(externalClient: UnityEngine.Networking.NetworkClient): void;
			StartClient(info: any, config: UnityEngine.Networking.ConnectionConfig, hostPort: number): UnityEngine.Networking.NetworkClient;
			StartClient(matchInfo: any): UnityEngine.Networking.NetworkClient;
			StartClient(): UnityEngine.Networking.NetworkClient;
			StartClient(info: any, config: UnityEngine.Networking.ConnectionConfig): UnityEngine.Networking.NetworkClient;
			StartHost(config: UnityEngine.Networking.ConnectionConfig, maxConnections: number): UnityEngine.Networking.NetworkClient;
			StartHost(info: any): UnityEngine.Networking.NetworkClient;
			StartHost(): UnityEngine.Networking.NetworkClient;
			StopHost(): void;
			StopServer(): void;
			StopClient(): void;
			ServerChangeScene(newSceneName: string): void;
			IsClientConnected(): boolean;
			OnServerConnect(conn: UnityEngine.Networking.NetworkConnection): void;
			OnServerDisconnect(conn: UnityEngine.Networking.NetworkConnection): void;
			OnServerReady(conn: UnityEngine.Networking.NetworkConnection): void;
			OnServerAddPlayer(conn: UnityEngine.Networking.NetworkConnection, playerControllerId: number, extraMessageReader: UnityEngine.Networking.NetworkReader): void;
			OnServerAddPlayer(conn: UnityEngine.Networking.NetworkConnection, playerControllerId: number): void;
			GetStartPosition(): UnityEngine.Transform;
			OnServerRemovePlayer(conn: UnityEngine.Networking.NetworkConnection, player: UnityEngine.Networking.PlayerController): void;
			OnServerError(conn: UnityEngine.Networking.NetworkConnection, errorCode: number): void;
			OnServerSceneChanged(sceneName: string): void;
			OnClientConnect(conn: UnityEngine.Networking.NetworkConnection): void;
			OnClientDisconnect(conn: UnityEngine.Networking.NetworkConnection): void;
			OnClientError(conn: UnityEngine.Networking.NetworkConnection, errorCode: number): void;
			OnClientNotReady(conn: UnityEngine.Networking.NetworkConnection): void;
			OnClientSceneChanged(conn: UnityEngine.Networking.NetworkConnection): void;
			StartMatchMaker(): void;
			StopMatchMaker(): void;
			SetMatchHost(newHost: string, port: number, https: boolean): void;
			OnStartHost(): void;
			OnStartServer(): void;
			OnStartClient(client: UnityEngine.Networking.NetworkClient): void;
			OnStopServer(): void;
			OnStopClient(): void;
			OnStopHost(): void;
			OnMatchCreate(success: boolean, extendedInfo: string, matchInfo: any): void;
			OnMatchList(success: boolean, extendedInfo: string, matchList: any): void;
			OnMatchJoined(success: boolean, extendedInfo: string, matchInfo: any): void;
			OnDestroyMatch(success: boolean, extendedInfo: string): void;
			OnDropConnection(success: boolean, extendedInfo: string): void;
			OnSetMatchAttributes(success: boolean, extendedInfo: string): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkManagerHUD extends UnityEngine.MonoBehaviour {
			manager: UnityEngine.Networking.NetworkManager;
			showGUI: boolean;
			offsetX: number;
			offsetY: number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkMigrationManager extends UnityEngine.MonoBehaviour {
			get hostMigration(): boolean;
			set hostMigration(value: boolean);
			get showGUI(): boolean;
			set showGUI(value: boolean);
			get offsetX(): number;
			set offsetX(value: number);
			get offsetY(): number;
			set offsetY(value: number);
			get client(): UnityEngine.Networking.NetworkClient;
			get waitingToBecomeNewHost(): boolean;
			set waitingToBecomeNewHost(value: boolean);
			get waitingReconnectToNewHost(): boolean;
			set waitingReconnectToNewHost(value: boolean);
			get disconnectedFromHost(): boolean;
			get hostWasShutdown(): boolean;
			get matchInfo(): any;
			get oldServerConnectionId(): number;
			get newHostAddress(): string;
			set newHostAddress(value: string);
			get peers(): any;
			get pendingPlayers(): any;
			constructor();
			Reset(reconnectId: number): void;
			Initialize(newClient: UnityEngine.Networking.NetworkClient, newMatchInfo: any): void;
			DisablePlayerObjects(): void;
			SendPeerInfo(): void;
			ReconnectObjectForConnection(newConnection: UnityEngine.Networking.NetworkConnection, oldObject: UnityEngine.GameObject, oldConnectionId: number): boolean;
			ReconnectPlayerForConnection(newConnection: UnityEngine.Networking.NetworkConnection, oldPlayer: UnityEngine.GameObject, oldConnectionId: number, playerControllerId: number): boolean;
			LostHostOnClient(conn: UnityEngine.Networking.NetworkConnection): boolean;
			LostHostOnHost(): void;
			BecomeNewHost(port: number): boolean;
			FindNewHost(newHostInfo: any, youAreNewHost: any): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkProximityChecker extends UnityEngine.Networking.NetworkBehaviour {
			visRange: number;
			visUpdateInterval: number;
			checkMethod: UnityEngine.Networking.NetworkProximityChecker.CheckMethod;
			forceHidden: boolean;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkReader extends System.Object {
			get Position(): number;
			get Length(): number;
			constructor();
			constructor(writer: UnityEngine.Networking.NetworkWriter);
			constructor(buffer: Uint8Array);
			SeekZero(): void;
			ReadPackedUInt32(): number;
			ReadPackedUInt64(): number;
			ReadNetworkId(): UnityEngine.Networking.NetworkInstanceId;
			ReadSceneId(): UnityEngine.Networking.NetworkSceneId;
			ReadByte(): number;
			ReadSByte(): System.SByte;
			ReadInt16(): number;
			ReadUInt16(): number;
			ReadInt32(): number;
			ReadUInt32(): number;
			ReadInt64(): number;
			ReadUInt64(): number;
			ReadDecimal(): System.Decimal;
			ReadSingle(): number;
			ReadDouble(): number;
			ReadString(): string;
			ReadChar(): string;
			ReadBoolean(): boolean;
			ReadBytes(count: number): Uint8Array;
			ReadBytesAndSize(): Uint8Array;
			ReadVector2(): UnityEngine.Vector2;
			ReadVector3(): UnityEngine.Vector3;
			ReadVector4(): UnityEngine.Vector4;
			ReadColor(): UnityEngine.Color;
			ReadColor32(): UnityEngine.Color32;
			ReadQuaternion(): UnityEngine.Quaternion;
			ReadRect(): UnityEngine.Rect;
			ReadPlane(): UnityEngine.Plane;
			ReadRay(): UnityEngine.Ray;
			ReadMatrix4x4(): UnityEngine.Matrix4x4;
			ReadNetworkHash128(): UnityEngine.Networking.NetworkHash128;
			ReadTransform(): UnityEngine.Transform;
			ReadGameObject(): UnityEngine.GameObject;
			ReadNetworkIdentity(): UnityEngine.Networking.NetworkIdentity;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkSceneId {
			get Value(): number;
			constructor(value: number);
			static op_Equality(c1: UnityEngine.Networking.NetworkSceneId, c2: UnityEngine.Networking.NetworkSceneId): boolean;
			static op_Inequality(c1: UnityEngine.Networking.NetworkSceneId, c2: UnityEngine.Networking.NetworkSceneId): boolean;
			IsEmpty(): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: UnityEngine.Networking.NetworkSceneId): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkServer extends System.Object {
			static get localConnections(): any;
			static get listenPort(): number;
			static get serverHostId(): number;
			static get connections(): any;
			static get handlers(): any;
			static get hostTopology(): UnityEngine.Networking.HostTopology;
			static get objects(): any;
			/**[Obsolete]--"Moved to NetworkMigrationManager" */
			static get sendPeerInfo(): boolean;
			/**[Obsolete]--"Moved to NetworkMigrationManager" */
			static set sendPeerInfo(value: boolean);
			static get dontListen(): boolean;
			static set dontListen(value: boolean);
			static get useWebSockets(): boolean;
			static set useWebSockets(value: boolean);
			static get active(): boolean;
			static get localClientActive(): boolean;
			static get numChannels(): number;
			static get maxDelay(): number;
			static set maxDelay(value: number);
			static get networkConnectionClass(): System.Type;
			static Configure(config: UnityEngine.Networking.ConnectionConfig, maxConnections: number): boolean;
			static Configure(topology: UnityEngine.Networking.HostTopology): boolean;
			static Reset(): void;
			static Shutdown(): void;
			static Listen(matchInfo: any, listenPort: number): boolean;
			static Listen(serverPort: number): boolean;
			static Listen(ipAddress: string, serverPort: number): boolean;
			static ListenRelay(relayIp: string, relayPort: number, netGuid: any, sourceId: any, nodeId: any): void;
			static BecomeHost(oldClient: UnityEngine.Networking.NetworkClient, port: number, matchInfo: any, oldConnectionId: number, peers: any): UnityEngine.Networking.NetworkClient;
			static SendToAll(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
			static SendToReady(contextObj: UnityEngine.GameObject, msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
			static SendWriterToReady(contextObj: UnityEngine.GameObject, writer: UnityEngine.Networking.NetworkWriter, channelId: number): void;
			static SendBytesToReady(contextObj: UnityEngine.GameObject, buffer: Uint8Array, numBytes: number, channelId: number): void;
			static SendBytesToPlayer(player: UnityEngine.GameObject, buffer: Uint8Array, numBytes: number, channelId: number): void;
			static SendUnreliableToAll(msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
			static SendUnreliableToReady(contextObj: UnityEngine.GameObject, msgType: number, msg: UnityEngine.Networking.MessageBase): boolean;
			static SendByChannelToAll(msgType: number, msg: UnityEngine.Networking.MessageBase, channelId: number): boolean;
			static SendByChannelToReady(contextObj: UnityEngine.GameObject, msgType: number, msg: UnityEngine.Networking.MessageBase, channelId: number): boolean;
			static DisconnectAll(): void;
			static RegisterHandler(msgType: number, handler: UnityEngine.Networking.NetworkMessageDelegate): void;
			static UnregisterHandler(msgType: number): void;
			static ClearHandlers(): void;
			static ClearSpawners(): void;
			static GetStatsOut(numMsgs: any, numBufferedMsgs: any, numBytes: any, lastBufferedPerSecond: any): void;
			static GetStatsIn(numMsgs: any, numBytes: any): void;
			static SendToClientOfPlayer(player: UnityEngine.GameObject, msgType: number, msg: UnityEngine.Networking.MessageBase): void;
			static SendToClient(connectionId: number, msgType: number, msg: UnityEngine.Networking.MessageBase): void;
			static ReplacePlayerForConnection(conn: UnityEngine.Networking.NetworkConnection, player: UnityEngine.GameObject, playerControllerId: number, assetId: UnityEngine.Networking.NetworkHash128): boolean;
			static ReplacePlayerForConnection(conn: UnityEngine.Networking.NetworkConnection, player: UnityEngine.GameObject, playerControllerId: number): boolean;
			static AddPlayerForConnection(conn: UnityEngine.Networking.NetworkConnection, player: UnityEngine.GameObject, playerControllerId: number, assetId: UnityEngine.Networking.NetworkHash128): boolean;
			static AddPlayerForConnection(conn: UnityEngine.Networking.NetworkConnection, player: UnityEngine.GameObject, playerControllerId: number): boolean;
			static SetClientReady(conn: UnityEngine.Networking.NetworkConnection): void;
			static SetAllClientsNotReady(): void;
			static SetClientNotReady(conn: UnityEngine.Networking.NetworkConnection): void;
			static DestroyPlayersForConnection(conn: UnityEngine.Networking.NetworkConnection): void;
			static ClearLocalObjects(): void;
			static Spawn(obj: UnityEngine.GameObject): void;
			static Spawn(obj: UnityEngine.GameObject, assetId: UnityEngine.Networking.NetworkHash128): void;
			static SpawnWithClientAuthority(obj: UnityEngine.GameObject, player: UnityEngine.GameObject): boolean;
			static SpawnWithClientAuthority(obj: UnityEngine.GameObject, conn: UnityEngine.Networking.NetworkConnection): boolean;
			static SpawnWithClientAuthority(obj: UnityEngine.GameObject, assetId: UnityEngine.Networking.NetworkHash128, conn: UnityEngine.Networking.NetworkConnection): boolean;
			static Destroy(obj: UnityEngine.GameObject): void;
			static UnSpawn(obj: UnityEngine.GameObject): void;
			static FindLocalObject(netId: UnityEngine.Networking.NetworkInstanceId): UnityEngine.GameObject;
			static GetConnectionStats(): any;
			static ResetConnectionStats(): void;
			static AddExternalConnection(conn: UnityEngine.Networking.NetworkConnection): boolean;
			static RemoveExternalConnection(connectionId: number): void;
			static SpawnObjects(): boolean;
			/**[Obsolete]--"moved to NetworkMigrationManager" */
			SendNetworkInfo(targetConnection: UnityEngine.Networking.NetworkConnection): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkServerSimple extends System.Object {
			get listenPort(): number;
			set listenPort(value: number);
			get serverHostId(): number;
			set serverHostId(value: number);
			get hostTopology(): UnityEngine.Networking.HostTopology;
			get useWebSockets(): boolean;
			set useWebSockets(value: boolean);
			get connections(): any;
			get handlers(): any;
			get messageBuffer(): Uint8Array;
			get messageReader(): UnityEngine.Networking.NetworkReader;
			get networkConnectionClass(): System.Type;
			constructor();
			Initialize(): void;
			Configure(config: UnityEngine.Networking.ConnectionConfig, maxConnections: number): boolean;
			Configure(topology: UnityEngine.Networking.HostTopology): boolean;
			Listen(ipAddress: string, serverListenPort: number): boolean;
			Listen(serverListenPort: number): boolean;
			Listen(serverListenPort: number, topology: UnityEngine.Networking.HostTopology): boolean;
			ListenRelay(relayIp: string, relayPort: number, netGuid: any, sourceId: any, nodeId: any): void;
			Stop(): void;
			RegisterHandler(msgType: number, handler: UnityEngine.Networking.NetworkMessageDelegate): void;
			UnregisterHandler(msgType: number): void;
			ClearHandlers(): void;
			UpdateConnections(): void;
			Update(): void;
			FindConnection(connectionId: number): UnityEngine.Networking.NetworkConnection;
			SetConnectionAtIndex(conn: UnityEngine.Networking.NetworkConnection): boolean;
			RemoveConnectionAtIndex(connectionId: number): boolean;
			SendBytesTo(connectionId: number, bytes: Uint8Array, numBytes: number, channelId: number): void;
			SendWriterTo(connectionId: number, writer: UnityEngine.Networking.NetworkWriter, channelId: number): void;
			Disconnect(connectionId: number): void;
			DisconnectAllConnections(): void;
			OnConnectError(connectionId: number, error: number): void;
			OnDataError(conn: UnityEngine.Networking.NetworkConnection, error: number): void;
			OnDisconnectError(conn: UnityEngine.Networking.NetworkConnection, error: number): void;
			OnConnected(conn: UnityEngine.Networking.NetworkConnection): void;
			OnDisconnected(conn: UnityEngine.Networking.NetworkConnection): void;
			OnData(conn: UnityEngine.Networking.NetworkConnection, receivedSize: number, channelId: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkStartPosition extends UnityEngine.MonoBehaviour {
			constructor();
			Awake(): void;
			OnDestroy(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkTransformChild extends UnityEngine.Networking.NetworkBehaviour {
			get target(): UnityEngine.Transform;
			set target(value: UnityEngine.Transform);
			get childIndex(): number;
			get sendInterval(): number;
			set sendInterval(value: number);
			get syncRotationAxis(): UnityEngine.Networking.NetworkTransform.AxisSyncMode;
			set syncRotationAxis(value: UnityEngine.Networking.NetworkTransform.AxisSyncMode);
			get rotationSyncCompression(): UnityEngine.Networking.NetworkTransform.CompressionSyncMode;
			set rotationSyncCompression(value: UnityEngine.Networking.NetworkTransform.CompressionSyncMode);
			get movementThreshold(): number;
			set movementThreshold(value: number);
			get interpolateRotation(): number;
			set interpolateRotation(value: number);
			get interpolateMovement(): number;
			set interpolateMovement(value: number);
			get clientMoveCallback3D(): UnityEngine.Networking.NetworkTransform.ClientMoveCallback3D;
			set clientMoveCallback3D(value: UnityEngine.Networking.NetworkTransform.ClientMoveCallback3D);
			get lastSyncTime(): number;
			get targetSyncPosition(): UnityEngine.Vector3;
			get targetSyncRotation3D(): UnityEngine.Quaternion;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkTransform extends UnityEngine.Networking.NetworkBehaviour {
			get transformSyncMode(): UnityEngine.Networking.NetworkTransform.TransformSyncMode;
			set transformSyncMode(value: UnityEngine.Networking.NetworkTransform.TransformSyncMode);
			get sendInterval(): number;
			set sendInterval(value: number);
			get syncRotationAxis(): UnityEngine.Networking.NetworkTransform.AxisSyncMode;
			set syncRotationAxis(value: UnityEngine.Networking.NetworkTransform.AxisSyncMode);
			get rotationSyncCompression(): UnityEngine.Networking.NetworkTransform.CompressionSyncMode;
			set rotationSyncCompression(value: UnityEngine.Networking.NetworkTransform.CompressionSyncMode);
			get syncSpin(): boolean;
			set syncSpin(value: boolean);
			get movementTheshold(): number;
			set movementTheshold(value: number);
			get velocityThreshold(): number;
			set velocityThreshold(value: number);
			get snapThreshold(): number;
			set snapThreshold(value: number);
			get interpolateRotation(): number;
			set interpolateRotation(value: number);
			get interpolateMovement(): number;
			set interpolateMovement(value: number);
			get clientMoveCallback3D(): UnityEngine.Networking.NetworkTransform.ClientMoveCallback3D;
			set clientMoveCallback3D(value: UnityEngine.Networking.NetworkTransform.ClientMoveCallback3D);
			get clientMoveCallback2D(): UnityEngine.Networking.NetworkTransform.ClientMoveCallback2D;
			set clientMoveCallback2D(value: UnityEngine.Networking.NetworkTransform.ClientMoveCallback2D);
			get characterContoller(): UnityEngine.CharacterController;
			get rigidbody3D(): UnityEngine.Rigidbody;
			get rigidbody2D(): UnityEngine.Rigidbody2D;
			get lastSyncTime(): number;
			get targetSyncPosition(): UnityEngine.Vector3;
			get targetSyncVelocity(): UnityEngine.Vector3;
			get targetSyncRotation3D(): UnityEngine.Quaternion;
			get targetSyncRotation2D(): number;
			get grounded(): boolean;
			set grounded(value: boolean);
			constructor();
			static HandleTransform(netMsg: UnityEngine.Networking.NetworkMessage): void;
			static SerializeVelocity3D(writer: UnityEngine.Networking.NetworkWriter, velocity: UnityEngine.Vector3, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): void;
			static SerializeVelocity2D(writer: UnityEngine.Networking.NetworkWriter, velocity: UnityEngine.Vector2, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): void;
			static SerializeRotation3D(writer: UnityEngine.Networking.NetworkWriter, rot: UnityEngine.Quaternion, mode: UnityEngine.Networking.NetworkTransform.AxisSyncMode, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): void;
			static SerializeRotation2D(writer: UnityEngine.Networking.NetworkWriter, rot: number, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): void;
			static SerializeSpin3D(writer: UnityEngine.Networking.NetworkWriter, angularVelocity: UnityEngine.Vector3, mode: UnityEngine.Networking.NetworkTransform.AxisSyncMode, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): void;
			static SerializeSpin2D(writer: UnityEngine.Networking.NetworkWriter, angularVelocity: number, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): void;
			static UnserializeVelocity3D(reader: UnityEngine.Networking.NetworkReader, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): UnityEngine.Vector3;
			static UnserializeVelocity2D(reader: UnityEngine.Networking.NetworkReader, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): UnityEngine.Vector3;
			static UnserializeRotation3D(reader: UnityEngine.Networking.NetworkReader, mode: UnityEngine.Networking.NetworkTransform.AxisSyncMode, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): UnityEngine.Quaternion;
			static UnserializeRotation2D(reader: UnityEngine.Networking.NetworkReader, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): number;
			static UnserializeSpin3D(reader: UnityEngine.Networking.NetworkReader, mode: UnityEngine.Networking.NetworkTransform.AxisSyncMode, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): UnityEngine.Vector3;
			static UnserializeSpin2D(reader: UnityEngine.Networking.NetworkReader, compression: UnityEngine.Networking.NetworkTransform.CompressionSyncMode): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkTransformVisualizer extends UnityEngine.Networking.NetworkBehaviour {
			get visualizerPrefab(): UnityEngine.GameObject;
			set visualizerPrefab(value: UnityEngine.GameObject);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkWriter extends System.Object {
			get Position(): number;
			constructor();
			constructor(buffer: Uint8Array);
			ToArray(): Uint8Array;
			AsArray(): Uint8Array;
			WritePackedUInt32(value: number): void;
			WritePackedUInt64(value: number): void;
			Write(value: UnityEngine.Networking.NetworkInstanceId): void;
			Write(value: UnityEngine.Networking.NetworkSceneId): void;
			Write(value: string): void;
			Write(value: number): void;
			Write(value: System.SByte): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: number): void;
			Write(value: System.Decimal): void;
			Write(value: string): void;
			Write(value: boolean): void;
			Write(buffer: Uint8Array, count: number): void;
			Write(buffer: Uint8Array, offset: number, count: number): void;
			Write(value: UnityEngine.Vector2): void;
			Write(value: UnityEngine.Vector3): void;
			Write(value: UnityEngine.Vector4): void;
			Write(value: UnityEngine.Color): void;
			Write(value: UnityEngine.Color32): void;
			Write(value: UnityEngine.Quaternion): void;
			Write(value: UnityEngine.Rect): void;
			Write(value: UnityEngine.Plane): void;
			Write(value: UnityEngine.Ray): void;
			Write(value: UnityEngine.Matrix4x4): void;
			Write(value: UnityEngine.Networking.NetworkHash128): void;
			Write(value: UnityEngine.Networking.NetworkIdentity): void;
			Write(value: UnityEngine.Transform): void;
			Write(value: UnityEngine.GameObject): void;
			Write(msg: UnityEngine.Networking.MessageBase): void;
			WriteBytesAndSize(buffer: Uint8Array, count: number): void;
			WriteBytesFull(buffer: Uint8Array): void;
			SeekZero(): void;
			StartMessage(msgType: number): void;
			FinishMessage(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PlayerController extends System.Object {
			playerControllerId: number;
			unetView: UnityEngine.Networking.NetworkIdentity;
			gameObject: UnityEngine.GameObject;
			static MaxPlayersPerClient: number;
			get IsValid(): boolean;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SyncListString extends UnityEngine.Networking.SyncList$1 {
			constructor();
			/**[Obsolete]--"ReadReference is now used instead" */
			static ReadInstance(reader: UnityEngine.Networking.NetworkReader): UnityEngine.Networking.SyncListString;
			static ReadReference(reader: UnityEngine.Networking.NetworkReader, syncList: UnityEngine.Networking.SyncListString): void;
			static WriteInstance(writer: UnityEngine.Networking.NetworkWriter, items: UnityEngine.Networking.SyncListString): void;
			/**inherited method */
			InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
			/**inherited method */
			HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
			/**inherited method */
			Add(item: string): void;
			/**inherited method */
			Clear(): void;
			/**inherited method */
			Contains(item: string): boolean;
			/**inherited method */
			CopyTo(array: string[], index: number): void;
			/**inherited method */
			IndexOf(item: string): number;
			/**inherited method */
			Insert(index: number, item: string): void;
			/**inherited method */
			Remove(item: string): boolean;
			/**inherited method */
			RemoveAt(index: number): void;
			/**inherited method */
			Dirty(index: number): void;
			/**inherited method */
			GetEnumerator(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SyncListFloat extends UnityEngine.Networking.SyncList$1 {
			constructor();
			/**[Obsolete]--"ReadReference is now used instead" */
			static ReadInstance(reader: UnityEngine.Networking.NetworkReader): UnityEngine.Networking.SyncListFloat;
			static ReadReference(reader: UnityEngine.Networking.NetworkReader, syncList: UnityEngine.Networking.SyncListFloat): void;
			static WriteInstance(writer: UnityEngine.Networking.NetworkWriter, items: UnityEngine.Networking.SyncListFloat): void;
			/**inherited method */
			InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
			/**inherited method */
			HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
			/**inherited method */
			Add(item: number): void;
			/**inherited method */
			Clear(): void;
			/**inherited method */
			Contains(item: number): boolean;
			/**inherited method */
			CopyTo(array: number[], index: number): void;
			/**inherited method */
			IndexOf(item: number): number;
			/**inherited method */
			Insert(index: number, item: number): void;
			/**inherited method */
			Remove(item: number): boolean;
			/**inherited method */
			RemoveAt(index: number): void;
			/**inherited method */
			Dirty(index: number): void;
			/**inherited method */
			GetEnumerator(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SyncListInt extends UnityEngine.Networking.SyncList$1 {
			constructor();
			/**[Obsolete]--"ReadReference is now used instead" */
			static ReadInstance(reader: UnityEngine.Networking.NetworkReader): UnityEngine.Networking.SyncListInt;
			static ReadReference(reader: UnityEngine.Networking.NetworkReader, syncList: UnityEngine.Networking.SyncListInt): void;
			static WriteInstance(writer: UnityEngine.Networking.NetworkWriter, items: UnityEngine.Networking.SyncListInt): void;
			/**inherited method */
			InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
			/**inherited method */
			HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
			/**inherited method */
			Add(item: number): void;
			/**inherited method */
			Clear(): void;
			/**inherited method */
			Contains(item: number): boolean;
			/**inherited method */
			CopyTo(array: number[], index: number): void;
			/**inherited method */
			IndexOf(item: number): number;
			/**inherited method */
			Insert(index: number, item: number): void;
			/**inherited method */
			Remove(item: number): boolean;
			/**inherited method */
			RemoveAt(index: number): void;
			/**inherited method */
			Dirty(index: number): void;
			/**inherited method */
			GetEnumerator(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SyncListUInt extends UnityEngine.Networking.SyncList$1 {
			constructor();
			/**[Obsolete]--"ReadReference is now used instead" */
			static ReadInstance(reader: UnityEngine.Networking.NetworkReader): UnityEngine.Networking.SyncListUInt;
			static ReadReference(reader: UnityEngine.Networking.NetworkReader, syncList: UnityEngine.Networking.SyncListUInt): void;
			static WriteInstance(writer: UnityEngine.Networking.NetworkWriter, items: UnityEngine.Networking.SyncListUInt): void;
			/**inherited method */
			InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
			/**inherited method */
			HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
			/**inherited method */
			Add(item: number): void;
			/**inherited method */
			Clear(): void;
			/**inherited method */
			Contains(item: number): boolean;
			/**inherited method */
			CopyTo(array: number[], index: number): void;
			/**inherited method */
			IndexOf(item: number): number;
			/**inherited method */
			Insert(index: number, item: number): void;
			/**inherited method */
			Remove(item: number): boolean;
			/**inherited method */
			RemoveAt(index: number): void;
			/**inherited method */
			Dirty(index: number): void;
			/**inherited method */
			GetEnumerator(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SyncListBool extends UnityEngine.Networking.SyncList$1 {
			constructor();
			/**[Obsolete]--"ReadReference is now used instead" */
			static ReadInstance(reader: UnityEngine.Networking.NetworkReader): UnityEngine.Networking.SyncListBool;
			static ReadReference(reader: UnityEngine.Networking.NetworkReader, syncList: UnityEngine.Networking.SyncListBool): void;
			static WriteInstance(writer: UnityEngine.Networking.NetworkWriter, items: UnityEngine.Networking.SyncListBool): void;
			/**inherited method */
			InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
			/**inherited method */
			HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
			/**inherited method */
			Add(item: boolean): void;
			/**inherited method */
			Clear(): void;
			/**inherited method */
			Contains(item: boolean): boolean;
			/**inherited method */
			CopyTo(array: boolean[], index: number): void;
			/**inherited method */
			IndexOf(item: boolean): number;
			/**inherited method */
			Insert(index: number, item: boolean): void;
			/**inherited method */
			Remove(item: boolean): boolean;
			/**inherited method */
			RemoveAt(index: number): void;
			/**inherited method */
			Dirty(index: number): void;
			/**inherited method */
			GetEnumerator(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SyncListStruct$1 {
			get Count(): number;
			constructor();
			AddInternal(item: any): void;
			GetItem(i: number): any;
			/**inherited method */
			InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
			/**inherited method */
			HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
			/**inherited method */
			Add(item: any): void;
			/**inherited method */
			Clear(): void;
			/**inherited method */
			Contains(item: any): boolean;
			/**inherited method */
			CopyTo(array: any, index: number): void;
			/**inherited method */
			IndexOf(item: any): number;
			/**inherited method */
			Insert(index: number, item: any): void;
			/**inherited method */
			Remove(item: any): boolean;
			/**inherited method */
			RemoveAt(index: number): void;
			/**inherited method */
			Dirty(index: number): void;
			/**inherited method */
			GetEnumerator(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SyncList$1 extends System.Object {
			get Count(): number;
			get IsReadOnly(): boolean;
			get Callback(): UnityEngine.Networking.SyncList$1.SyncListChanged;
			set Callback(value: UnityEngine.Networking.SyncList$1.SyncListChanged);
			InitializeBehaviour(beh: UnityEngine.Networking.NetworkBehaviour, cmdHash: number): void;
			HandleMsg(reader: UnityEngine.Networking.NetworkReader): void;
			Add(item: any): void;
			Clear(): void;
			Contains(item: any): boolean;
			CopyTo(array: any, index: number): void;
			IndexOf(item: any): number;
			Insert(index: number, item: any): void;
			Remove(item: any): boolean;
			RemoveAt(index: number): void;
			Dirty(index: number): void;
			GetEnumerator(): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkMessageDelegate extends Function {
		}
		export class SpawnDelegate extends Function {
		}
		export class UnSpawnDelegate extends Function {
		}
		export class MsgType extends System.Object {
			static ObjectDestroy: number;
			static Rpc: number;
			static ObjectSpawn: number;
			static Owner: number;
			static Command: number;
			static LocalPlayerTransform: number;
			static SyncEvent: number;
			static UpdateVars: number;
			static SyncList: number;
			static ObjectSpawnScene: number;
			static NetworkInfo: number;
			static SpawnFinished: number;
			static ObjectHide: number;
			static CRC: number;
			static LocalClientAuthority: number;
			static LocalChildTransform: number;
			static Fragment: number;
			static PeerClientAuthority: number;
			static InternalHighest: number;
			static Connect: number;
			static Disconnect: number;
			static Error: number;
			static Ready: number;
			static NotReady: number;
			static AddPlayer: number;
			static RemovePlayer: number;
			static Scene: number;
			static Animation: number;
			static AnimationParameters: number;
			static AnimationTrigger: number;
			static LobbyReadyToBegin: number;
			static LobbySceneLoaded: number;
			static LobbyAddPlayerFailed: number;
			static LobbyReturnToLobby: number;
			static ReconnectPlayer: number;
			static Highest: number;
			constructor();
			static MsgTypeToString(value: number): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NetworkMessage extends System.Object {
			static MaxMessageSize: number;
			msgType: number;
			conn: UnityEngine.Networking.NetworkConnection;
			reader: UnityEngine.Networking.NetworkReader;
			channelId: number;
			constructor();
			static Dump(payload: Uint8Array, sz: number): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum Version { Current = 1, }
		export class Channels extends System.Object {
			static DefaultReliable: number;
			static DefaultUnreliable: number;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum ChannelOption { MaxPendingBuffers = 1, AllowFragmentation = 2, MaxPacketSize = 3, }

	}
	export namespace UnityEngine.RemoteSettings {
		export class UpdatedEventHandler extends Function {
		}

	}
		export class AssetModificationProcessor extends System.Object {
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class HashMd5 extends System.Object {
		static Hash_MD5_32(word: string, toUpper?: boolean): string;
		static Hash_MD5_16(word: string, toUpper?: boolean): string;
		static Hash_2_MD5_32(word: string, toUpper?: boolean): string;
		static Hash_2_MD5_16(word: string, toUpper?: boolean): string;
		static Hash_SHA_1(word: string, toUpper?: boolean): string;
		static Hash_SHA_256(word: string, toUpper?: boolean): string;
		static Hash_SHA_384(word: string, toUpper?: boolean): string;
		static Hash_SHA_512(word: string, toUpper?: boolean): string;
		static SHA256File(fileStream: System.IO.FileStream): string;
		static MD5File(fileName: string): string;
		static SHA1File(fileName: string): string;
		static Crc32File(fileName: string): string;
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class Multiple$1 extends System.Object {
		static ReleaseAllInstance(): void;
		static GetAllInstance(): any;
		Release(): void;
		Init(): void;
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class MultipleMono$1 extends UnityEngine.MonoBehaviour {
		static ReleaseAllInstance(): void;
		static GetAllInstance(): any;
		Release(): void;
		Init(): void;
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class ObjectExtend extends System.Object {
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class Singleton$1 extends System.Object {
		static get Instance(): any;
		static GetInstance(): any;
		static ReleaseInstance(): void;
		Release(): void;
		Init(): void;
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class SingletonMono$1 extends UnityEngine.MonoBehaviour {
		static get Instance(): any;
		static GetInstance(): any;
		static ReleaseInstance(): void;
		Release(): void;
		Init(): void;
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsBase extends UnityEngine.MonoBehaviour {
		constructor();
		static GetInstances(): any;
		static ReleaseInstances(): void;
		static Tick(): void;
		Init(): void;
		Release(remove?: boolean): void;
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsBaseAction extends JsBase {
		get callback(): System.Action;
		set callback(value: System.Action);
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsFixedUpdate extends JsBaseAction {
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsLateUpdate extends JsBaseAction {
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsOnApplicationFocus extends JsBase {
		get callback(): System.Action$1;
		set callback(value: System.Action$1);
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsOnApplicationPause extends JsBase {
		get callback(): System.Action$1;
		set callback(value: System.Action$1);
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsOnApplicationQuit extends JsBaseAction {
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsOnCollision extends JsBase {
		get enter(): System.Action$1;
		set enter(value: System.Action$1);
		get stay(): System.Action$1;
		set stay(value: System.Action$1);
		get exit(): System.Action$1;
		set exit(value: System.Action$1);
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsOnCollision2D extends JsBase {
		get enter(): System.Action$1;
		set enter(value: System.Action$1);
		get stay(): System.Action$1;
		set stay(value: System.Action$1);
		get exit(): System.Action$1;
		set exit(value: System.Action$1);
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsOnDestroy extends JsBaseAction {
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsOnDisable extends JsBaseAction {
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsOnEnable extends JsBaseAction {
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsOnGUI extends JsBaseAction {
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsOnTrigger extends JsBase {
		get enter(): System.Action$1;
		set enter(value: System.Action$1);
		get stay(): System.Action$1;
		set stay(value: System.Action$1);
		get exit(): System.Action$1;
		set exit(value: System.Action$1);
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsOnTrigger2D extends JsBase {
		get enter(): System.Action$1;
		set enter(value: System.Action$1);
		get stay(): System.Action$1;
		set stay(value: System.Action$1);
		get exit(): System.Action$1;
		set exit(value: System.Action$1);
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsStart extends JsBaseAction {
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsUpdate extends JsBaseAction {
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class Load extends Function {
	}
	export class JsBehaviour extends UnityEngine.MonoBehaviour {
		ModuleName: string;
		get jsObject(): Puerts.JsObject;
		set jsObject(value: Puerts.JsObject);
		constructor();
		GetJsValue(): string;
		Remove(name: string): boolean;
		Action(name: string, callback: System.Action): void;
		ActionBool(name: string, callback: System.Action$1): void;
		ActionCollision(enter: System.Action$1, stay: System.Action$1, exit: System.Action$1): void;
		ActionCollision2D(enter: System.Action$1, stay: System.Action$1, exit: System.Action$1): void;
		ActionTrigger(enter: System.Action$1, stay: System.Action$1, exit: System.Action$1): void;
		ActionTrigger2D(enter: System.Action$1, stay: System.Action$1, exit: System.Action$1): void;
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsBehaviourExtends extends System.Object {
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsBinding extends UnityEngine.MonoBehaviour {
		args: JsArg[];
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsArg {
		name: string;
		value: any;
		/**inherited method */
		Equals(obj: any): boolean;
		/**inherited method */
		GetHashCode(): number;
		/**inherited method */
		ToString(): string;
		/**inherited method */
		GetType(): System.Type;
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsManager extends SingletonMono$1 {
		get JsEnv(): Puerts.JsEnv;
		set JsEnv(value: Puerts.JsEnv);
		get Loader(): JsManager.JsLoader;
		set Loader(value: JsManager.JsLoader);
		constructor();
		/**inherited method */
		Release(): void;
		/**inherited method */
		Init(): void;
		/**inherited method */
		IsInvoking(): boolean;
		/**inherited method */
		IsInvoking(methodName: string): boolean;
		/**inherited method */
		CancelInvoke(): void;
		/**inherited method */
		CancelInvoke(methodName: string): void;
		/**inherited method */
		Invoke(methodName: string, time: number): void;
		/**inherited method */
		InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
		/**inherited method */
		StartCoroutine(methodName: string): UnityEngine.Coroutine;
		/**inherited method */
		StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
		/**inherited method */
		StartCoroutine(routine: any): UnityEngine.Coroutine;
		/**inherited method */
		/**[Obsolete]--"StartCoroutine_Auto has been deprecated. Use StartCoroutine instead (UnityUpgradable) -> StartCoroutine([mscorlib] System.Collections.IEnumerator)" */
		StartCoroutine_Auto(routine: any): UnityEngine.Coroutine;
		/**inherited method */
		StopCoroutine(routine: any): void;
		/**inherited method */
		StopCoroutine(routine: UnityEngine.Coroutine): void;
		/**inherited method */
		StopCoroutine(methodName: string): void;
		/**inherited method */
		StopAllCoroutines(): void;
		/**inherited method */
		GetComponent(type: System.Type): UnityEngine.Component;
		/**inherited method */
		GetComponent(type: string): UnityEngine.Component;
		/**inherited method */
		GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
		/**inherited method */
		GetComponentInChildren(t: System.Type): UnityEngine.Component;
		/**inherited method */
		GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
		/**inherited method */
		GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
		/**inherited method */
		GetComponentInParent(t: System.Type): UnityEngine.Component;
		/**inherited method */
		GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
		/**inherited method */
		GetComponentsInParent(t: System.Type): UnityEngine.Component[];
		/**inherited method */
		GetComponents(type: System.Type): UnityEngine.Component[];
		/**inherited method */
		GetComponents(type: System.Type, results: any): void;
		/**inherited method */
		CompareTag(tag: string): boolean;
		/**inherited method */
		SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
		/**inherited method */
		SendMessageUpwards(methodName: string, value: any): void;
		/**inherited method */
		SendMessageUpwards(methodName: string): void;
		/**inherited method */
		SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
		/**inherited method */
		SendMessage(methodName: string, value: any): void;
		/**inherited method */
		SendMessage(methodName: string): void;
		/**inherited method */
		SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
		/**inherited method */
		SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
		/**inherited method */
		BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
		/**inherited method */
		BroadcastMessage(methodName: string, parameter: any): void;
		/**inherited method */
		BroadcastMessage(methodName: string): void;
		/**inherited method */
		BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
		/**inherited method */
		GetInstanceID(): number;
		/**inherited method */
		GetHashCode(): number;
		/**inherited method */
		Equals(other: any): boolean;
		/**inherited method */
		ToString(): string;
		/**inherited method */
		GetType(): System.Type;
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsUtils extends System.Object {
		static Generator(next: System.Func$1, is_done: System.Func$1): any;
		static Create(type: System.Data.DbType, v: any): Mono.Data.Sqlite.SqliteParameter;
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class JsObjectAccess1 extends UnityEngine.MonoBehaviour {
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class Launch extends UnityEngine.MonoBehaviour {
		static get globalScript(): string;
		static set globalScript(value: string);
		constructor();
		static Restart(): void;
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class PuertsConfig extends System.Object {
		static get BlackList(): any;
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class SvnUtils extends System.Object {
		static SvnSetWorking(): void;
		static SvnUpdate(): void;
		static SvnCommit(): void;
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class Utils extends System.Object {
		static CopyDirectory(srcPath: string, targetPath: string): void;
		static RunCmd(command: string, args: string): void;
		static RunCmd(command: string, args: string, shell: boolean): void;
		static RunCmd(command: string, args: string, workdir: string): void;
		static RunCmd(command: string, args: string, shell: boolean, workdir: string): void;
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export class U2018Compatible extends System.Object {
		constructor();
		Equals(x: any): boolean;
		GetType(): System.Type;
		GetHashCode(): number;
		ToString(): string;
	}
	export namespace System.Collections.Generic.HashSet$1 {
		export class Enumerator {
			get Current(): any;
			Dispose(): void;
			MoveNext(): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.Collections.Generic.LinkedList$1 {
		export class Enumerator {
			get Current(): any;
			MoveNext(): boolean;
			Dispose(): void;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.Collections.Generic.Queue$1 {
		export class Enumerator {
			get Current(): any;
			Dispose(): void;
			MoveNext(): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.Collections.Generic.SortedDictionary$2 {
		export class Enumerator {
			get Current(): any;
			MoveNext(): boolean;
			Dispose(): void;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class KeyCollection extends System.Object {
			get Count(): number;
			constructor(dictionary: any);
			GetEnumerator(): any;
			CopyTo(array: any, index: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ValueCollection extends System.Object {
			get Count(): number;
			constructor(dictionary: any);
			GetEnumerator(): any;
			CopyTo(array: any, index: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.Collections.Generic.SortedDictionary$2.KeyCollection {
		export class Enumerator {
			get Current(): any;
			Dispose(): void;
			MoveNext(): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.Collections.Generic.SortedDictionary$2.ValueCollection {
		export class Enumerator {
			get Current(): any;
			Dispose(): void;
			MoveNext(): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.Collections.Generic.SortedSet$1 {
		export class Enumerator {
			get Current(): any;
			MoveNext(): boolean;
			Dispose(): void;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace System.Collections.Generic.Stack$1 {
		export class Enumerator {
			get Current(): any;
			Dispose(): void;
			MoveNext(): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.EventSystems {
		export enum EventHandle { Unused = 0, Used = 1, }
		export interface IEventSystemHandler {
		}
		export interface IPointerEnterHandler {
			OnPointerEnter(eventData: UnityEngine.EventSystems.PointerEventData): void;
		}
		export interface IPointerExitHandler {
			OnPointerExit(eventData: UnityEngine.EventSystems.PointerEventData): void;
		}
		export interface IPointerDownHandler {
			OnPointerDown(eventData: UnityEngine.EventSystems.PointerEventData): void;
		}
		export interface IPointerUpHandler {
			OnPointerUp(eventData: UnityEngine.EventSystems.PointerEventData): void;
		}
		export interface IPointerClickHandler {
			OnPointerClick(eventData: UnityEngine.EventSystems.PointerEventData): void;
		}
		export interface IBeginDragHandler {
			OnBeginDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
		}
		export interface IInitializePotentialDragHandler {
			OnInitializePotentialDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
		}
		export interface IDragHandler {
			OnDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
		}
		export interface IEndDragHandler {
			OnEndDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
		}
		export interface IDropHandler {
			OnDrop(eventData: UnityEngine.EventSystems.PointerEventData): void;
		}
		export interface IScrollHandler {
			OnScroll(eventData: UnityEngine.EventSystems.PointerEventData): void;
		}
		export interface IUpdateSelectedHandler {
			OnUpdateSelected(eventData: UnityEngine.EventSystems.BaseEventData): void;
		}
		export interface ISelectHandler {
			OnSelect(eventData: UnityEngine.EventSystems.BaseEventData): void;
		}
		export interface IDeselectHandler {
			OnDeselect(eventData: UnityEngine.EventSystems.BaseEventData): void;
		}
		export interface IMoveHandler {
			OnMove(eventData: UnityEngine.EventSystems.AxisEventData): void;
		}
		export interface ISubmitHandler {
			OnSubmit(eventData: UnityEngine.EventSystems.BaseEventData): void;
		}
		export interface ICancelHandler {
			OnCancel(eventData: UnityEngine.EventSystems.BaseEventData): void;
		}
		export class EventSystem extends UnityEngine.EventSystems.UIBehaviour {
			static get current(): UnityEngine.EventSystems.EventSystem;
			static set current(value: UnityEngine.EventSystems.EventSystem);
			get sendNavigationEvents(): boolean;
			set sendNavigationEvents(value: boolean);
			get pixelDragThreshold(): number;
			set pixelDragThreshold(value: number);
			get currentInputModule(): UnityEngine.EventSystems.BaseInputModule;
			get firstSelectedGameObject(): UnityEngine.GameObject;
			set firstSelectedGameObject(value: UnityEngine.GameObject);
			get currentSelectedGameObject(): UnityEngine.GameObject;
			/**[Obsolete]--"lastSelectedGameObject is no longer supported" */
			get lastSelectedGameObject(): UnityEngine.GameObject;
			get isFocused(): boolean;
			get alreadySelecting(): boolean;
			UpdateModules(): void;
			SetSelectedGameObject(selected: UnityEngine.GameObject, pointer: UnityEngine.EventSystems.BaseEventData): void;
			SetSelectedGameObject(selected: UnityEngine.GameObject): void;
			RaycastAll(eventData: UnityEngine.EventSystems.PointerEventData, raycastResults: any): void;
			IsPointerOverGameObject(): boolean;
			IsPointerOverGameObject(pointerId: number): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class EventTrigger extends UnityEngine.MonoBehaviour {
			/**[Obsolete][Error]--"Please use triggers instead (UnityUpgradable) -> triggers" */
			delegates: any;
			get triggers(): any;
			set triggers(value: any);
			OnPointerEnter(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnPointerExit(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnDrop(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnPointerDown(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnPointerUp(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnPointerClick(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnSelect(eventData: UnityEngine.EventSystems.BaseEventData): void;
			OnDeselect(eventData: UnityEngine.EventSystems.BaseEventData): void;
			OnScroll(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnMove(eventData: UnityEngine.EventSystems.AxisEventData): void;
			OnUpdateSelected(eventData: UnityEngine.EventSystems.BaseEventData): void;
			OnInitializePotentialDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnBeginDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnEndDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnSubmit(eventData: UnityEngine.EventSystems.BaseEventData): void;
			OnCancel(eventData: UnityEngine.EventSystems.BaseEventData): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum EventTriggerType { PointerEnter = 0, PointerExit = 1, PointerDown = 2, PointerUp = 3, PointerClick = 4, Drag = 5, Drop = 6, Scroll = 7, UpdateSelected = 8, Select = 9, Deselect = 10, Move = 11, InitializePotentialDrag = 12, BeginDrag = 13, EndDrag = 14, Submit = 15, Cancel = 16, }
		export class ExecuteEvents extends System.Object {
			static get pointerEnterHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get pointerExitHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get pointerDownHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get pointerUpHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get pointerClickHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get initializePotentialDrag(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get beginDragHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get dragHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get endDragHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get dropHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get scrollHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get updateSelectedHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get selectHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get deselectHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get moveHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get submitHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			static get cancelHandler(): UnityEngine.EventSystems.ExecuteEvents.EventFunction$1;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum MoveDirection { Left = 0, Up = 1, Right = 2, Down = 3, None = 4, }
		export class RaycastResult {
			module: UnityEngine.EventSystems.BaseRaycaster;
			distance: number;
			index: number;
			depth: number;
			sortingLayer: number;
			sortingOrder: number;
			worldPosition: UnityEngine.Vector3;
			worldNormal: UnityEngine.Vector3;
			screenPosition: UnityEngine.Vector2;
			get gameObject(): UnityEngine.GameObject;
			set gameObject(value: UnityEngine.GameObject);
			get isValid(): boolean;
			Clear(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class UIBehaviour extends UnityEngine.MonoBehaviour {
			IsActive(): boolean;
			IsDestroyed(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AxisEventData extends UnityEngine.EventSystems.BaseEventData {
			get moveVector(): UnityEngine.Vector2;
			set moveVector(value: UnityEngine.Vector2);
			get moveDir(): UnityEngine.EventSystems.MoveDirection;
			set moveDir(value: UnityEngine.EventSystems.MoveDirection);
			constructor(eventSystem: UnityEngine.EventSystems.EventSystem);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class AbstractEventData extends System.Object {
			get used(): boolean;
			Reset(): void;
			Use(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BaseEventData extends UnityEngine.EventSystems.AbstractEventData {
			get currentInputModule(): UnityEngine.EventSystems.BaseInputModule;
			get selectedObject(): UnityEngine.GameObject;
			set selectedObject(value: UnityEngine.GameObject);
			constructor(eventSystem: UnityEngine.EventSystems.EventSystem);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PointerEventData extends UnityEngine.EventSystems.BaseEventData {
			hovered: any;
			get pointerEnter(): UnityEngine.GameObject;
			set pointerEnter(value: UnityEngine.GameObject);
			get lastPress(): UnityEngine.GameObject;
			set lastPress(value: UnityEngine.GameObject);
			get rawPointerPress(): UnityEngine.GameObject;
			set rawPointerPress(value: UnityEngine.GameObject);
			get pointerDrag(): UnityEngine.GameObject;
			set pointerDrag(value: UnityEngine.GameObject);
			get pointerCurrentRaycast(): UnityEngine.EventSystems.RaycastResult;
			set pointerCurrentRaycast(value: UnityEngine.EventSystems.RaycastResult);
			get pointerPressRaycast(): UnityEngine.EventSystems.RaycastResult;
			set pointerPressRaycast(value: UnityEngine.EventSystems.RaycastResult);
			get eligibleForClick(): boolean;
			set eligibleForClick(value: boolean);
			get pointerId(): number;
			set pointerId(value: number);
			get position(): UnityEngine.Vector2;
			set position(value: UnityEngine.Vector2);
			get delta(): UnityEngine.Vector2;
			set delta(value: UnityEngine.Vector2);
			get pressPosition(): UnityEngine.Vector2;
			set pressPosition(value: UnityEngine.Vector2);
			/**[Obsolete]--"Use either pointerCurrentRaycast.worldPosition or pointerPressRaycast.worldPosition" */
			get worldPosition(): UnityEngine.Vector3;
			/**[Obsolete]--"Use either pointerCurrentRaycast.worldPosition or pointerPressRaycast.worldPosition" */
			set worldPosition(value: UnityEngine.Vector3);
			/**[Obsolete]--"Use either pointerCurrentRaycast.worldNormal or pointerPressRaycast.worldNormal" */
			get worldNormal(): UnityEngine.Vector3;
			/**[Obsolete]--"Use either pointerCurrentRaycast.worldNormal or pointerPressRaycast.worldNormal" */
			set worldNormal(value: UnityEngine.Vector3);
			get clickTime(): number;
			set clickTime(value: number);
			get clickCount(): number;
			set clickCount(value: number);
			get scrollDelta(): UnityEngine.Vector2;
			set scrollDelta(value: UnityEngine.Vector2);
			get useDragThreshold(): boolean;
			set useDragThreshold(value: boolean);
			get dragging(): boolean;
			set dragging(value: boolean);
			get button(): UnityEngine.EventSystems.PointerEventData.InputButton;
			set button(value: UnityEngine.EventSystems.PointerEventData.InputButton);
			get enterEventCamera(): UnityEngine.Camera;
			get pressEventCamera(): UnityEngine.Camera;
			get pointerPress(): UnityEngine.GameObject;
			set pointerPress(value: UnityEngine.GameObject);
			constructor(eventSystem: UnityEngine.EventSystems.EventSystem);
			IsPointerMoving(): boolean;
			IsScrolling(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BaseInput extends UnityEngine.EventSystems.UIBehaviour {
			get compositionString(): string;
			get imeCompositionMode(): UnityEngine.IMECompositionMode;
			set imeCompositionMode(value: UnityEngine.IMECompositionMode);
			get compositionCursorPos(): UnityEngine.Vector2;
			set compositionCursorPos(value: UnityEngine.Vector2);
			get mousePresent(): boolean;
			get mousePosition(): UnityEngine.Vector2;
			get mouseScrollDelta(): UnityEngine.Vector2;
			get touchSupported(): boolean;
			get touchCount(): number;
			constructor();
			GetMouseButtonDown(button: number): boolean;
			GetMouseButtonUp(button: number): boolean;
			GetMouseButton(button: number): boolean;
			GetTouch(index: number): UnityEngine.Touch;
			GetAxisRaw(axisName: string): number;
			GetButtonDown(buttonName: string): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BaseInputModule extends UnityEngine.EventSystems.UIBehaviour {
			get input(): UnityEngine.EventSystems.BaseInput;
			get inputOverride(): UnityEngine.EventSystems.BaseInput;
			set inputOverride(value: UnityEngine.EventSystems.BaseInput);
			Process(): void;
			IsPointerOverGameObject(pointerId: number): boolean;
			ShouldActivateModule(): boolean;
			DeactivateModule(): void;
			ActivateModule(): void;
			UpdateModule(): void;
			IsModuleSupported(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PointerInputModule extends UnityEngine.EventSystems.BaseInputModule {
			static kMouseLeftId: number;
			static kMouseRightId: number;
			static kMouseMiddleId: number;
			static kFakeTouchesId: number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StandaloneInputModule extends UnityEngine.EventSystems.PointerInputModule {
			/**[Obsolete]--"Mode is no longer needed on input module as it handles both mouse and keyboard simultaneously." */
			get inputMode(): UnityEngine.EventSystems.StandaloneInputModule.InputMode;
			/**[Obsolete]--"allowActivationOnMobileDevice has been deprecated. Use forceModuleActive instead (UnityUpgradable) -> forceModuleActive" */
			get allowActivationOnMobileDevice(): boolean;
			/**[Obsolete]--"allowActivationOnMobileDevice has been deprecated. Use forceModuleActive instead (UnityUpgradable) -> forceModuleActive" */
			set allowActivationOnMobileDevice(value: boolean);
			get forceModuleActive(): boolean;
			set forceModuleActive(value: boolean);
			get inputActionsPerSecond(): number;
			set inputActionsPerSecond(value: number);
			get repeatDelay(): number;
			set repeatDelay(value: number);
			get horizontalAxis(): string;
			set horizontalAxis(value: string);
			get verticalAxis(): string;
			set verticalAxis(value: string);
			get submitButton(): string;
			set submitButton(value: string);
			get cancelButton(): string;
			set cancelButton(value: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TouchInputModule extends UnityEngine.EventSystems.PointerInputModule {
			/**[Obsolete]--"allowActivationOnStandalone has been deprecated. Use forceModuleActive instead (UnityUpgradable) -> forceModuleActive" */
			get allowActivationOnStandalone(): boolean;
			/**[Obsolete]--"allowActivationOnStandalone has been deprecated. Use forceModuleActive instead (UnityUpgradable) -> forceModuleActive" */
			set allowActivationOnStandalone(value: boolean);
			get forceModuleActive(): boolean;
			set forceModuleActive(value: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BaseRaycaster extends UnityEngine.EventSystems.UIBehaviour {
			get eventCamera(): UnityEngine.Camera;
			/**[Obsolete]--"Please use sortOrderPriority and renderOrderPriority" */
			get priority(): number;
			get sortOrderPriority(): number;
			get renderOrderPriority(): number;
			Raycast(eventData: UnityEngine.EventSystems.PointerEventData, resultAppendList: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Physics2DRaycaster extends UnityEngine.EventSystems.PhysicsRaycaster {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PhysicsRaycaster extends UnityEngine.EventSystems.BaseRaycaster {
			get eventCamera(): UnityEngine.Camera;
			get depth(): number;
			get finalEventMask(): number;
			get eventMask(): UnityEngine.LayerMask;
			set eventMask(value: UnityEngine.LayerMask);
			get maxRayIntersections(): number;
			set maxRayIntersections(value: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.EventSystems.EventTrigger {
		export class TriggerEvent extends UnityEngine.Events.UnityEvent$1 {
			constructor();
			/**inherited method */
			AddListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			RemoveListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			Invoke(arg0: UnityEngine.EventSystems.BaseEventData): void;
			/**inherited method */
			GetPersistentEventCount(): number;
			/**inherited method */
			GetPersistentTarget(index: number): any;
			/**inherited method */
			GetPersistentMethodName(index: number): string;
			/**inherited method */
			SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
			/**inherited method */
			RemoveAllListeners(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Entry extends System.Object {
			eventID: UnityEngine.EventSystems.EventTriggerType;
			callback: UnityEngine.EventSystems.EventTrigger.TriggerEvent;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.EventSystems.ExecuteEvents {
		export class EventFunction$1 extends Function {
		}

	}
	export namespace UnityEngine.EventSystems.PointerEventData {
		export enum InputButton { Left = 0, Right = 1, Middle = 2, }
		export enum FramePressState { Pressed = 0, Released = 1, PressedAndReleased = 2, NotChanged = 3, }

	}
	export namespace UnityEngine.EventSystems.PointerInputModule {
		export class MouseButtonEventData extends System.Object {
			buttonState: UnityEngine.EventSystems.PointerEventData.FramePressState;
			buttonData: UnityEngine.EventSystems.PointerEventData;
			constructor();
			PressedThisFrame(): boolean;
			ReleasedThisFrame(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.EventSystems.StandaloneInputModule {
		export enum InputMode { Mouse = 0, Buttons = 1, }

	}
	export namespace UnityEngine.UI {
		export class AnimationTriggers extends System.Object {
			get normalTrigger(): string;
			set normalTrigger(value: string);
			get highlightedTrigger(): string;
			set highlightedTrigger(value: string);
			get pressedTrigger(): string;
			set pressedTrigger(value: string);
			get disabledTrigger(): string;
			set disabledTrigger(value: string);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Button extends UnityEngine.UI.Selectable {
			get onClick(): UnityEngine.UI.Button.ButtonClickedEvent;
			set onClick(value: UnityEngine.UI.Button.ButtonClickedEvent);
			OnPointerClick(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnSubmit(eventData: UnityEngine.EventSystems.BaseEventData): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum CanvasUpdate { Prelayout = 0, Layout = 1, PostLayout = 2, PreRender = 3, LatePreRender = 4, MaxUpdateValue = 5, }
		export interface ICanvasElement {
			Rebuild(executing: UnityEngine.UI.CanvasUpdate): void;
			LayoutComplete(): void;
			GraphicUpdateComplete(): void;
			IsDestroyed(): boolean;
		}
		export class CanvasUpdateRegistry extends System.Object {
			static get instance(): UnityEngine.UI.CanvasUpdateRegistry;
			static RegisterCanvasElementForLayoutRebuild(element: UnityEngine.UI.ICanvasElement): void;
			static TryRegisterCanvasElementForLayoutRebuild(element: UnityEngine.UI.ICanvasElement): boolean;
			static RegisterCanvasElementForGraphicRebuild(element: UnityEngine.UI.ICanvasElement): void;
			static TryRegisterCanvasElementForGraphicRebuild(element: UnityEngine.UI.ICanvasElement): boolean;
			static UnRegisterCanvasElementForRebuild(element: UnityEngine.UI.ICanvasElement): void;
			static IsRebuildingLayout(): boolean;
			static IsRebuildingGraphics(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ColorBlock {
			get normalColor(): UnityEngine.Color;
			set normalColor(value: UnityEngine.Color);
			get highlightedColor(): UnityEngine.Color;
			set highlightedColor(value: UnityEngine.Color);
			get pressedColor(): UnityEngine.Color;
			set pressedColor(value: UnityEngine.Color);
			get disabledColor(): UnityEngine.Color;
			set disabledColor(value: UnityEngine.Color);
			get colorMultiplier(): number;
			set colorMultiplier(value: number);
			get fadeDuration(): number;
			set fadeDuration(value: number);
			static get defaultColorBlock(): UnityEngine.UI.ColorBlock;
			static op_Equality(point1: UnityEngine.UI.ColorBlock, point2: UnityEngine.UI.ColorBlock): boolean;
			static op_Inequality(point1: UnityEngine.UI.ColorBlock, point2: UnityEngine.UI.ColorBlock): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			Equals(other: UnityEngine.UI.ColorBlock): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DefaultControls extends System.Object {
			static CreatePanel(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
			static CreateButton(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
			static CreateText(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
			static CreateImage(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
			static CreateRawImage(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
			static CreateSlider(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
			static CreateScrollbar(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
			static CreateToggle(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
			static CreateInputField(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
			static CreateDropdown(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
			static CreateScrollView(resources: UnityEngine.UI.DefaultControls.Resources): UnityEngine.GameObject;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Dropdown extends UnityEngine.UI.Selectable {
			get template(): UnityEngine.RectTransform;
			set template(value: UnityEngine.RectTransform);
			get captionText(): UnityEngine.UI.Text;
			set captionText(value: UnityEngine.UI.Text);
			get captionImage(): UnityEngine.UI.Image;
			set captionImage(value: UnityEngine.UI.Image);
			get itemText(): UnityEngine.UI.Text;
			set itemText(value: UnityEngine.UI.Text);
			get itemImage(): UnityEngine.UI.Image;
			set itemImage(value: UnityEngine.UI.Image);
			get options(): any;
			set options(value: any);
			get onValueChanged(): UnityEngine.UI.Dropdown.DropdownEvent;
			set onValueChanged(value: UnityEngine.UI.Dropdown.DropdownEvent);
			get value(): number;
			set value(value: number);
			RefreshShownValue(): void;
			AddOptions(options: any): void;
			AddOptions(options: any): void;
			AddOptions(options: any): void;
			ClearOptions(): void;
			OnPointerClick(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnSubmit(eventData: UnityEngine.EventSystems.BaseEventData): void;
			OnCancel(eventData: UnityEngine.EventSystems.BaseEventData): void;
			Show(): void;
			Hide(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FontData extends System.Object {
			static get defaultFontData(): UnityEngine.UI.FontData;
			get font(): UnityEngine.Font;
			set font(value: UnityEngine.Font);
			get fontSize(): number;
			set fontSize(value: number);
			get fontStyle(): UnityEngine.FontStyle;
			set fontStyle(value: UnityEngine.FontStyle);
			get bestFit(): boolean;
			set bestFit(value: boolean);
			get minSize(): number;
			set minSize(value: number);
			get maxSize(): number;
			set maxSize(value: number);
			get alignment(): UnityEngine.TextAnchor;
			set alignment(value: UnityEngine.TextAnchor);
			get alignByGeometry(): boolean;
			set alignByGeometry(value: boolean);
			get richText(): boolean;
			set richText(value: boolean);
			get horizontalOverflow(): UnityEngine.HorizontalWrapMode;
			set horizontalOverflow(value: UnityEngine.HorizontalWrapMode);
			get verticalOverflow(): UnityEngine.VerticalWrapMode;
			set verticalOverflow(value: UnityEngine.VerticalWrapMode);
			get lineSpacing(): number;
			set lineSpacing(value: number);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FontUpdateTracker extends System.Object {
			static TrackText(t: UnityEngine.UI.Text): void;
			static UntrackText(t: UnityEngine.UI.Text): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Graphic extends UnityEngine.EventSystems.UIBehaviour {
			static get defaultGraphicMaterial(): UnityEngine.Material;
			get color(): UnityEngine.Color;
			set color(value: UnityEngine.Color);
			get raycastTarget(): boolean;
			set raycastTarget(value: boolean);
			get depth(): number;
			get rectTransform(): UnityEngine.RectTransform;
			get canvas(): UnityEngine.Canvas;
			get canvasRenderer(): UnityEngine.CanvasRenderer;
			get defaultMaterial(): UnityEngine.Material;
			get material(): UnityEngine.Material;
			set material(value: UnityEngine.Material);
			get materialForRendering(): UnityEngine.Material;
			get mainTexture(): UnityEngine.Texture;
			SetAllDirty(): void;
			SetLayoutDirty(): void;
			SetVerticesDirty(): void;
			SetMaterialDirty(): void;
			OnCullingChanged(): void;
			Rebuild(update: UnityEngine.UI.CanvasUpdate): void;
			LayoutComplete(): void;
			GraphicUpdateComplete(): void;
			OnRebuildRequested(): void;
			SetNativeSize(): void;
			Raycast(sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera): boolean;
			PixelAdjustPoint(point: UnityEngine.Vector2): UnityEngine.Vector2;
			GetPixelAdjustedRect(): UnityEngine.Rect;
			CrossFadeColor(targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean): void;
			CrossFadeColor(targetColor: UnityEngine.Color, duration: number, ignoreTimeScale: boolean, useAlpha: boolean, useRGB: boolean): void;
			CrossFadeAlpha(alpha: number, duration: number, ignoreTimeScale: boolean): void;
			RegisterDirtyLayoutCallback(action: UnityEngine.Events.UnityAction): void;
			UnregisterDirtyLayoutCallback(action: UnityEngine.Events.UnityAction): void;
			RegisterDirtyVerticesCallback(action: UnityEngine.Events.UnityAction): void;
			UnregisterDirtyVerticesCallback(action: UnityEngine.Events.UnityAction): void;
			RegisterDirtyMaterialCallback(action: UnityEngine.Events.UnityAction): void;
			UnregisterDirtyMaterialCallback(action: UnityEngine.Events.UnityAction): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GraphicRaycaster extends UnityEngine.EventSystems.BaseRaycaster {
			get sortOrderPriority(): number;
			get renderOrderPriority(): number;
			get ignoreReversedGraphics(): boolean;
			set ignoreReversedGraphics(value: boolean);
			get blockingObjects(): UnityEngine.UI.GraphicRaycaster.BlockingObjects;
			set blockingObjects(value: UnityEngine.UI.GraphicRaycaster.BlockingObjects);
			get eventCamera(): UnityEngine.Camera;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GraphicRebuildTracker extends System.Object {
			static TrackGraphic(g: UnityEngine.UI.Graphic): void;
			static UnTrackGraphic(g: UnityEngine.UI.Graphic): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GraphicRegistry extends System.Object {
			static get instance(): UnityEngine.UI.GraphicRegistry;
			static RegisterGraphicForCanvas(c: UnityEngine.Canvas, graphic: UnityEngine.UI.Graphic): void;
			static UnregisterGraphicForCanvas(c: UnityEngine.Canvas, graphic: UnityEngine.UI.Graphic): void;
			static GetGraphicsForCanvas(canvas: UnityEngine.Canvas): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Image extends UnityEngine.UI.MaskableGraphic {
			get sprite(): UnityEngine.Sprite;
			set sprite(value: UnityEngine.Sprite);
			get overrideSprite(): UnityEngine.Sprite;
			set overrideSprite(value: UnityEngine.Sprite);
			get type(): UnityEngine.UI.Image.Type;
			set type(value: UnityEngine.UI.Image.Type);
			get preserveAspect(): boolean;
			set preserveAspect(value: boolean);
			get fillCenter(): boolean;
			set fillCenter(value: boolean);
			get fillMethod(): UnityEngine.UI.Image.FillMethod;
			set fillMethod(value: UnityEngine.UI.Image.FillMethod);
			get fillAmount(): number;
			set fillAmount(value: number);
			get fillClockwise(): boolean;
			set fillClockwise(value: boolean);
			get fillOrigin(): number;
			set fillOrigin(value: number);
			/**[Obsolete]--"eventAlphaThreshold has been deprecated. Use eventMinimumAlphaThreshold instead (UnityUpgradable) -> alphaHitTestMinimumThreshold" */
			get eventAlphaThreshold(): number;
			/**[Obsolete]--"eventAlphaThreshold has been deprecated. Use eventMinimumAlphaThreshold instead (UnityUpgradable) -> alphaHitTestMinimumThreshold" */
			set eventAlphaThreshold(value: number);
			get alphaHitTestMinimumThreshold(): number;
			set alphaHitTestMinimumThreshold(value: number);
			get useSpriteMesh(): boolean;
			set useSpriteMesh(value: boolean);
			static get defaultETC1GraphicMaterial(): UnityEngine.Material;
			get mainTexture(): UnityEngine.Texture;
			get hasBorder(): boolean;
			get pixelsPerUnit(): number;
			get material(): UnityEngine.Material;
			set material(value: UnityEngine.Material);
			get minWidth(): number;
			get preferredWidth(): number;
			get flexibleWidth(): number;
			get minHeight(): number;
			get preferredHeight(): number;
			get flexibleHeight(): number;
			get layoutPriority(): number;
			OnBeforeSerialize(): void;
			OnAfterDeserialize(): void;
			CalculateLayoutInputHorizontal(): void;
			CalculateLayoutInputVertical(): void;
			IsRaycastLocationValid(screenPoint: UnityEngine.Vector2, eventCamera: UnityEngine.Camera): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface IMask {
			Enabled(): boolean;
		}
		export interface IMaskable {
			RecalculateMasking(): void;
		}
		export class InputField extends UnityEngine.UI.Selectable {
			get shouldHideMobileInput(): boolean;
			set shouldHideMobileInput(value: boolean);
			get text(): string;
			set text(value: string);
			get isFocused(): boolean;
			get caretBlinkRate(): number;
			set caretBlinkRate(value: number);
			get caretWidth(): number;
			set caretWidth(value: number);
			get textComponent(): UnityEngine.UI.Text;
			set textComponent(value: UnityEngine.UI.Text);
			get placeholder(): UnityEngine.UI.Graphic;
			set placeholder(value: UnityEngine.UI.Graphic);
			get caretColor(): UnityEngine.Color;
			set caretColor(value: UnityEngine.Color);
			get customCaretColor(): boolean;
			set customCaretColor(value: boolean);
			get selectionColor(): UnityEngine.Color;
			set selectionColor(value: UnityEngine.Color);
			get onEndEdit(): UnityEngine.UI.InputField.SubmitEvent;
			set onEndEdit(value: UnityEngine.UI.InputField.SubmitEvent);
			/**[Obsolete]--"onValueChange has been renamed to onValueChanged" */
			get onValueChange(): UnityEngine.UI.InputField.OnChangeEvent;
			/**[Obsolete]--"onValueChange has been renamed to onValueChanged" */
			set onValueChange(value: UnityEngine.UI.InputField.OnChangeEvent);
			get onValueChanged(): UnityEngine.UI.InputField.OnChangeEvent;
			set onValueChanged(value: UnityEngine.UI.InputField.OnChangeEvent);
			get onValidateInput(): UnityEngine.UI.InputField.OnValidateInput;
			set onValidateInput(value: UnityEngine.UI.InputField.OnValidateInput);
			get characterLimit(): number;
			set characterLimit(value: number);
			get contentType(): UnityEngine.UI.InputField.ContentType;
			set contentType(value: UnityEngine.UI.InputField.ContentType);
			get lineType(): UnityEngine.UI.InputField.LineType;
			set lineType(value: UnityEngine.UI.InputField.LineType);
			get inputType(): UnityEngine.UI.InputField.InputType;
			set inputType(value: UnityEngine.UI.InputField.InputType);
			get touchScreenKeyboard(): UnityEngine.TouchScreenKeyboard;
			get keyboardType(): UnityEngine.TouchScreenKeyboardType;
			set keyboardType(value: UnityEngine.TouchScreenKeyboardType);
			get characterValidation(): UnityEngine.UI.InputField.CharacterValidation;
			set characterValidation(value: UnityEngine.UI.InputField.CharacterValidation);
			get readOnly(): boolean;
			set readOnly(value: boolean);
			get multiLine(): boolean;
			get asteriskChar(): string;
			set asteriskChar(value: string);
			get wasCanceled(): boolean;
			/**[Obsolete][Error]--"caretSelectPosition has been deprecated. Use selectionFocusPosition instead (UnityUpgradable) -> selectionFocusPosition" */
			get caretSelectPosition(): number;
			/**[Obsolete][Error]--"caretSelectPosition has been deprecated. Use selectionFocusPosition instead (UnityUpgradable) -> selectionFocusPosition" */
			set caretSelectPosition(value: number);
			get caretPosition(): number;
			set caretPosition(value: number);
			get selectionAnchorPosition(): number;
			set selectionAnchorPosition(value: number);
			get selectionFocusPosition(): number;
			set selectionFocusPosition(value: number);
			get minWidth(): number;
			get preferredWidth(): number;
			get flexibleWidth(): number;
			get minHeight(): number;
			get preferredHeight(): number;
			get flexibleHeight(): number;
			get layoutPriority(): number;
			MoveTextEnd(shift: boolean): void;
			MoveTextStart(shift: boolean): void;
			/**[Obsolete]--"This function is no longer used. Please use RectTransformUtility.ScreenPointToLocalPointInRectangle() instead." */
			ScreenToLocal(screen: UnityEngine.Vector2): UnityEngine.Vector2;
			OnBeginDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnEndDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			ProcessEvent(e: UnityEngine.Event): void;
			OnUpdateSelected(eventData: UnityEngine.EventSystems.BaseEventData): void;
			ForceLabelUpdate(): void;
			Rebuild(update: UnityEngine.UI.CanvasUpdate): void;
			LayoutComplete(): void;
			GraphicUpdateComplete(): void;
			ActivateInputField(): void;
			OnPointerClick(eventData: UnityEngine.EventSystems.PointerEventData): void;
			DeactivateInputField(): void;
			OnSubmit(eventData: UnityEngine.EventSystems.BaseEventData): void;
			CalculateLayoutInputHorizontal(): void;
			CalculateLayoutInputVertical(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Mask extends UnityEngine.EventSystems.UIBehaviour {
			get rectTransform(): UnityEngine.RectTransform;
			get showMaskGraphic(): boolean;
			set showMaskGraphic(value: boolean);
			get graphic(): UnityEngine.UI.Graphic;
			MaskEnabled(): boolean;
			/**[Obsolete]--"Not used anymore." */
			OnSiblingGraphicEnabledDisabled(): void;
			IsRaycastLocationValid(sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera): boolean;
			GetModifiedMaterial(baseMaterial: UnityEngine.Material): UnityEngine.Material;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MaskableGraphic extends UnityEngine.UI.Graphic {
			get onCullStateChanged(): UnityEngine.UI.MaskableGraphic.CullStateChangedEvent;
			set onCullStateChanged(value: UnityEngine.UI.MaskableGraphic.CullStateChangedEvent);
			get maskable(): boolean;
			set maskable(value: boolean);
			GetModifiedMaterial(baseMaterial: UnityEngine.Material): UnityEngine.Material;
			Cull(clipRect: UnityEngine.Rect, validRect: boolean): void;
			SetClipRect(clipRect: UnityEngine.Rect, validRect: boolean): void;
			/**[Obsolete][Error]--"Not used anymore." */
			ParentMaskStateChanged(): void;
			RecalculateClipping(): void;
			RecalculateMasking(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MaskUtilities extends System.Object {
			constructor();
			static Notify2DMaskStateChanged(mask: UnityEngine.Component): void;
			static NotifyStencilStateChanged(mask: UnityEngine.Component): void;
			static FindRootSortOverrideCanvas(start: UnityEngine.Transform): UnityEngine.Transform;
			static GetStencilDepth(transform: UnityEngine.Transform, stopAfter: UnityEngine.Transform): number;
			static IsDescendantOrSelf(father: UnityEngine.Transform, child: UnityEngine.Transform): boolean;
			static GetRectMaskForClippable(clippable: UnityEngine.UI.IClippable): UnityEngine.UI.RectMask2D;
			static GetRectMasksForClip(clipper: UnityEngine.UI.RectMask2D, masks: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Navigation {
			get mode(): UnityEngine.UI.Navigation.Mode;
			set mode(value: UnityEngine.UI.Navigation.Mode);
			get selectOnUp(): UnityEngine.UI.Selectable;
			set selectOnUp(value: UnityEngine.UI.Selectable);
			get selectOnDown(): UnityEngine.UI.Selectable;
			set selectOnDown(value: UnityEngine.UI.Selectable);
			get selectOnLeft(): UnityEngine.UI.Selectable;
			set selectOnLeft(value: UnityEngine.UI.Selectable);
			get selectOnRight(): UnityEngine.UI.Selectable;
			set selectOnRight(value: UnityEngine.UI.Selectable);
			static get defaultNavigation(): UnityEngine.UI.Navigation;
			Equals(other: UnityEngine.UI.Navigation): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RawImage extends UnityEngine.UI.MaskableGraphic {
			get mainTexture(): UnityEngine.Texture;
			get texture(): UnityEngine.Texture;
			set texture(value: UnityEngine.Texture);
			get uvRect(): UnityEngine.Rect;
			set uvRect(value: UnityEngine.Rect);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RectMask2D extends UnityEngine.EventSystems.UIBehaviour {
			get canvasRect(): UnityEngine.Rect;
			get rectTransform(): UnityEngine.RectTransform;
			IsRaycastLocationValid(sp: UnityEngine.Vector2, eventCamera: UnityEngine.Camera): boolean;
			PerformClipping(): void;
			AddClippable(clippable: UnityEngine.UI.IClippable): void;
			RemoveClippable(clippable: UnityEngine.UI.IClippable): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Scrollbar extends UnityEngine.UI.Selectable {
			get handleRect(): UnityEngine.RectTransform;
			set handleRect(value: UnityEngine.RectTransform);
			get direction(): UnityEngine.UI.Scrollbar.Direction;
			set direction(value: UnityEngine.UI.Scrollbar.Direction);
			get value(): number;
			set value(value: number);
			get size(): number;
			set size(value: number);
			get numberOfSteps(): number;
			set numberOfSteps(value: number);
			get onValueChanged(): UnityEngine.UI.Scrollbar.ScrollEvent;
			set onValueChanged(value: UnityEngine.UI.Scrollbar.ScrollEvent);
			Rebuild(executing: UnityEngine.UI.CanvasUpdate): void;
			LayoutComplete(): void;
			GraphicUpdateComplete(): void;
			OnBeginDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnInitializePotentialDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			SetDirection(direction: UnityEngine.UI.Scrollbar.Direction, includeRectLayouts: boolean): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ScrollRect extends UnityEngine.EventSystems.UIBehaviour {
			get content(): UnityEngine.RectTransform;
			set content(value: UnityEngine.RectTransform);
			get horizontal(): boolean;
			set horizontal(value: boolean);
			get vertical(): boolean;
			set vertical(value: boolean);
			get movementType(): UnityEngine.UI.ScrollRect.MovementType;
			set movementType(value: UnityEngine.UI.ScrollRect.MovementType);
			get elasticity(): number;
			set elasticity(value: number);
			get inertia(): boolean;
			set inertia(value: boolean);
			get decelerationRate(): number;
			set decelerationRate(value: number);
			get scrollSensitivity(): number;
			set scrollSensitivity(value: number);
			get viewport(): UnityEngine.RectTransform;
			set viewport(value: UnityEngine.RectTransform);
			get horizontalScrollbar(): UnityEngine.UI.Scrollbar;
			set horizontalScrollbar(value: UnityEngine.UI.Scrollbar);
			get verticalScrollbar(): UnityEngine.UI.Scrollbar;
			set verticalScrollbar(value: UnityEngine.UI.Scrollbar);
			get horizontalScrollbarVisibility(): UnityEngine.UI.ScrollRect.ScrollbarVisibility;
			set horizontalScrollbarVisibility(value: UnityEngine.UI.ScrollRect.ScrollbarVisibility);
			get verticalScrollbarVisibility(): UnityEngine.UI.ScrollRect.ScrollbarVisibility;
			set verticalScrollbarVisibility(value: UnityEngine.UI.ScrollRect.ScrollbarVisibility);
			get horizontalScrollbarSpacing(): number;
			set horizontalScrollbarSpacing(value: number);
			get verticalScrollbarSpacing(): number;
			set verticalScrollbarSpacing(value: number);
			get onValueChanged(): UnityEngine.UI.ScrollRect.ScrollRectEvent;
			set onValueChanged(value: UnityEngine.UI.ScrollRect.ScrollRectEvent);
			get velocity(): UnityEngine.Vector2;
			set velocity(value: UnityEngine.Vector2);
			get normalizedPosition(): UnityEngine.Vector2;
			set normalizedPosition(value: UnityEngine.Vector2);
			get horizontalNormalizedPosition(): number;
			set horizontalNormalizedPosition(value: number);
			get verticalNormalizedPosition(): number;
			set verticalNormalizedPosition(value: number);
			get minWidth(): number;
			get preferredWidth(): number;
			get flexibleWidth(): number;
			get minHeight(): number;
			get preferredHeight(): number;
			get flexibleHeight(): number;
			get layoutPriority(): number;
			Rebuild(executing: UnityEngine.UI.CanvasUpdate): void;
			LayoutComplete(): void;
			GraphicUpdateComplete(): void;
			StopMovement(): void;
			OnScroll(data: UnityEngine.EventSystems.PointerEventData): void;
			OnInitializePotentialDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnBeginDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnEndDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			CalculateLayoutInputHorizontal(): void;
			CalculateLayoutInputVertical(): void;
			SetLayoutHorizontal(): void;
			SetLayoutVertical(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Selectable extends UnityEngine.EventSystems.UIBehaviour {
			static get allSelectables(): any;
			get navigation(): UnityEngine.UI.Navigation;
			set navigation(value: UnityEngine.UI.Navigation);
			get transition(): UnityEngine.UI.Selectable.Transition;
			set transition(value: UnityEngine.UI.Selectable.Transition);
			get colors(): UnityEngine.UI.ColorBlock;
			set colors(value: UnityEngine.UI.ColorBlock);
			get spriteState(): UnityEngine.UI.SpriteState;
			set spriteState(value: UnityEngine.UI.SpriteState);
			get animationTriggers(): UnityEngine.UI.AnimationTriggers;
			set animationTriggers(value: UnityEngine.UI.AnimationTriggers);
			get targetGraphic(): UnityEngine.UI.Graphic;
			set targetGraphic(value: UnityEngine.UI.Graphic);
			get interactable(): boolean;
			set interactable(value: boolean);
			get image(): UnityEngine.UI.Image;
			set image(value: UnityEngine.UI.Image);
			get animator(): UnityEngine.Animator;
			IsInteractable(): boolean;
			FindSelectable(dir: UnityEngine.Vector3): UnityEngine.UI.Selectable;
			FindSelectableOnLeft(): UnityEngine.UI.Selectable;
			FindSelectableOnRight(): UnityEngine.UI.Selectable;
			FindSelectableOnUp(): UnityEngine.UI.Selectable;
			FindSelectableOnDown(): UnityEngine.UI.Selectable;
			OnMove(eventData: UnityEngine.EventSystems.AxisEventData): void;
			OnPointerDown(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnPointerUp(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnPointerEnter(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnPointerExit(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnSelect(eventData: UnityEngine.EventSystems.BaseEventData): void;
			OnDeselect(eventData: UnityEngine.EventSystems.BaseEventData): void;
			Select(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Slider extends UnityEngine.UI.Selectable {
			get fillRect(): UnityEngine.RectTransform;
			set fillRect(value: UnityEngine.RectTransform);
			get handleRect(): UnityEngine.RectTransform;
			set handleRect(value: UnityEngine.RectTransform);
			get direction(): UnityEngine.UI.Slider.Direction;
			set direction(value: UnityEngine.UI.Slider.Direction);
			get minValue(): number;
			set minValue(value: number);
			get maxValue(): number;
			set maxValue(value: number);
			get wholeNumbers(): boolean;
			set wholeNumbers(value: boolean);
			get value(): number;
			set value(value: number);
			get normalizedValue(): number;
			set normalizedValue(value: number);
			get onValueChanged(): UnityEngine.UI.Slider.SliderEvent;
			set onValueChanged(value: UnityEngine.UI.Slider.SliderEvent);
			Rebuild(executing: UnityEngine.UI.CanvasUpdate): void;
			LayoutComplete(): void;
			GraphicUpdateComplete(): void;
			OnDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnInitializePotentialDrag(eventData: UnityEngine.EventSystems.PointerEventData): void;
			SetDirection(direction: UnityEngine.UI.Slider.Direction, includeRectLayouts: boolean): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SpriteState {
			get highlightedSprite(): UnityEngine.Sprite;
			set highlightedSprite(value: UnityEngine.Sprite);
			get pressedSprite(): UnityEngine.Sprite;
			set pressedSprite(value: UnityEngine.Sprite);
			get disabledSprite(): UnityEngine.Sprite;
			set disabledSprite(value: UnityEngine.Sprite);
			Equals(other: UnityEngine.UI.SpriteState): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StencilMaterial extends System.Object {
			/**[Obsolete][Error]--"Use Material.Add instead." */
			static Add(baseMat: UnityEngine.Material, stencilID: number): UnityEngine.Material;
			static Add(baseMat: UnityEngine.Material, stencilID: number, operation: any, compareFunction: any, colorWriteMask: any): UnityEngine.Material;
			static Add(baseMat: UnityEngine.Material, stencilID: number, operation: any, compareFunction: any, colorWriteMask: any, readMask: number, writeMask: number): UnityEngine.Material;
			static Remove(customMat: UnityEngine.Material): void;
			static ClearAll(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Text extends UnityEngine.UI.MaskableGraphic {
			get cachedTextGenerator(): UnityEngine.TextGenerator;
			get cachedTextGeneratorForLayout(): UnityEngine.TextGenerator;
			get mainTexture(): UnityEngine.Texture;
			get font(): UnityEngine.Font;
			set font(value: UnityEngine.Font);
			get text(): string;
			set text(value: string);
			get supportRichText(): boolean;
			set supportRichText(value: boolean);
			get resizeTextForBestFit(): boolean;
			set resizeTextForBestFit(value: boolean);
			get resizeTextMinSize(): number;
			set resizeTextMinSize(value: number);
			get resizeTextMaxSize(): number;
			set resizeTextMaxSize(value: number);
			get alignment(): UnityEngine.TextAnchor;
			set alignment(value: UnityEngine.TextAnchor);
			get alignByGeometry(): boolean;
			set alignByGeometry(value: boolean);
			get fontSize(): number;
			set fontSize(value: number);
			get horizontalOverflow(): UnityEngine.HorizontalWrapMode;
			set horizontalOverflow(value: UnityEngine.HorizontalWrapMode);
			get verticalOverflow(): UnityEngine.VerticalWrapMode;
			set verticalOverflow(value: UnityEngine.VerticalWrapMode);
			get lineSpacing(): number;
			set lineSpacing(value: number);
			get fontStyle(): UnityEngine.FontStyle;
			set fontStyle(value: UnityEngine.FontStyle);
			get pixelsPerUnit(): number;
			get minWidth(): number;
			get preferredWidth(): number;
			get flexibleWidth(): number;
			get minHeight(): number;
			get preferredHeight(): number;
			get flexibleHeight(): number;
			get layoutPriority(): number;
			static GetTextAnchorPivot(anchor: UnityEngine.TextAnchor): UnityEngine.Vector2;
			FontTextureChanged(): void;
			GetGenerationSettings(extents: UnityEngine.Vector2): UnityEngine.TextGenerationSettings;
			CalculateLayoutInputHorizontal(): void;
			CalculateLayoutInputVertical(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Toggle extends UnityEngine.UI.Selectable {
			toggleTransition: UnityEngine.UI.Toggle.ToggleTransition;
			graphic: UnityEngine.UI.Graphic;
			onValueChanged: UnityEngine.UI.Toggle.ToggleEvent;
			get group(): UnityEngine.UI.ToggleGroup;
			set group(value: UnityEngine.UI.ToggleGroup);
			get isOn(): boolean;
			set isOn(value: boolean);
			Rebuild(executing: UnityEngine.UI.CanvasUpdate): void;
			LayoutComplete(): void;
			GraphicUpdateComplete(): void;
			OnPointerClick(eventData: UnityEngine.EventSystems.PointerEventData): void;
			OnSubmit(eventData: UnityEngine.EventSystems.BaseEventData): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ToggleGroup extends UnityEngine.EventSystems.UIBehaviour {
			get allowSwitchOff(): boolean;
			set allowSwitchOff(value: boolean);
			NotifyToggleOn(toggle: UnityEngine.UI.Toggle): void;
			UnregisterToggle(toggle: UnityEngine.UI.Toggle): void;
			RegisterToggle(toggle: UnityEngine.UI.Toggle): void;
			AnyTogglesOn(): boolean;
			ActiveToggles(): any;
			SetAllTogglesOff(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ClipperRegistry extends System.Object {
			static get instance(): UnityEngine.UI.ClipperRegistry;
			static Register(c: UnityEngine.UI.IClipper): void;
			static Unregister(c: UnityEngine.UI.IClipper): void;
			Cull(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Clipping extends System.Object {
			static FindCullAndClipWorldRect(rectMaskParents: any, validRect: any): UnityEngine.Rect;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface IClipper {
			PerformClipping(): void;
		}
		export interface IClippable {
			RecalculateClipping(): void;
			Cull(clipRect: UnityEngine.Rect, validRect: boolean): void;
			SetClipRect(value: UnityEngine.Rect, validRect: boolean): void;
		}
		export class AspectRatioFitter extends UnityEngine.EventSystems.UIBehaviour {
			get aspectMode(): UnityEngine.UI.AspectRatioFitter.AspectMode;
			set aspectMode(value: UnityEngine.UI.AspectRatioFitter.AspectMode);
			get aspectRatio(): number;
			set aspectRatio(value: number);
			SetLayoutHorizontal(): void;
			SetLayoutVertical(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CanvasScaler extends UnityEngine.EventSystems.UIBehaviour {
			get uiScaleMode(): UnityEngine.UI.CanvasScaler.ScaleMode;
			set uiScaleMode(value: UnityEngine.UI.CanvasScaler.ScaleMode);
			get referencePixelsPerUnit(): number;
			set referencePixelsPerUnit(value: number);
			get scaleFactor(): number;
			set scaleFactor(value: number);
			get referenceResolution(): UnityEngine.Vector2;
			set referenceResolution(value: UnityEngine.Vector2);
			get screenMatchMode(): UnityEngine.UI.CanvasScaler.ScreenMatchMode;
			set screenMatchMode(value: UnityEngine.UI.CanvasScaler.ScreenMatchMode);
			get matchWidthOrHeight(): number;
			set matchWidthOrHeight(value: number);
			get physicalUnit(): UnityEngine.UI.CanvasScaler.Unit;
			set physicalUnit(value: UnityEngine.UI.CanvasScaler.Unit);
			get fallbackScreenDPI(): number;
			set fallbackScreenDPI(value: number);
			get defaultSpriteDPI(): number;
			set defaultSpriteDPI(value: number);
			get dynamicPixelsPerUnit(): number;
			set dynamicPixelsPerUnit(value: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ContentSizeFitter extends UnityEngine.EventSystems.UIBehaviour {
			get horizontalFit(): UnityEngine.UI.ContentSizeFitter.FitMode;
			set horizontalFit(value: UnityEngine.UI.ContentSizeFitter.FitMode);
			get verticalFit(): UnityEngine.UI.ContentSizeFitter.FitMode;
			set verticalFit(value: UnityEngine.UI.ContentSizeFitter.FitMode);
			SetLayoutHorizontal(): void;
			SetLayoutVertical(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GridLayoutGroup extends UnityEngine.UI.LayoutGroup {
			get startCorner(): UnityEngine.UI.GridLayoutGroup.Corner;
			set startCorner(value: UnityEngine.UI.GridLayoutGroup.Corner);
			get startAxis(): UnityEngine.UI.GridLayoutGroup.Axis;
			set startAxis(value: UnityEngine.UI.GridLayoutGroup.Axis);
			get cellSize(): UnityEngine.Vector2;
			set cellSize(value: UnityEngine.Vector2);
			get spacing(): UnityEngine.Vector2;
			set spacing(value: UnityEngine.Vector2);
			get constraint(): UnityEngine.UI.GridLayoutGroup.Constraint;
			set constraint(value: UnityEngine.UI.GridLayoutGroup.Constraint);
			get constraintCount(): number;
			set constraintCount(value: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HorizontalLayoutGroup extends UnityEngine.UI.HorizontalOrVerticalLayoutGroup {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class HorizontalOrVerticalLayoutGroup extends UnityEngine.UI.LayoutGroup {
			get spacing(): number;
			set spacing(value: number);
			get childForceExpandWidth(): boolean;
			set childForceExpandWidth(value: boolean);
			get childForceExpandHeight(): boolean;
			set childForceExpandHeight(value: boolean);
			get childControlWidth(): boolean;
			set childControlWidth(value: boolean);
			get childControlHeight(): boolean;
			set childControlHeight(value: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface ILayoutElement {
			CalculateLayoutInputHorizontal(): void;
			CalculateLayoutInputVertical(): void;
		}
		export interface ILayoutController {
			SetLayoutHorizontal(): void;
			SetLayoutVertical(): void;
		}
		export interface ILayoutGroup {
		}
		export interface ILayoutSelfController {
		}
		export interface ILayoutIgnorer {
		}
		export class LayoutElement extends UnityEngine.EventSystems.UIBehaviour {
			get ignoreLayout(): boolean;
			set ignoreLayout(value: boolean);
			get minWidth(): number;
			set minWidth(value: number);
			get minHeight(): number;
			set minHeight(value: number);
			get preferredWidth(): number;
			set preferredWidth(value: number);
			get preferredHeight(): number;
			set preferredHeight(value: number);
			get flexibleWidth(): number;
			set flexibleWidth(value: number);
			get flexibleHeight(): number;
			set flexibleHeight(value: number);
			get layoutPriority(): number;
			set layoutPriority(value: number);
			CalculateLayoutInputHorizontal(): void;
			CalculateLayoutInputVertical(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LayoutGroup extends UnityEngine.EventSystems.UIBehaviour {
			get padding(): UnityEngine.RectOffset;
			set padding(value: UnityEngine.RectOffset);
			get childAlignment(): UnityEngine.TextAnchor;
			set childAlignment(value: UnityEngine.TextAnchor);
			get minWidth(): number;
			get preferredWidth(): number;
			get flexibleWidth(): number;
			get minHeight(): number;
			get preferredHeight(): number;
			get flexibleHeight(): number;
			get layoutPriority(): number;
			CalculateLayoutInputHorizontal(): void;
			CalculateLayoutInputVertical(): void;
			SetLayoutHorizontal(): void;
			SetLayoutVertical(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LayoutRebuilder extends System.Object {
			get transform(): UnityEngine.Transform;
			constructor();
			static ForceRebuildLayoutImmediate(layoutRoot: UnityEngine.RectTransform): void;
			static MarkLayoutForRebuild(rect: UnityEngine.RectTransform): void;
			IsDestroyed(): boolean;
			Rebuild(executing: UnityEngine.UI.CanvasUpdate): void;
			LayoutComplete(): void;
			GraphicUpdateComplete(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class LayoutUtility extends System.Object {
			static GetMinSize(rect: UnityEngine.RectTransform, axis: number): number;
			static GetPreferredSize(rect: UnityEngine.RectTransform, axis: number): number;
			static GetFlexibleSize(rect: UnityEngine.RectTransform, axis: number): number;
			static GetMinWidth(rect: UnityEngine.RectTransform): number;
			static GetPreferredWidth(rect: UnityEngine.RectTransform): number;
			static GetFlexibleWidth(rect: UnityEngine.RectTransform): number;
			static GetMinHeight(rect: UnityEngine.RectTransform): number;
			static GetPreferredHeight(rect: UnityEngine.RectTransform): number;
			static GetFlexibleHeight(rect: UnityEngine.RectTransform): number;
			static GetLayoutProperty(rect: UnityEngine.RectTransform, property: System.Func$2, defaultValue: number): number;
			static GetLayoutProperty(rect: UnityEngine.RectTransform, property: System.Func$2, defaultValue: number, source: any): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class VerticalLayoutGroup extends UnityEngine.UI.HorizontalOrVerticalLayoutGroup {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface IMaterialModifier {
			GetModifiedMaterial(baseMaterial: UnityEngine.Material): UnityEngine.Material;
		}
		export class VertexHelper extends System.Object {
			get currentVertCount(): number;
			get currentIndexCount(): number;
			constructor();
			constructor(m: UnityEngine.Mesh);
			Dispose(): void;
			Clear(): void;
			PopulateUIVertex(vertex: any, i: number): void;
			SetUIVertex(vertex: UnityEngine.UIVertex, i: number): void;
			FillMesh(mesh: UnityEngine.Mesh): void;
			AddVert(position: UnityEngine.Vector3, color: UnityEngine.Color32, uv0: UnityEngine.Vector2, uv1: UnityEngine.Vector2, normal: UnityEngine.Vector3, tangent: UnityEngine.Vector4): void;
			AddVert(position: UnityEngine.Vector3, color: UnityEngine.Color32, uv0: UnityEngine.Vector2): void;
			AddVert(v: UnityEngine.UIVertex): void;
			AddTriangle(idx0: number, idx1: number, idx2: number): void;
			AddUIVertexQuad(verts: UnityEngine.UIVertex[]): void;
			AddUIVertexStream(verts: any, indices: any): void;
			AddUIVertexTriangleStream(verts: any): void;
			GetUIVertexStream(stream: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BaseVertexEffect extends System.Object {
			/**[Obsolete][Error]--"Use BaseMeshEffect.ModifyMeshes instead" */
			ModifyVertices(vertices: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BaseMeshEffect extends UnityEngine.EventSystems.UIBehaviour {
			ModifyMesh(mesh: UnityEngine.Mesh): void;
			ModifyMesh(vh: UnityEngine.UI.VertexHelper): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface IVertexModifier {
			/**[Obsolete][Error]--"use IMeshModifier.ModifyMesh (VertexHelper verts)  instead" */
			ModifyVertices(verts: any): void;
		}
		export interface IMeshModifier {
			/**[Obsolete]--"use IMeshModifier.ModifyMesh (VertexHelper verts) instead" */
			ModifyMesh(mesh: UnityEngine.Mesh): void;
			ModifyMesh(verts: UnityEngine.UI.VertexHelper): void;
		}
		export class Outline extends UnityEngine.UI.Shadow {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PositionAsUV1 extends UnityEngine.UI.BaseMeshEffect {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Shadow extends UnityEngine.UI.BaseMeshEffect {
			get effectColor(): UnityEngine.Color;
			set effectColor(value: UnityEngine.Color);
			get effectDistance(): UnityEngine.Vector2;
			set effectDistance(value: UnityEngine.Vector2);
			get useGraphicAlpha(): boolean;
			set useGraphicAlpha(value: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.UI.Button {
		export class ButtonClickedEvent extends UnityEngine.Events.UnityEvent {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.UI.DefaultControls {
		export class Resources {
			standard: UnityEngine.Sprite;
			background: UnityEngine.Sprite;
			inputField: UnityEngine.Sprite;
			knob: UnityEngine.Sprite;
			checkmark: UnityEngine.Sprite;
			dropdown: UnityEngine.Sprite;
			mask: UnityEngine.Sprite;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.UI.Dropdown {
		export class OptionData extends System.Object {
			get text(): string;
			set text(value: string);
			get image(): UnityEngine.Sprite;
			set image(value: UnityEngine.Sprite);
			constructor();
			constructor(text: string);
			constructor(image: UnityEngine.Sprite);
			constructor(text: string, image: UnityEngine.Sprite);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class OptionDataList extends System.Object {
			get options(): any;
			set options(value: any);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DropdownEvent extends UnityEngine.Events.UnityEvent$1 {
			constructor();
			/**inherited method */
			AddListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			RemoveListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			Invoke(arg0: number): void;
			/**inherited method */
			GetPersistentEventCount(): number;
			/**inherited method */
			GetPersistentTarget(index: number): any;
			/**inherited method */
			GetPersistentMethodName(index: number): string;
			/**inherited method */
			SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
			/**inherited method */
			RemoveAllListeners(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.UI.GraphicRaycaster {
		export enum BlockingObjects { None = 0, TwoD = 1, ThreeD = 2, All = 3, }

	}
	export namespace UnityEngine.UI.Image {
		export enum Type { Simple = 0, Sliced = 1, Tiled = 2, Filled = 3, }
		export enum FillMethod { Horizontal = 0, Vertical = 1, Radial90 = 2, Radial180 = 3, Radial360 = 4, }
		export enum OriginHorizontal { Left = 0, Right = 1, }
		export enum OriginVertical { Bottom = 0, Top = 1, }
		export enum Origin90 { BottomLeft = 0, TopLeft = 1, TopRight = 2, BottomRight = 3, }
		export enum Origin180 { Bottom = 0, Left = 1, Top = 2, Right = 3, }
		export enum Origin360 { Bottom = 0, Right = 1, Top = 2, Left = 3, }

	}
	export namespace UnityEngine.UI.InputField {
		export enum ContentType { Standard = 0, Autocorrected = 1, IntegerNumber = 2, DecimalNumber = 3, Alphanumeric = 4, Name = 5, EmailAddress = 6, Password = 7, Pin = 8, Custom = 9, }
		export enum InputType { Standard = 0, AutoCorrect = 1, Password = 2, }
		export enum CharacterValidation { None = 0, Integer = 1, Decimal = 2, Alphanumeric = 3, Name = 4, EmailAddress = 5, }
		export enum LineType { SingleLine = 0, MultiLineSubmit = 1, MultiLineNewline = 2, }
		export class OnValidateInput extends Function {
		}
		export class SubmitEvent extends UnityEngine.Events.UnityEvent$1 {
			constructor();
			/**inherited method */
			AddListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			RemoveListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			Invoke(arg0: string): void;
			/**inherited method */
			GetPersistentEventCount(): number;
			/**inherited method */
			GetPersistentTarget(index: number): any;
			/**inherited method */
			GetPersistentMethodName(index: number): string;
			/**inherited method */
			SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
			/**inherited method */
			RemoveAllListeners(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class OnChangeEvent extends UnityEngine.Events.UnityEvent$1 {
			constructor();
			/**inherited method */
			AddListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			RemoveListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			Invoke(arg0: string): void;
			/**inherited method */
			GetPersistentEventCount(): number;
			/**inherited method */
			GetPersistentTarget(index: number): any;
			/**inherited method */
			GetPersistentMethodName(index: number): string;
			/**inherited method */
			SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
			/**inherited method */
			RemoveAllListeners(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.UI.MaskableGraphic {
		export class CullStateChangedEvent extends UnityEngine.Events.UnityEvent$1 {
			constructor();
			/**inherited method */
			AddListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			RemoveListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			Invoke(arg0: boolean): void;
			/**inherited method */
			GetPersistentEventCount(): number;
			/**inherited method */
			GetPersistentTarget(index: number): any;
			/**inherited method */
			GetPersistentMethodName(index: number): string;
			/**inherited method */
			SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
			/**inherited method */
			RemoveAllListeners(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.UI.Navigation {
		export enum Mode { None = 0, Horizontal = 1, Vertical = 2, Automatic = 3, Explicit = 4, }

	}
	export namespace UnityEngine.UI.Scrollbar {
		export enum Direction { LeftToRight = 0, RightToLeft = 1, BottomToTop = 2, TopToBottom = 3, }
		export class ScrollEvent extends UnityEngine.Events.UnityEvent$1 {
			constructor();
			/**inherited method */
			AddListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			RemoveListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			Invoke(arg0: number): void;
			/**inherited method */
			GetPersistentEventCount(): number;
			/**inherited method */
			GetPersistentTarget(index: number): any;
			/**inherited method */
			GetPersistentMethodName(index: number): string;
			/**inherited method */
			SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
			/**inherited method */
			RemoveAllListeners(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.UI.ScrollRect {
		export enum MovementType { Unrestricted = 0, Elastic = 1, Clamped = 2, }
		export enum ScrollbarVisibility { Permanent = 0, AutoHide = 1, AutoHideAndExpandViewport = 2, }
		export class ScrollRectEvent extends UnityEngine.Events.UnityEvent$1 {
			constructor();
			/**inherited method */
			AddListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			RemoveListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			Invoke(arg0: UnityEngine.Vector2): void;
			/**inherited method */
			GetPersistentEventCount(): number;
			/**inherited method */
			GetPersistentTarget(index: number): any;
			/**inherited method */
			GetPersistentMethodName(index: number): string;
			/**inherited method */
			SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
			/**inherited method */
			RemoveAllListeners(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.UI.Selectable {
		export enum Transition { None = 0, ColorTint = 1, SpriteSwap = 2, Animation = 3, }

	}
	export namespace UnityEngine.UI.Slider {
		export enum Direction { LeftToRight = 0, RightToLeft = 1, BottomToTop = 2, TopToBottom = 3, }
		export class SliderEvent extends UnityEngine.Events.UnityEvent$1 {
			constructor();
			/**inherited method */
			AddListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			RemoveListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			Invoke(arg0: number): void;
			/**inherited method */
			GetPersistentEventCount(): number;
			/**inherited method */
			GetPersistentTarget(index: number): any;
			/**inherited method */
			GetPersistentMethodName(index: number): string;
			/**inherited method */
			SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
			/**inherited method */
			RemoveAllListeners(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.UI.Toggle {
		export enum ToggleTransition { None = 0, Fade = 1, }
		export class ToggleEvent extends UnityEngine.Events.UnityEvent$1 {
			constructor();
			/**inherited method */
			AddListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			RemoveListener(call: UnityEngine.Events.UnityAction$1): void;
			/**inherited method */
			Invoke(arg0: boolean): void;
			/**inherited method */
			GetPersistentEventCount(): number;
			/**inherited method */
			GetPersistentTarget(index: number): any;
			/**inherited method */
			GetPersistentMethodName(index: number): string;
			/**inherited method */
			SetPersistentListenerState(index: number, state: UnityEngine.Events.UnityEventCallState): void;
			/**inherited method */
			RemoveAllListeners(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.UI.AspectRatioFitter {
		export enum AspectMode { None = 0, WidthControlsHeight = 1, HeightControlsWidth = 2, FitInParent = 3, EnvelopeParent = 4, }

	}
	export namespace UnityEngine.UI.CanvasScaler {
		export enum ScaleMode { ConstantPixelSize = 0, ScaleWithScreenSize = 1, ConstantPhysicalSize = 2, }
		export enum ScreenMatchMode { MatchWidthOrHeight = 0, Expand = 1, Shrink = 2, }
		export enum Unit { Centimeters = 0, Millimeters = 1, Inches = 2, Points = 3, Picas = 4, }

	}
	export namespace UnityEngine.UI.ContentSizeFitter {
		export enum FitMode { Unconstrained = 0, MinSize = 1, PreferredSize = 2, }

	}
	export namespace UnityEngine.UI.GridLayoutGroup {
		export enum Corner { UpperLeft = 0, UpperRight = 1, LowerLeft = 2, LowerRight = 3, }
		export enum Axis { Horizontal = 0, Vertical = 1, }
		export enum Constraint { Flexible = 0, FixedColumnCount = 1, FixedRowCount = 2, }

	}
	export namespace UnityEngine.Networking.LogFilter {
		export enum FilterLevel { Developer = 0, Debug = 1, Info = 2, Warn = 3, Error = 4, Fatal = 5, SetInScripting = -1, }

	}
	export namespace UnityEngine.Networking.NetworkBehaviour {
		export class CmdDelegate extends Function {
		}

	}
	export namespace UnityEngine.Networking.NetworkConnection {
		export class PacketStat extends System.Object {
			msgType: number;
			count: number;
			bytes: number;
			constructor();
			constructor(s: UnityEngine.Networking.NetworkConnection.PacketStat);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.Networking.NetworkIdentity {
		export class ClientAuthorityCallback extends Function {
		}

	}
	export namespace UnityEngine.Networking.NetworkMigrationManager {
		export enum SceneChangeOption { StayInOnlineScene = 0, SwitchToOfflineScene = 1, }
		export class PendingPlayerInfo {
			netId: UnityEngine.Networking.NetworkInstanceId;
			playerControllerId: number;
			obj: UnityEngine.GameObject;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ConnectionPendingPlayers {
			players: any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace UnityEngine.Networking.NetworkProximityChecker {
		export enum CheckMethod { Physics3D = 0, Physics2D = 1, }

	}
	export namespace UnityEngine.Networking.NetworkTransform {
		export enum TransformSyncMode { SyncNone = 0, SyncTransform = 1, SyncRigidbody2D = 2, SyncRigidbody3D = 3, SyncCharacterController = 4, }
		export enum AxisSyncMode { None = 0, AxisX = 1, AxisY = 2, AxisZ = 3, AxisXY = 4, AxisXZ = 5, AxisYZ = 6, AxisXYZ = 7, }
		export enum CompressionSyncMode { None = 0, Low = 1, High = 2, }
		export class ClientMoveCallback3D extends Function {
		}
		export class ClientMoveCallback2D extends Function {
		}

	}
	export namespace UnityEngine.Networking.SyncList$1 {
		export class SyncListChanged extends Function {
		}
		export enum Operation { OP_ADD = 0, OP_CLEAR = 1, OP_INSERT = 2, OP_REMOVE = 3, OP_REMOVEAT = 4, OP_SET = 5, OP_DIRTY = 6, }

	}
	export namespace Puerts {
		export class JsBase extends System.Object {
			get id(): string;
			set id(value: string);
			get JsEnv(): Puerts.JsEnv;
			get Value(): string;
			constructor(id: string, env: Puerts.JsEnv);
			Dispose(): void;
			Delete(): void;
			IsAlive(): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class JsObject extends Puerts.JsBase {
			get Length(): number;
			constructor(id: string, env: Puerts.JsEnv);
			IsCast(key: any, type: System.Type): boolean;
			IsCastInPath(path: string, type: System.Type): boolean;
			Contains(path: string): boolean;
			GetKeys(): string[];
			Call(name: string, args: any): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RefUtils extends System.Object {
			static IsAlive(env: Puerts.JsEnv): boolean;
			static Load(env: Puerts.JsEnv, chunk: string, args: any): void;
			static NewObject(env: Puerts.JsEnv): Puerts.JsObject;
			static Value(env: Puerts.JsEnv, id: string): string;
			static IsCast(env: Puerts.JsEnv, id: string, key: any, type: System.Type): boolean;
			static IsCastInPath(env: Puerts.JsEnv, id: string, path: string, type: System.Type): boolean;
			static Contains(env: Puerts.JsEnv, id: string, path: string): boolean;
			static Keys(env: Puerts.JsEnv, id: string): string[];
			static Length(env: Puerts.JsEnv, id: string): number;
			static Call(env: Puerts.JsEnv, id: string, name: string, args: any): void;
			static Ref(env: Puerts.JsEnv, id: string): boolean;
			static Release(env: Puerts.JsEnv, id: string, count?: number): boolean;
			static Delete(env: Puerts.JsEnv, id: string): boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class RefExtend extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ArgumentHelper {
			constructor(jsEnvIdx: number, isolate: System.IntPtr, info: System.IntPtr, index: number);
			IsMatch(expectJsType: Puerts.JsValueType, expectCsType: System.Type, isByRef: boolean, isOut: boolean): boolean;
			GetChar(isByRef: boolean): string;
			SetByRefValue(val: string): void;
			SetByRefValue(val: System.SByte): void;
			SetByRefValue(val: number): void;
			SetByRefValue(val: number): void;
			SetByRefValue(val: number): void;
			SetByRefValue(val: number): void;
			SetByRefValue(val: number): void;
			SetByRefValue(val: number): void;
			SetByRefValue(val: number): void;
			SetByRefValue(val: number): void;
			SetByRefValue(val: number): void;
			SetByRefValue(val: boolean): void;
			SetByRefValue(val: string): void;
			SetByRefValue(val: System.DateTime): void;
			GetSByte(isByRef: boolean): System.SByte;
			GetByte(isByRef: boolean): number;
			GetInt16(isByRef: boolean): number;
			GetUInt16(isByRef: boolean): number;
			GetInt32(isByRef: boolean): number;
			GetUInt32(isByRef: boolean): number;
			GetInt64(isByRef: boolean): number;
			GetUInt64(isByRef: boolean): number;
			GetDouble(isByRef: boolean): number;
			GetFloat(isByRef: boolean): number;
			GetBoolean(isByRef: boolean): boolean;
			GetString(isByRef: boolean): string;
			GetDateTime(isByRef: boolean): System.DateTime;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ResultHelper {
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GeneralGetter extends Function {
		}
		export class GeneralGetterManager extends System.Object {
			static GetJsTypeMask(type: System.Type): Puerts.JsValueType;
			GetTranslateFunc(type: System.Type): Puerts.GeneralGetter;
			RegisterGetter(type: System.Type, generalGetter: Puerts.GeneralGetter): void;
			GetSelf(Self: System.IntPtr): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GeneralSetter extends Function {
		}
		export class GeneralSetterManager extends System.Object {
			constructor(jsEnv: Puerts.JsEnv);
			GetTranslateFunc(type: System.Type): Puerts.GeneralSetter;
			RegisterSetter(type: System.Type, generalSetter: Puerts.GeneralSetter): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GenericDelegate extends System.Object {
			Action(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FunctionCallback extends Function {
		}
		export class ConstructorCallback extends Function {
		}
		export class JsEnv extends System.Object {
			get Index(): number;
			constructor();
			constructor(loader: Puerts.ILoader, debugPort?: number);
			Eval(chunk: string, chunkName?: string): void;
			AddLazyStaticWrapLoader(type: System.Type, lazyStaticWrapLoader: System.Func$1): void;
			RegisterGeneralGetSet(type: System.Type, getter: Puerts.GeneralGetter, setter: Puerts.GeneralSetter): void;
			LowMemoryNotification(): void;
			Tick(): void;
			WaitDebugger(): void;
			Dispose(): void;
			/**extension method */
			IsAlive(): boolean;
			/**extension method */
			Load(chunk: string, args: any): void;
			/**extension method */
			NewObject(): Puerts.JsObject;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface ILoader {
			FileExists(filepath: string): boolean;
			ReadFile(filepath: string, debugpath: any): string;
		}
		export class DefaultLoader extends System.Object {
			constructor();
			constructor(root: string);
			FileExists(filepath: string): boolean;
			ReadFile(filepath: string, debugpath: any): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CallInfo extends System.Object {
			Isolate: System.IntPtr;
			Info: System.IntPtr;
			Self: System.IntPtr;
			Length: number;
			JsTypes: Puerts.JsValueType[];
			Values: any;
			NativePtrs: System.IntPtr[];
			constructor();
			Init(isolate: System.IntPtr, info: System.IntPtr, self: System.IntPtr, len: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Parameters extends System.Object {
			constructor(parameterInfos: System.Reflection.ParameterInfo[], generalGetterManager: Puerts.GeneralGetterManager, generalSetterManager: Puerts.GeneralSetterManager);
			IsMatch(callInfo: Puerts.CallInfo): boolean;
			GetArguments(callInfo: Puerts.CallInfo): any;
			FillByRefParameters(callInfo: Puerts.CallInfo): void;
			ClearArguments(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class OverloadReflectionWrap extends System.Object {
			constructor(methodBase: System.Reflection.MethodBase, generalGetterManager: Puerts.GeneralGetterManager, generalSetterManager: Puerts.GeneralSetterManager);
			IsMatch(callInfo: Puerts.CallInfo): boolean;
			Invoke(callInfo: Puerts.CallInfo): void;
			Construct(callInfo: Puerts.CallInfo): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DelegateConstructWrap extends System.Object {
			constructor(delegateType: System.Type, generalGetterManager: Puerts.GeneralGetterManager);
			Construct(isolate: System.IntPtr, info: System.IntPtr, argumentsLen: number): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MethodReflectionWrap extends System.Object {
			constructor(name: string, overloads: any);
			Invoke(isolate: System.IntPtr, info: System.IntPtr, self: System.IntPtr, argumentsLen: number): void;
			Construct(isolate: System.IntPtr, info: System.IntPtr, argumentsLen: number): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ArrayBuffer extends System.Object {
			Bytes: Uint8Array;
			constructor(bytes: Uint8Array);
			constructor(ptr: System.IntPtr, length: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class NativeValueApi extends System.Object {
			static GetValueFromArgument: Puerts.IGetValueFromJs;
			static GetValueFromResult: Puerts.IGetValueFromJs;
			static SetValueToIndexResult: Puerts.ISetValueToJs;
			static SetValueToResult: Puerts.ISetValueToJs;
			static SetValueToByRefArgument: Puerts.ISetValueToJs;
			static SetValueToArgument: Puerts.ISetValueToJs;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface ISetValueToJs {
			SetObject(isolate: System.IntPtr, holder: System.IntPtr, classID: number, self: System.IntPtr): void;
			SetNumber(isolate: System.IntPtr, holder: System.IntPtr, number: number): void;
			SetString(isolate: System.IntPtr, holder: System.IntPtr, str: string): void;
			SetBigInt(isolate: System.IntPtr, holder: System.IntPtr, number: number): void;
			SetBoolean(isolate: System.IntPtr, holder: System.IntPtr, b: boolean): void;
			SetDate(isolate: System.IntPtr, holder: System.IntPtr, date: number): void;
			SetNull(isolate: System.IntPtr, holder: System.IntPtr): void;
			SetArrayBuffer(isolate: System.IntPtr, holder: System.IntPtr, arrayBuffer: Puerts.ArrayBuffer): void;
		}
		export interface IGetValueFromJs {
			GetJsValueType(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): Puerts.JsValueType;
			GetNumber(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): number;
			GetDate(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): number;
			GetString(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): string;
			GetBoolean(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): boolean;
			GetBigInt(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): number;
			GetObject(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): System.IntPtr;
			GetTypeId(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): number;
			GetFunction(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): System.IntPtr;
			GetArrayBuffer(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): Puerts.ArrayBuffer;
		}
		export class GetValueFromResultImpl extends System.Object {
			constructor();
			GetBigInt(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): number;
			GetBoolean(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): boolean;
			GetDate(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): number;
			GetFunction(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): System.IntPtr;
			GetJsValueType(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): Puerts.JsValueType;
			GetNumber(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): number;
			GetObject(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): System.IntPtr;
			GetTypeId(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): number;
			GetString(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): string;
			GetArrayBuffer(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): Puerts.ArrayBuffer;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class GetValueFromArgumentImpl extends System.Object {
			constructor();
			GetBigInt(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): number;
			GetBoolean(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): boolean;
			GetDate(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): number;
			GetFunction(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): System.IntPtr;
			GetJsValueType(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): Puerts.JsValueType;
			GetNumber(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): number;
			GetObject(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): System.IntPtr;
			GetTypeId(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): number;
			GetString(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): string;
			GetArrayBuffer(isolate: System.IntPtr, holder: System.IntPtr, isByRef: boolean): Puerts.ArrayBuffer;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SetValueToIndexResultImpl extends System.Object {
			constructor();
			SetArrayBuffer(isolate: System.IntPtr, holder: System.IntPtr, arrayBuffer: Puerts.ArrayBuffer): void;
			SetBigInt(isolate: System.IntPtr, holder: System.IntPtr, number: number): void;
			SetBoolean(isolate: System.IntPtr, holder: System.IntPtr, b: boolean): void;
			SetDate(isolate: System.IntPtr, holder: System.IntPtr, date: number): void;
			SetNull(isolate: System.IntPtr, holder: System.IntPtr): void;
			SetNumber(isolate: System.IntPtr, holder: System.IntPtr, number: number): void;
			SetObject(isolate: System.IntPtr, holder: System.IntPtr, classID: number, self: System.IntPtr): void;
			SetString(isolate: System.IntPtr, holder: System.IntPtr, str: string): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SetValueToResultImpl extends System.Object {
			constructor();
			SetArrayBuffer(isolate: System.IntPtr, holder: System.IntPtr, arrayBuffer: Puerts.ArrayBuffer): void;
			SetBigInt(isolate: System.IntPtr, holder: System.IntPtr, number: number): void;
			SetBoolean(isolate: System.IntPtr, holder: System.IntPtr, b: boolean): void;
			SetDate(isolate: System.IntPtr, holder: System.IntPtr, date: number): void;
			SetNull(isolate: System.IntPtr, holder: System.IntPtr): void;
			SetNumber(isolate: System.IntPtr, holder: System.IntPtr, number: number): void;
			SetObject(isolate: System.IntPtr, holder: System.IntPtr, classID: number, self: System.IntPtr): void;
			SetString(isolate: System.IntPtr, holder: System.IntPtr, str: string): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SetValueToByRefArgumentImpl extends System.Object {
			constructor();
			SetArrayBuffer(isolate: System.IntPtr, holder: System.IntPtr, arrayBuffer: Puerts.ArrayBuffer): void;
			SetBigInt(isolate: System.IntPtr, holder: System.IntPtr, number: number): void;
			SetBoolean(isolate: System.IntPtr, holder: System.IntPtr, b: boolean): void;
			SetDate(isolate: System.IntPtr, holder: System.IntPtr, date: number): void;
			SetNull(isolate: System.IntPtr, holder: System.IntPtr): void;
			SetNumber(isolate: System.IntPtr, holder: System.IntPtr, number: number): void;
			SetObject(isolate: System.IntPtr, holder: System.IntPtr, classID: number, self: System.IntPtr): void;
			SetString(isolate: System.IntPtr, holder: System.IntPtr, str: string): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SetValueToArgumentImpl extends System.Object {
			constructor();
			SetArrayBuffer(isolate: System.IntPtr, holder: System.IntPtr, arrayBuffer: Puerts.ArrayBuffer): void;
			SetBigInt(isolate: System.IntPtr, holder: System.IntPtr, number: number): void;
			SetBoolean(isolate: System.IntPtr, holder: System.IntPtr, b: boolean): void;
			SetDate(isolate: System.IntPtr, holder: System.IntPtr, date: number): void;
			SetNull(isolate: System.IntPtr, holder: System.IntPtr): void;
			SetNumber(isolate: System.IntPtr, holder: System.IntPtr, number: number): void;
			SetObject(isolate: System.IntPtr, holder: System.IntPtr, classID: number, self: System.IntPtr): void;
			SetString(isolate: System.IntPtr, holder: System.IntPtr, str: string): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ObjectPool extends System.Object {
			constructor();
			Clear(): void;
			FindOrAddObject(obj: any): number;
			AddBoxedValueType(obj: any): number;
			TryGetValue(index: number, obj: any): boolean;
			Get(index: number): any;
			Remove(index: number): any;
			ReplaceValueType(index: number, o: any): any;
			Check(checkPos: number, maxCheck: number, checker: System.Func$2, reverseMap: any): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MonoPInvokeCallbackAttribute extends System.Attribute {
			constructor(t: System.Type);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class V8FunctionCallback extends Function {
		}
		export class V8ConstructorCallback extends Function {
		}
		export class V8DestructorCallback extends Function {
		}
		export class V8IndexedGetterCallback extends Function {
		}
		export class V8IndexedSetterCallback extends Function {
		}
		export class LogCallback extends Function {
		}
		export enum JsValueType { NullOrUndefined = 1, BigInt = 2, Number = 4, String = 8, Boolean = 16, NativeObject = 32, JsObject = 64, Array = 128, Function = 256, Date = 512, ArrayBuffer = 1024, Unknow = 2048, Any = 1983, }
		export class PuertsDLL extends System.Object {
			constructor();
			static GetLibVersion(): number;
			static CreateJSEngine(): System.IntPtr;
			static DestroyJSEngine(isolate: System.IntPtr): void;
			static SetGlobalFunction(isolate: System.IntPtr, name: string, v8FunctionCallback: Puerts.V8FunctionCallback, data: number): void;
			static GetLastExceptionInfo(isolate: System.IntPtr, strlen: any): System.IntPtr;
			static GetLastExceptionInfo(isolate: System.IntPtr): string;
			static LowMemoryNotification(isolate: System.IntPtr): void;
			static SetGeneralDestructor(isolate: System.IntPtr, generalDestructor: Puerts.V8DestructorCallback): void;
			static Eval(isolate: System.IntPtr, code: string, path: string): System.IntPtr;
			static EvalChecked(isolate: System.IntPtr, code: string, path: string): System.IntPtr;
			static RegisterClass(isolate: System.IntPtr, BaseTypeId: number, fullName: string, constructor: Puerts.V8ConstructorCallback, destructor: Puerts.V8DestructorCallback, data: number): number;
			static RegisterStruct(isolate: System.IntPtr, BaseTypeId: number, fullName: string, constructor: Puerts.V8ConstructorCallback, destructor: Puerts.V8DestructorCallback, data: number, size: number): number;
			static RegisterFunction(isolate: System.IntPtr, classID: number, name: string, isStatic: boolean, callback: Puerts.V8FunctionCallback, data: number): boolean;
			static RegisterProperty(isolate: System.IntPtr, classID: number, name: string, isStatic: boolean, getter: Puerts.V8FunctionCallback, getterData: number, setter: Puerts.V8FunctionCallback, setterData: number, dontDelete: boolean): boolean;
			static RegisterIndexedProperty(isolate: System.IntPtr, classID: number, getter: Puerts.V8IndexedGetterCallback, setter: Puerts.V8IndexedSetterCallback, data: number): boolean;
			static ReturnClass(isolate: System.IntPtr, info: System.IntPtr, classID: number): void;
			static ReturnObject(isolate: System.IntPtr, info: System.IntPtr, classID: number, self: System.IntPtr): void;
			static ReturnNumber(isolate: System.IntPtr, info: System.IntPtr, number: number): void;
			static ReturnString(isolate: System.IntPtr, info: System.IntPtr, str: string): void;
			static ReturnBigInt(isolate: System.IntPtr, info: System.IntPtr, number: number): void;
			static ReturnBoolean(isolate: System.IntPtr, info: System.IntPtr, b: boolean): void;
			static ReturnDate(isolate: System.IntPtr, info: System.IntPtr, date: number): void;
			static ReturnNull(isolate: System.IntPtr, info: System.IntPtr): void;
			static GetArgumentValue(info: System.IntPtr, index: number): System.IntPtr;
			static GetJsValueType(isolate: System.IntPtr, value: System.IntPtr, isByRef: boolean): Puerts.JsValueType;
			static GetArgumentType(isolate: System.IntPtr, info: System.IntPtr, index: number, isByRef: boolean): Puerts.JsValueType;
			static GetNumberFromValue(isolate: System.IntPtr, value: System.IntPtr, isByRef: boolean): number;
			static GetDateFromValue(isolate: System.IntPtr, value: System.IntPtr, isByRef: boolean): number;
			static GetStringFromValue(isolate: System.IntPtr, value: System.IntPtr, len: any, isByRef: boolean): System.IntPtr;
			static GetStringFromValue(isolate: System.IntPtr, value: System.IntPtr, isByRef: boolean): string;
			static GetBooleanFromValue(isolate: System.IntPtr, value: System.IntPtr, isByRef: boolean): boolean;
			static ValueIsBigInt(isolate: System.IntPtr, value: System.IntPtr, isByRef: boolean): boolean;
			static GetBigIntFromValue(isolate: System.IntPtr, value: System.IntPtr, isByRef: boolean): number;
			static GetBigIntFromValueChecked(isolate: System.IntPtr, value: System.IntPtr, isByRef: boolean): number;
			static GetObjectFromValue(isolate: System.IntPtr, value: System.IntPtr, isByRef: boolean): System.IntPtr;
			static GetTypeIdFromValue(isolate: System.IntPtr, value: System.IntPtr, isByRef: boolean): number;
			static GetFunctionFromValue(isolate: System.IntPtr, value: System.IntPtr, isByRef: boolean): System.IntPtr;
			static SetNumberToOutValue(isolate: System.IntPtr, value: System.IntPtr, number: number): void;
			static SetDateToOutValue(isolate: System.IntPtr, value: System.IntPtr, date: number): void;
			static SetStringToOutValue(isolate: System.IntPtr, value: System.IntPtr, str: string): void;
			static SetBooleanToOutValue(isolate: System.IntPtr, value: System.IntPtr, b: boolean): void;
			static SetBigIntToOutValue(isolate: System.IntPtr, value: System.IntPtr, bigInt: number): void;
			static SetObjectToOutValue(isolate: System.IntPtr, value: System.IntPtr, classId: number, ptr: System.IntPtr): void;
			static SetNullToOutValue(isolate: System.IntPtr, value: System.IntPtr): void;
			static ThrowException(isolate: System.IntPtr, message: Uint8Array): void;
			static ThrowException(isolate: System.IntPtr, message: string): void;
			static PushNullForJSFunction(func: System.IntPtr): void;
			static PushDateForJSFunction(func: System.IntPtr, dateValue: number): void;
			static PushBooleanForJSFunction(func: System.IntPtr, b: boolean): void;
			static PushBigIntForJSFunction(func: System.IntPtr, l: number): void;
			static PushStringForJSFunction(func: System.IntPtr, str: string): void;
			static PushNumberForJSFunction(func: System.IntPtr, d: number): void;
			static PushObjectForJSFunction(func: System.IntPtr, classId: number, objectId: System.IntPtr): void;
			static InvokeJSFunction(func: System.IntPtr, hasResult: boolean): System.IntPtr;
			static GetFunctionLastExceptionInfo(func: System.IntPtr, len: any): System.IntPtr;
			static GetFunctionLastExceptionInfo(func: System.IntPtr): string;
			static ReleaseJSFunction(isolate: System.IntPtr, func: System.IntPtr): void;
			static GetResultType(resultInfo: System.IntPtr): Puerts.JsValueType;
			static GetNumberFromResult(resultInfo: System.IntPtr): number;
			static GetDateFromResult(resultInfo: System.IntPtr): number;
			static GetStringFromResult(resultInfo: System.IntPtr, len: any): System.IntPtr;
			static GetStringFromResult(resultInfo: System.IntPtr): string;
			static GetBooleanFromResult(resultInfo: System.IntPtr): boolean;
			static ResultIsBigInt(resultInfo: System.IntPtr): boolean;
			static GetBigIntFromResult(resultInfo: System.IntPtr): number;
			static GetBigIntFromResultCheck(resultInfo: System.IntPtr): number;
			static GetObjectFromResult(resultInfo: System.IntPtr): System.IntPtr;
			static GetTypeIdFromResult(resultInfo: System.IntPtr): number;
			static GetFunctionFromResult(resultInfo: System.IntPtr): System.IntPtr;
			static ResetResult(resultInfo: System.IntPtr): void;
			static PropertyReturnObject(isolate: System.IntPtr, info: System.IntPtr, classID: number, self: System.IntPtr): void;
			static PropertyReturnNumber(isolate: System.IntPtr, info: System.IntPtr, number: number): void;
			static PropertyReturnString(isolate: System.IntPtr, info: System.IntPtr, str: string): void;
			static PropertyReturnBigInt(isolate: System.IntPtr, info: System.IntPtr, number: number): void;
			static PropertyReturnBoolean(isolate: System.IntPtr, info: System.IntPtr, b: boolean): void;
			static PropertyReturnDate(isolate: System.IntPtr, info: System.IntPtr, date: number): void;
			static PropertyReturnNull(isolate: System.IntPtr, info: System.IntPtr): void;
			static CreateInspector(isolate: System.IntPtr, port: number): void;
			static DestroyInspector(isolate: System.IntPtr): void;
			static InspectorTick(isolate: System.IntPtr): boolean;
			static SetLogCallback(log: Puerts.LogCallback, logWarning: Puerts.LogCallback, logError: Puerts.LogCallback): void;
			static ReturnArrayBuffer(isolate: System.IntPtr, info: System.IntPtr, bytes: Uint8Array, Length: number): void;
			static PropertyReturnArrayBuffer(isolate: System.IntPtr, info: System.IntPtr, bytes: Uint8Array, Length: number): void;
			static SetArrayBufferToOutValue(isolate: System.IntPtr, value: System.IntPtr, bytes: Uint8Array, length: number): void;
			static PushArrayBufferForJSFunction(func: System.IntPtr, bytes: Uint8Array, length: number): void;
			static GetArrayBufferFromValue(isolate: System.IntPtr, value: System.IntPtr, length: any, isOut: boolean): System.IntPtr;
			static GetArrayBufferFromResult(func: System.IntPtr, length: any): System.IntPtr;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StaticTranslate$1 extends System.Object {
			static Set: Puerts.StaticTranslate$1.PushFunc;
			static Get: Puerts.StaticTranslate$1.GetFunc;
			static ReplaceDefault(pushFunc: Puerts.StaticTranslate$1.PushFunc, getFunc: Puerts.StaticTranslate$1.GetFunc): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PrimitiveTypeTranslate extends System.Object {
			static PushChar(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, i: string): void;
			static GetChar(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): string;
			static PushSByte(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, i: System.SByte): void;
			static GetSByte(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): System.SByte;
			static PushByte(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, i: number): void;
			static GetByte(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): number;
			static PushInt16(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, i: number): void;
			static GetInt16(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): number;
			static PushUInt16(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, i: number): void;
			static GetUInt16(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): number;
			static PushInt32(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, i: number): void;
			static GetInt32(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): number;
			static PushUInt32(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, i: number): void;
			static GetUInt32(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): number;
			static PushInt64(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, i: number): void;
			static GetInt64(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): number;
			static PushUInt64(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, i: number): void;
			static GetUInt64(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): number;
			static PushDouble(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, i: number): void;
			static GetDouble(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): number;
			static PushFloat(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, i: number): void;
			static GetFloat(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): number;
			static PushBoolean(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, i: boolean): void;
			static GetBoolean(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): boolean;
			static PushString(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, i: string): void;
			static GetString(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): string;
			static PushDateTime(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, date: System.DateTime): void;
			static GetDateTime(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): System.DateTime;
			static PushArrayBuffer(jsEnvIdx: number, isolate: System.IntPtr, setValueApi: Puerts.ISetValueToJs, holder: System.IntPtr, arrayBuffer: Puerts.ArrayBuffer): void;
			static GetArrayBuffer(jsEnvIdx: number, isolate: System.IntPtr, getValueApi: Puerts.IGetValueFromJs, holder: System.IntPtr, isByRef: boolean): Puerts.ArrayBuffer;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class PropertyRegisterInfo {
			IsStatic: boolean;
			Getter: Puerts.V8FunctionCallback;
			Setter: Puerts.V8FunctionCallback;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MethodKey {
			Name: string;
			IsStatic: boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TypeRegisterInfo extends System.Object {
			BlittableCopy: boolean;
			Constructor: Puerts.V8ConstructorCallback;
			Methods: any;
			Properties: any;
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TypeExtensions extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Utils extends System.Object {
			static TwoIntToLong(a: number, b: number): number;
			static LongToTwoInt(c: number, a: any, b: any): void;
			static GetObjectPtr(jsEnvIdx: number, type: System.Type, obj: any): System.IntPtr;
			static GetSelf(jsEnvIdx: number, self: System.IntPtr): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ConfigureAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BindingAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class TypingAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class BlittableCopyAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FilterAttribute extends System.Attribute {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class Configure extends System.Object {
			static GetConfigureByTags(tags: any): any;
			static GetFilters(): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace JsManager {
		export class JsLoader extends System.Object {
			constructor();
			Dispose(): void;
			Add(filepath: string, script: string): void;
			Remove(filepath: string): boolean;
			FileExists(filepath: string): boolean;
			ReadFile(filepath: string, debugpath: any): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}

	}
	export namespace Puerts.StaticTranslate$1 {
		export class PushFunc extends Function {
		}
		export class GetFunc extends Function {
		}

	}
	export namespace Mono.Data.Sqlite {
		export class SqliteCommandBuilder {
			get DataAdapter(): Mono.Data.Sqlite.SqliteDataAdapter;
			set DataAdapter(value: Mono.Data.Sqlite.SqliteDataAdapter);
			get CatalogLocation(): any;
			set CatalogLocation(value: any);
			get CatalogSeparator(): string;
			set CatalogSeparator(value: string);
			get QuotePrefix(): string;
			set QuotePrefix(value: string);
			get QuoteSuffix(): string;
			set QuoteSuffix(value: string);
			get SchemaSeparator(): string;
			set SchemaSeparator(value: string);
			constructor();
			constructor(adp: Mono.Data.Sqlite.SqliteDataAdapter);
			GetDeleteCommand(): Mono.Data.Sqlite.SqliteCommand;
			GetDeleteCommand(useColumnsForParameterNames: boolean): Mono.Data.Sqlite.SqliteCommand;
			/**inherited method */
			GetDeleteCommand(): any;
			/**inherited method */
			GetDeleteCommand(useColumnsForParameterNames: boolean): any;
			GetUpdateCommand(): Mono.Data.Sqlite.SqliteCommand;
			GetUpdateCommand(useColumnsForParameterNames: boolean): Mono.Data.Sqlite.SqliteCommand;
			/**inherited method */
			GetUpdateCommand(): any;
			/**inherited method */
			GetUpdateCommand(useColumnsForParameterNames: boolean): any;
			GetInsertCommand(): Mono.Data.Sqlite.SqliteCommand;
			GetInsertCommand(useColumnsForParameterNames: boolean): Mono.Data.Sqlite.SqliteCommand;
			/**inherited method */
			GetInsertCommand(): any;
			/**inherited method */
			GetInsertCommand(useColumnsForParameterNames: boolean): any;
			/**inherited method */
			QuoteIdentifier(unquotedIdentifier: string): string;
			/**inherited method */
			UnquoteIdentifier(quotedIdentifier: string): string;
			/**inherited method */
			RefreshSchema(): void;
			/**inherited method */
			add_Disposed(value: System.EventHandler): void;
			/**inherited method */
			remove_Disposed(value: System.EventHandler): void;
			/**inherited method */
			Dispose(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			CreateObjRef(requestedType: System.Type): any;
			/**inherited method */
			GetLifetimeService(): any;
			/**inherited method */
			InitializeLifetimeService(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SqliteCommand {
			get CommandText(): string;
			set CommandText(value: string);
			get CommandTimeout(): number;
			set CommandTimeout(value: number);
			get CommandType(): System.Data.CommandType;
			set CommandType(value: System.Data.CommandType);
			get Connection(): Mono.Data.Sqlite.SqliteConnection;
			set Connection(value: Mono.Data.Sqlite.SqliteConnection);
			get Parameters(): Mono.Data.Sqlite.SqliteParameterCollection;
			get Transaction(): Mono.Data.Sqlite.SqliteTransaction;
			set Transaction(value: Mono.Data.Sqlite.SqliteTransaction);
			get UpdatedRowSource(): System.Data.UpdateRowSource;
			set UpdatedRowSource(value: System.Data.UpdateRowSource);
			get DesignTimeVisible(): boolean;
			set DesignTimeVisible(value: boolean);
			constructor();
			constructor(commandText: string);
			constructor(commandText: string, connection: Mono.Data.Sqlite.SqliteConnection);
			constructor(connection: Mono.Data.Sqlite.SqliteConnection);
			constructor(commandText: string, connection: Mono.Data.Sqlite.SqliteConnection, transaction: Mono.Data.Sqlite.SqliteTransaction);
			/**inherited method */
			Cancel(): void;
			CreateParameter(): Mono.Data.Sqlite.SqliteParameter;
			/**inherited method */
			CreateParameter(): any;
			ExecuteReader(behavior: System.Data.CommandBehavior): Mono.Data.Sqlite.SqliteDataReader;
			ExecuteReader(): Mono.Data.Sqlite.SqliteDataReader;
			/**inherited method */
			ExecuteReader(): any;
			/**inherited method */
			ExecuteReader(behavior: System.Data.CommandBehavior): any;
			/**inherited method */
			ExecuteNonQuery(): number;
			/**inherited method */
			ExecuteScalar(): any;
			/**inherited method */
			Prepare(): void;
			Clone(): any;
			/**inherited method */
			ExecuteNonQueryAsync(): any;
			/**inherited method */
			ExecuteNonQueryAsync(cancellationToken: any): any;
			/**inherited method */
			ExecuteReaderAsync(): any;
			/**inherited method */
			ExecuteReaderAsync(cancellationToken: any): any;
			/**inherited method */
			ExecuteReaderAsync(behavior: System.Data.CommandBehavior): any;
			/**inherited method */
			ExecuteReaderAsync(behavior: System.Data.CommandBehavior, cancellationToken: any): any;
			/**inherited method */
			ExecuteScalarAsync(): any;
			/**inherited method */
			ExecuteScalarAsync(cancellationToken: any): any;
			/**inherited method */
			add_Disposed(value: System.EventHandler): void;
			/**inherited method */
			remove_Disposed(value: System.EventHandler): void;
			/**inherited method */
			Dispose(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			CreateObjRef(requestedType: System.Type): any;
			/**inherited method */
			GetLifetimeService(): any;
			/**inherited method */
			InitializeLifetimeService(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SqliteConnection {
			get ConnectionString(): string;
			set ConnectionString(value: string);
			get DataSource(): string;
			get Database(): string;
			get DefaultTimeout(): number;
			set DefaultTimeout(value: number);
			get ServerVersion(): string;
			static get SQLiteVersion(): string;
			get State(): System.Data.ConnectionState;
			constructor();
			constructor(connectionString: string);
			constructor(connection: Mono.Data.Sqlite.SqliteConnection);
			static CreateFile(databaseFileName: string): void;
			static ClearPool(connection: Mono.Data.Sqlite.SqliteConnection): void;
			static ClearAllPools(): void;
			/**inherited method */
			add_StateChange(value: System.Data.StateChangeEventHandler): void;
			/**inherited method */
			remove_StateChange(value: System.Data.StateChangeEventHandler): void;
			add_Update(value: Mono.Data.Sqlite.SQLiteUpdateEventHandler): void;
			remove_Update(value: Mono.Data.Sqlite.SQLiteUpdateEventHandler): void;
			add_Commit(value: Mono.Data.Sqlite.SQLiteCommitHandler): void;
			remove_Commit(value: Mono.Data.Sqlite.SQLiteCommitHandler): void;
			add_RollBack(value: System.EventHandler): void;
			remove_RollBack(value: System.EventHandler): void;
			Clone(): any;
			/**[Obsolete]--"Use one of the standard BeginTransaction methods, this one will be removed soon" */
			BeginTransaction(isolationLevel: System.Data.IsolationLevel, deferredLock: boolean): Mono.Data.Sqlite.SqliteTransaction;
			/**[Obsolete]--"Use one of the standard BeginTransaction methods, this one will be removed soon" */
			BeginTransaction(deferredLock: boolean): Mono.Data.Sqlite.SqliteTransaction;
			BeginTransaction(isolationLevel: System.Data.IsolationLevel): Mono.Data.Sqlite.SqliteTransaction;
			BeginTransaction(): Mono.Data.Sqlite.SqliteTransaction;
			/**inherited method */
			BeginTransaction(): any;
			/**inherited method */
			BeginTransaction(isolationLevel: System.Data.IsolationLevel): any;
			/**inherited method */
			ChangeDatabase(databaseName: string): void;
			/**inherited method */
			Close(): void;
			CreateCommand(): Mono.Data.Sqlite.SqliteCommand;
			/**inherited method */
			CreateCommand(): any;
			/**inherited method */
			EnlistTransaction(transaction: any): void;
			/**inherited method */
			Open(): void;
			ChangePassword(newPassword: string): void;
			ChangePassword(newPassword: Uint8Array): void;
			SetPassword(databasePassword: string): void;
			SetPassword(databasePassword: Uint8Array): void;
			/**inherited method */
			GetSchema(): System.Data.DataTable;
			/**inherited method */
			GetSchema(collectionName: string): System.Data.DataTable;
			/**inherited method */
			GetSchema(collectionName: string, restrictionValues: string[]): System.Data.DataTable;
			/**inherited method */
			OpenAsync(): any;
			/**inherited method */
			OpenAsync(cancellationToken: any): any;
			/**inherited method */
			add_Disposed(value: System.EventHandler): void;
			/**inherited method */
			remove_Disposed(value: System.EventHandler): void;
			/**inherited method */
			Dispose(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			CreateObjRef(requestedType: System.Type): any;
			/**inherited method */
			GetLifetimeService(): any;
			/**inherited method */
			InitializeLifetimeService(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum SynchronizationModes { Normal = 0, Full = 1, Off = 2, }
		export enum UpdateEventType { Delete = 9, Insert = 18, Update = 23, }
		export class UpdateEventArgs extends System.EventArgs {
			Database: string;
			Table: string;
			Event: Mono.Data.Sqlite.UpdateEventType;
			RowId: number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class CommitEventArgs extends System.EventArgs {
			AbortTransaction: boolean;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SqliteConnectionStringBuilder {
			get Version(): number;
			set Version(value: number);
			get SyncMode(): Mono.Data.Sqlite.SynchronizationModes;
			set SyncMode(value: Mono.Data.Sqlite.SynchronizationModes);
			get UseUTF16Encoding(): boolean;
			set UseUTF16Encoding(value: boolean);
			get Pooling(): boolean;
			set Pooling(value: boolean);
			get BinaryGUID(): boolean;
			set BinaryGUID(value: boolean);
			get DataSource(): string;
			set DataSource(value: string);
			get Uri(): string;
			set Uri(value: string);
			get DefaultTimeout(): number;
			set DefaultTimeout(value: number);
			get Enlist(): boolean;
			set Enlist(value: boolean);
			get FailIfMissing(): boolean;
			set FailIfMissing(value: boolean);
			get LegacyFormat(): boolean;
			set LegacyFormat(value: boolean);
			get ReadOnly(): boolean;
			set ReadOnly(value: boolean);
			get Password(): string;
			set Password(value: string);
			get PageSize(): number;
			set PageSize(value: number);
			get MaxPageCount(): number;
			set MaxPageCount(value: number);
			get CacheSize(): number;
			set CacheSize(value: number);
			get DateTimeFormat(): Mono.Data.Sqlite.SQLiteDateFormats;
			set DateTimeFormat(value: Mono.Data.Sqlite.SQLiteDateFormats);
			get JournalMode(): Mono.Data.Sqlite.SQLiteJournalModeEnum;
			set JournalMode(value: Mono.Data.Sqlite.SQLiteJournalModeEnum);
			get DefaultIsolationLevel(): System.Data.IsolationLevel;
			set DefaultIsolationLevel(value: System.Data.IsolationLevel);
			constructor();
			constructor(connectionString: string);
			/**inherited method */
			TryGetValue(keyword: string, value: any): boolean;
			/**inherited method */
			Add(keyword: string, value: any): void;
			/**inherited method */
			Clear(): void;
			/**inherited method */
			ContainsKey(keyword: string): boolean;
			/**inherited method */
			EquivalentTo(connectionStringBuilder: any): boolean;
			/**inherited method */
			Remove(keyword: string): boolean;
			/**inherited method */
			ShouldSerialize(keyword: string): boolean;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SqliteConvert extends System.Object {
			static ToUTF8(sourceText: string): Uint8Array;
			ToUTF8(dateTimeValue: System.DateTime): Uint8Array;
			static UTF8ToString(nativestring: System.IntPtr, nativestringlen: number): string;
			static Split(source: string, separator: string): string[];
			static ToBoolean(source: any): boolean;
			static ToBoolean(source: string): boolean;
			ToString(nativestring: System.IntPtr, nativestringlen: number): string;
			ToString(dateValue: System.DateTime): string;
			/**inherited method */
			ToString(): string;
			ToDateTime(dateText: string): System.DateTime;
			ToDateTime(julianDay: number): System.DateTime;
			ToJulianDay(value: System.DateTime): number;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum TypeAffinity { Uninitialized = 0, Int64 = 1, Double = 2, Text = 3, Blob = 4, Null = 5, DateTime = 10, None = 11, }
		export enum SQLiteDateFormats { Ticks = 0, ISO8601 = 1, JulianDay = 2, }
		export enum SQLiteJournalModeEnum { Delete = 0, Persist = 1, Off = 2, }
		export class SqliteDataAdapter {
			get SelectCommand(): Mono.Data.Sqlite.SqliteCommand;
			set SelectCommand(value: Mono.Data.Sqlite.SqliteCommand);
			get InsertCommand(): Mono.Data.Sqlite.SqliteCommand;
			set InsertCommand(value: Mono.Data.Sqlite.SqliteCommand);
			get UpdateCommand(): Mono.Data.Sqlite.SqliteCommand;
			set UpdateCommand(value: Mono.Data.Sqlite.SqliteCommand);
			get DeleteCommand(): Mono.Data.Sqlite.SqliteCommand;
			set DeleteCommand(value: Mono.Data.Sqlite.SqliteCommand);
			constructor();
			constructor(cmd: Mono.Data.Sqlite.SqliteCommand);
			constructor(commandText: string, connection: Mono.Data.Sqlite.SqliteConnection);
			constructor(commandText: string, connectionString: string);
			add_RowUpdating(value: System.EventHandler$1): void;
			remove_RowUpdating(value: System.EventHandler$1): void;
			add_RowUpdated(value: System.EventHandler$1): void;
			remove_RowUpdated(value: System.EventHandler$1): void;
			/**inherited method */
			FillSchema(dataTable: System.Data.DataTable, schemaType: System.Data.SchemaType): System.Data.DataTable;
			/**inherited method */
			FillSchema(dataSet: System.Data.DataSet, schemaType: System.Data.SchemaType): System.Data.DataTable[];
			/**inherited method */
			FillSchema(dataSet: System.Data.DataSet, schemaType: System.Data.SchemaType, srcTable: string): System.Data.DataTable[];
			/**inherited method */
			Fill(dataSet: System.Data.DataSet): number;
			/**inherited method */
			Fill(dataSet: System.Data.DataSet, srcTable: string): number;
			/**inherited method */
			Fill(dataSet: System.Data.DataSet, startRecord: number, maxRecords: number, srcTable: string): number;
			/**inherited method */
			Fill(dataTable: System.Data.DataTable): number;
			/**inherited method */
			Fill(startRecord: number, maxRecords: number, dataTables: System.Data.DataTable[]): number;
			/**inherited method */
			GetFillParameters(): System.Data.IDataParameter[];
			/**inherited method */
			Update(dataSet: System.Data.DataSet): number;
			/**inherited method */
			Update(dataRows: System.Data.DataRow[]): number;
			/**inherited method */
			Update(dataTable: System.Data.DataTable): number;
			/**inherited method */
			Update(dataSet: System.Data.DataSet, srcTable: string): number;
			/**inherited method */
			ShouldSerializeAcceptChangesDuringFill(): boolean;
			/**inherited method */
			ResetFillLoadOption(): void;
			/**inherited method */
			ShouldSerializeFillLoadOption(): boolean;
			/**inherited method */
			add_FillError(value: System.Data.FillErrorEventHandler): void;
			/**inherited method */
			remove_FillError(value: System.Data.FillErrorEventHandler): void;
			/**inherited method */
			add_Disposed(value: System.EventHandler): void;
			/**inherited method */
			remove_Disposed(value: System.EventHandler): void;
			/**inherited method */
			Dispose(): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			CreateObjRef(requestedType: System.Type): any;
			/**inherited method */
			GetLifetimeService(): any;
			/**inherited method */
			InitializeLifetimeService(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SqliteDataReader {
			get Depth(): number;
			get FieldCount(): number;
			get VisibleFieldCount(): number;
			get HasRows(): boolean;
			get IsClosed(): boolean;
			get RecordsAffected(): number;
			/**inherited method */
			Close(): void;
			/**inherited method */
			GetEnumerator(): any;
			/**inherited method */
			GetBoolean(i: number): boolean;
			/**inherited method */
			GetByte(i: number): number;
			/**inherited method */
			GetBytes(i: number, fieldOffset: number, buffer: Uint8Array, bufferoffset: number, length: number): number;
			/**inherited method */
			GetChar(i: number): string;
			/**inherited method */
			GetChars(i: number, fieldoffset: number, buffer: string[], bufferoffset: number, length: number): number;
			/**inherited method */
			GetDataTypeName(i: number): string;
			/**inherited method */
			GetDateTime(i: number): System.DateTime;
			/**inherited method */
			GetDecimal(i: number): System.Decimal;
			/**inherited method */
			GetDouble(i: number): number;
			/**inherited method */
			GetFieldType(i: number): System.Type;
			/**inherited method */
			GetFloat(i: number): number;
			/**inherited method */
			GetGuid(i: number): System.Guid;
			/**inherited method */
			GetInt16(i: number): number;
			/**inherited method */
			GetInt32(i: number): number;
			/**inherited method */
			GetInt64(i: number): number;
			/**inherited method */
			GetName(i: number): string;
			/**inherited method */
			GetOrdinal(name: string): number;
			/**inherited method */
			GetSchemaTable(): System.Data.DataTable;
			/**inherited method */
			GetString(i: number): string;
			/**inherited method */
			GetValue(i: number): any;
			/**inherited method */
			GetValues(values: any): number;
			/**inherited method */
			IsDBNull(i: number): boolean;
			/**inherited method */
			NextResult(): boolean;
			/**inherited method */
			Read(): boolean;
			/**inherited method */
			Dispose(): void;
			/**inherited method */
			GetData(ordinal: number): any;
			/**inherited method */
			GetProviderSpecificFieldType(ordinal: number): System.Type;
			/**inherited method */
			GetProviderSpecificValue(ordinal: number): any;
			/**inherited method */
			GetProviderSpecificValues(values: any): number;
			/**inherited method */
			GetStream(ordinal: number): System.IO.Stream;
			/**inherited method */
			GetTextReader(ordinal: number): System.IO.TextReader;
			/**inherited method */
			IsDBNullAsync(ordinal: number): any;
			/**inherited method */
			IsDBNullAsync(ordinal: number, cancellationToken: any): any;
			/**inherited method */
			ReadAsync(): any;
			/**inherited method */
			ReadAsync(cancellationToken: any): any;
			/**inherited method */
			NextResultAsync(): any;
			/**inherited method */
			NextResultAsync(cancellationToken: any): any;
			/**inherited method */
			CreateObjRef(requestedType: System.Type): any;
			/**inherited method */
			GetLifetimeService(): any;
			/**inherited method */
			InitializeLifetimeService(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SqliteDataSourceEnumerator {
			constructor();
			/**inherited method */
			GetDataSources(): System.Data.DataTable;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum SQLiteErrorCode { Ok = 0, Error = 1, Internal = 2, Perm = 3, Abort = 4, Busy = 5, Locked = 6, NoMem = 7, ReadOnly = 8, Interrupt = 9, IOErr = 10, Corrupt = 11, NotFound = 12, Full = 13, CantOpen = 14, Protocol = 15, Empty = 16, Schema = 17, TooBig = 18, Constraint = 19, Mismatch = 20, Misuse = 21, NOLFS = 22, Auth = 23, Format = 24, Range = 25, NotADatabase = 26, Row = 100, Done = 101, }
		export class SqliteFactory {
			static Instance: Mono.Data.Sqlite.SqliteFactory;
			constructor();
			/**inherited method */
			CreateCommand(): any;
			/**inherited method */
			CreateCommandBuilder(): any;
			/**inherited method */
			CreateConnection(): any;
			/**inherited method */
			CreateConnectionStringBuilder(): any;
			/**inherited method */
			CreateDataAdapter(): any;
			/**inherited method */
			CreateParameter(): any;
			/**inherited method */
			CreatePermission(state: any): System.Security.CodeAccessPermission;
			/**inherited method */
			CreateDataSourceEnumerator(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SqliteFunctionAttribute extends System.Attribute {
			get Name(): string;
			set Name(value: string);
			get Arguments(): number;
			set Arguments(value: number);
			get FuncType(): Mono.Data.Sqlite.FunctionType;
			set FuncType(value: Mono.Data.Sqlite.FunctionType);
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SqliteFunction extends System.Object {
			get SqliteConvert(): Mono.Data.Sqlite.SqliteConvert;
			static RegisterFunction(typ: System.Type): void;
			Invoke(args: any): any;
			Step(args: any, stepNumber: number, contextData: any): void;
			Final(contextData: any): any;
			Compare(param1: string, param2: string): number;
			Dispose(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SqliteFunctionEx extends Mono.Data.Sqlite.SqliteFunction {
			constructor();
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum FunctionType { Scalar = 0, Aggregate = 1, Collation = 2, }
		export enum CollationTypeEnum { Binary = 1, NoCase = 2, Reverse = 3, Custom = 0, }
		export enum CollationEncodingEnum { UTF8 = 1, UTF16LE = 2, UTF16BE = 3, }
		export class CollationSequence {
			Name: string;
			Type: Mono.Data.Sqlite.CollationTypeEnum;
			Encoding: Mono.Data.Sqlite.CollationEncodingEnum;
			Compare(s1: string, s2: string): number;
			Compare(c1: string[], c2: string[]): number;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SqliteMetaDataCollectionNames extends System.Object {
			static Catalogs: string;
			static Columns: string;
			static Indexes: string;
			static IndexColumns: string;
			static Tables: string;
			static Views: string;
			static ViewColumns: string;
			static ForeignKeys: string;
			static Triggers: string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SqliteParameterCollection {
			get IsSynchronized(): boolean;
			get IsFixedSize(): boolean;
			get IsReadOnly(): boolean;
			get SyncRoot(): any;
			get Count(): number;
			/**inherited method */
			GetEnumerator(): any;
			Add(parameterName: string, parameterType: System.Data.DbType, parameterSize: number, sourceColumn: string): Mono.Data.Sqlite.SqliteParameter;
			Add(parameterName: string, parameterType: System.Data.DbType, parameterSize: number): Mono.Data.Sqlite.SqliteParameter;
			Add(parameterName: string, parameterType: System.Data.DbType): Mono.Data.Sqlite.SqliteParameter;
			Add(parameter: Mono.Data.Sqlite.SqliteParameter): number;
			/**inherited method */
			Add(value: any): number;
			AddWithValue(parameterName: string, value: any): Mono.Data.Sqlite.SqliteParameter;
			AddRange(values: Mono.Data.Sqlite.SqliteParameter[]): void;
			/**inherited method */
			AddRange(values: System.Array): void;
			/**inherited method */
			Clear(): void;
			/**inherited method */
			Contains(parameterName: string): boolean;
			/**inherited method */
			Contains(value: any): boolean;
			/**inherited method */
			CopyTo(array: System.Array, index: number): void;
			/**inherited method */
			IndexOf(parameterName: string): number;
			/**inherited method */
			IndexOf(value: any): number;
			/**inherited method */
			Insert(index: number, value: any): void;
			/**inherited method */
			Remove(value: any): void;
			/**inherited method */
			RemoveAt(parameterName: string): void;
			/**inherited method */
			RemoveAt(index: number): void;
			/**inherited method */
			CreateObjRef(requestedType: System.Type): any;
			/**inherited method */
			GetLifetimeService(): any;
			/**inherited method */
			InitializeLifetimeService(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SqliteParameter {
			get IsNullable(): boolean;
			set IsNullable(value: boolean);
			get DbType(): System.Data.DbType;
			set DbType(value: System.Data.DbType);
			get Direction(): System.Data.ParameterDirection;
			set Direction(value: System.Data.ParameterDirection);
			get ParameterName(): string;
			set ParameterName(value: string);
			get Size(): number;
			set Size(value: number);
			get SourceColumn(): string;
			set SourceColumn(value: string);
			get SourceColumnNullMapping(): boolean;
			set SourceColumnNullMapping(value: boolean);
			get SourceVersion(): System.Data.DataRowVersion;
			set SourceVersion(value: System.Data.DataRowVersion);
			get Value(): any;
			set Value(value: any);
			constructor();
			constructor(parameterName: string);
			constructor(parameterName: string, value: any);
			constructor(parameterName: string, dbType: System.Data.DbType);
			constructor(parameterName: string, dbType: System.Data.DbType, sourceColumn: string);
			constructor(parameterName: string, dbType: System.Data.DbType, sourceColumn: string, rowVersion: System.Data.DataRowVersion);
			constructor(dbType: System.Data.DbType);
			constructor(dbType: System.Data.DbType, value: any);
			constructor(dbType: System.Data.DbType, sourceColumn: string);
			constructor(dbType: System.Data.DbType, sourceColumn: string, rowVersion: System.Data.DataRowVersion);
			constructor(parameterName: string, parameterType: System.Data.DbType, parameterSize: number);
			constructor(parameterName: string, parameterType: System.Data.DbType, parameterSize: number, sourceColumn: string);
			constructor(parameterName: string, parameterType: System.Data.DbType, parameterSize: number, sourceColumn: string, rowVersion: System.Data.DataRowVersion);
			constructor(parameterName: string, parameterType: System.Data.DbType, parameterSize: number, direction: System.Data.ParameterDirection, isNullable: boolean, precision: number, scale: number, sourceColumn: string, rowVersion: System.Data.DataRowVersion, value: any);
			constructor(parameterName: string, parameterType: System.Data.DbType, parameterSize: number, direction: System.Data.ParameterDirection, precision: number, scale: number, sourceColumn: string, rowVersion: System.Data.DataRowVersion, sourceColumnNullMapping: boolean, value: any);
			constructor(parameterType: System.Data.DbType, parameterSize: number);
			constructor(parameterType: System.Data.DbType, parameterSize: number, sourceColumn: string);
			constructor(parameterType: System.Data.DbType, parameterSize: number, sourceColumn: string, rowVersion: System.Data.DataRowVersion);
			/**inherited method */
			ResetDbType(): void;
			Clone(): any;
			/**inherited method */
			CreateObjRef(requestedType: System.Type): any;
			/**inherited method */
			GetLifetimeService(): any;
			/**inherited method */
			InitializeLifetimeService(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SqliteTransaction {
			get Connection(): Mono.Data.Sqlite.SqliteConnection;
			get IsolationLevel(): System.Data.IsolationLevel;
			/**inherited method */
			Commit(): void;
			/**inherited method */
			Rollback(): void;
			/**inherited method */
			Dispose(): void;
			/**inherited method */
			CreateObjRef(requestedType: System.Type): any;
			/**inherited method */
			GetLifetimeService(): any;
			/**inherited method */
			InitializeLifetimeService(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class SQLiteCommitHandler extends Function {
		}
		export class SQLiteUpdateEventHandler extends Function {
		}

	}
	export namespace System.Data {
		export enum AcceptRejectRule { None = 0, Cascade = 1, }
		export class InternalDataCollectionBase extends System.Object {
			get Count(): number;
			get IsReadOnly(): boolean;
			get IsSynchronized(): boolean;
			get SyncRoot(): any;
			constructor();
			CopyTo(ar: System.Array, index: number): void;
			GetEnumerator(): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum CommandBehavior { Default = 0, SingleResult = 1, SchemaOnly = 2, KeyInfo = 4, SingleRow = 8, SequentialAccess = 16, CloseConnection = 32, }
		export enum CommandType { Text = 1, StoredProcedure = 4, TableDirect = 512, }
		export enum ConflictOption { CompareAllSearchableValues = 1, CompareRowVersion = 2, OverwriteChanges = 3, }
		export enum ConnectionState { Closed = 0, Open = 1, Connecting = 2, Executing = 4, Fetching = 8, Broken = 16, }
		export class Constraint extends System.Object {
			get ConstraintName(): string;
			set ConstraintName(value: string);
			get Table(): System.Data.DataTable;
			get ExtendedProperties(): System.Data.PropertyCollection;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class ConstraintCollection extends System.Data.InternalDataCollectionBase {
			Add(constraint: System.Data.Constraint): void;
			Add(name: string, columns: System.Data.DataColumn[], primaryKey: boolean): System.Data.Constraint;
			Add(name: string, column: System.Data.DataColumn, primaryKey: boolean): System.Data.Constraint;
			Add(name: string, primaryKeyColumn: System.Data.DataColumn, foreignKeyColumn: System.Data.DataColumn): System.Data.Constraint;
			Add(name: string, primaryKeyColumns: System.Data.DataColumn[], foreignKeyColumns: System.Data.DataColumn[]): System.Data.Constraint;
			AddRange(constraints: System.Data.Constraint[]): void;
			add_CollectionChanged(value: Function): void;
			remove_CollectionChanged(value: Function): void;
			CanRemove(constraint: System.Data.Constraint): boolean;
			Clear(): void;
			Contains(name: string): boolean;
			CopyTo(array: System.Data.Constraint[], index: number): void;
			/**inherited method */
			CopyTo(ar: System.Array, index: number): void;
			IndexOf(constraint: System.Data.Constraint): number;
			IndexOf(constraintName: string): number;
			Remove(constraint: System.Data.Constraint): void;
			Remove(name: string): void;
			RemoveAt(index: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataColumn {
			get AllowDBNull(): boolean;
			set AllowDBNull(value: boolean);
			get AutoIncrement(): boolean;
			set AutoIncrement(value: boolean);
			get AutoIncrementSeed(): number;
			set AutoIncrementSeed(value: number);
			get AutoIncrementStep(): number;
			set AutoIncrementStep(value: number);
			get Caption(): string;
			set Caption(value: string);
			get ColumnName(): string;
			set ColumnName(value: string);
			get Prefix(): string;
			set Prefix(value: string);
			get DataType(): System.Type;
			set DataType(value: System.Type);
			get DateTimeMode(): System.Data.DataSetDateTime;
			set DateTimeMode(value: System.Data.DataSetDateTime);
			get DefaultValue(): any;
			set DefaultValue(value: any);
			get Expression(): string;
			set Expression(value: string);
			get ExtendedProperties(): System.Data.PropertyCollection;
			get MaxLength(): number;
			set MaxLength(value: number);
			get Namespace(): string;
			set Namespace(value: string);
			get Ordinal(): number;
			get ReadOnly(): boolean;
			set ReadOnly(value: boolean);
			get Table(): System.Data.DataTable;
			get Unique(): boolean;
			set Unique(value: boolean);
			get ColumnMapping(): System.Data.MappingType;
			set ColumnMapping(value: System.Data.MappingType);
			constructor();
			constructor(columnName: string);
			constructor(columnName: string, dataType: System.Type);
			constructor(columnName: string, dataType: System.Type, expr: string);
			constructor(columnName: string, dataType: System.Type, expr: string, type: System.Data.MappingType);
			SetOrdinal(ordinal: number): void;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			add_Disposed(value: System.EventHandler): void;
			/**inherited method */
			remove_Disposed(value: System.EventHandler): void;
			/**inherited method */
			Dispose(): void;
			/**inherited method */
			GetService(service: System.Type): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataColumnChangeEventArgs extends System.EventArgs {
			get Column(): System.Data.DataColumn;
			get Row(): System.Data.DataRow;
			get ProposedValue(): any;
			set ProposedValue(value: any);
			constructor(row: System.Data.DataRow, column: System.Data.DataColumn, value: any);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataColumnChangeEventHandler extends Function {
		}
		export class DataColumnCollection extends System.Data.InternalDataCollectionBase {
			Add(column: System.Data.DataColumn): void;
			Add(columnName: string, type: System.Type, expression: string): System.Data.DataColumn;
			Add(columnName: string, type: System.Type): System.Data.DataColumn;
			Add(columnName: string): System.Data.DataColumn;
			Add(): System.Data.DataColumn;
			AddRange(columns: System.Data.DataColumn[]): void;
			add_CollectionChanged(value: Function): void;
			remove_CollectionChanged(value: Function): void;
			CanRemove(column: System.Data.DataColumn): boolean;
			Clear(): void;
			Contains(name: string): boolean;
			CopyTo(array: System.Data.DataColumn[], index: number): void;
			/**inherited method */
			CopyTo(ar: System.Array, index: number): void;
			IndexOf(column: System.Data.DataColumn): number;
			IndexOf(columnName: string): number;
			Remove(column: System.Data.DataColumn): void;
			Remove(name: string): void;
			RemoveAt(index: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataRelation extends System.Object {
			get ChildColumns(): System.Data.DataColumn[];
			get ChildTable(): System.Data.DataTable;
			get DataSet(): System.Data.DataSet;
			get ParentColumns(): System.Data.DataColumn[];
			get ParentTable(): System.Data.DataTable;
			get RelationName(): string;
			set RelationName(value: string);
			get Nested(): boolean;
			set Nested(value: boolean);
			get ParentKeyConstraint(): System.Data.UniqueConstraint;
			get ChildKeyConstraint(): System.Data.ForeignKeyConstraint;
			get ExtendedProperties(): System.Data.PropertyCollection;
			constructor(relationName: string, parentColumn: System.Data.DataColumn, childColumn: System.Data.DataColumn);
			constructor(relationName: string, parentColumn: System.Data.DataColumn, childColumn: System.Data.DataColumn, createConstraints: boolean);
			constructor(relationName: string, parentColumns: System.Data.DataColumn[], childColumns: System.Data.DataColumn[]);
			constructor(relationName: string, parentColumns: System.Data.DataColumn[], childColumns: System.Data.DataColumn[], createConstraints: boolean);
			constructor(relationName: string, parentTableName: string, childTableName: string, parentColumnNames: string[], childColumnNames: string[], nested: boolean);
			constructor(relationName: string, parentTableName: string, parentTableNamespace: string, childTableName: string, childTableNamespace: string, parentColumnNames: string[], childColumnNames: string[], nested: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataRelationCollection extends System.Data.InternalDataCollectionBase {
			Add(relation: System.Data.DataRelation): void;
			Add(name: string, parentColumns: System.Data.DataColumn[], childColumns: System.Data.DataColumn[]): System.Data.DataRelation;
			Add(name: string, parentColumns: System.Data.DataColumn[], childColumns: System.Data.DataColumn[], createConstraints: boolean): System.Data.DataRelation;
			Add(parentColumns: System.Data.DataColumn[], childColumns: System.Data.DataColumn[]): System.Data.DataRelation;
			Add(name: string, parentColumn: System.Data.DataColumn, childColumn: System.Data.DataColumn): System.Data.DataRelation;
			Add(name: string, parentColumn: System.Data.DataColumn, childColumn: System.Data.DataColumn, createConstraints: boolean): System.Data.DataRelation;
			Add(parentColumn: System.Data.DataColumn, childColumn: System.Data.DataColumn): System.Data.DataRelation;
			AddRange(relations: System.Data.DataRelation[]): void;
			add_CollectionChanged(value: Function): void;
			remove_CollectionChanged(value: Function): void;
			Clear(): void;
			Contains(name: string): boolean;
			CopyTo(array: System.Data.DataRelation[], index: number): void;
			/**inherited method */
			CopyTo(ar: System.Array, index: number): void;
			IndexOf(relation: System.Data.DataRelation): number;
			IndexOf(relationName: string): number;
			CanRemove(relation: System.Data.DataRelation): boolean;
			Remove(relation: System.Data.DataRelation): void;
			Remove(name: string): void;
			RemoveAt(index: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataRow extends System.Object {
			get RowError(): string;
			set RowError(value: string);
			get RowState(): System.Data.DataRowState;
			get Table(): System.Data.DataTable;
			get ItemArray(): any;
			set ItemArray(value: any);
			get HasErrors(): boolean;
			AcceptChanges(): void;
			BeginEdit(): void;
			CancelEdit(): void;
			Delete(): void;
			EndEdit(): void;
			SetColumnError(columnIndex: number, error: string): void;
			SetColumnError(columnName: string, error: string): void;
			SetColumnError(column: System.Data.DataColumn, error: string): void;
			GetColumnError(columnIndex: number): string;
			GetColumnError(columnName: string): string;
			GetColumnError(column: System.Data.DataColumn): string;
			ClearErrors(): void;
			GetColumnsInError(): System.Data.DataColumn[];
			GetChildRows(relationName: string): System.Data.DataRow[];
			GetChildRows(relationName: string, version: System.Data.DataRowVersion): System.Data.DataRow[];
			GetChildRows(relation: System.Data.DataRelation): System.Data.DataRow[];
			GetChildRows(relation: System.Data.DataRelation, version: System.Data.DataRowVersion): System.Data.DataRow[];
			GetParentRow(relationName: string): System.Data.DataRow;
			GetParentRow(relationName: string, version: System.Data.DataRowVersion): System.Data.DataRow;
			GetParentRow(relation: System.Data.DataRelation): System.Data.DataRow;
			GetParentRow(relation: System.Data.DataRelation, version: System.Data.DataRowVersion): System.Data.DataRow;
			GetParentRows(relationName: string): System.Data.DataRow[];
			GetParentRows(relationName: string, version: System.Data.DataRowVersion): System.Data.DataRow[];
			GetParentRows(relation: System.Data.DataRelation): System.Data.DataRow[];
			GetParentRows(relation: System.Data.DataRelation, version: System.Data.DataRowVersion): System.Data.DataRow[];
			HasVersion(version: System.Data.DataRowVersion): boolean;
			IsNull(columnIndex: number): boolean;
			IsNull(columnName: string): boolean;
			IsNull(column: System.Data.DataColumn): boolean;
			IsNull(column: System.Data.DataColumn, version: System.Data.DataRowVersion): boolean;
			RejectChanges(): void;
			SetParentRow(parentRow: System.Data.DataRow): void;
			SetParentRow(parentRow: System.Data.DataRow, relation: System.Data.DataRelation): void;
			SetAdded(): void;
			SetModified(): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataRowBuilder extends System.Object {
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum DataRowAction { Nothing = 0, Delete = 1, Change = 2, Rollback = 4, Commit = 8, Add = 16, ChangeOriginal = 32, ChangeCurrentAndOriginal = 64, }
		export class DataRowChangeEventArgs extends System.EventArgs {
			get Row(): System.Data.DataRow;
			get Action(): System.Data.DataRowAction;
			constructor(row: System.Data.DataRow, action: System.Data.DataRowAction);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataRowChangeEventHandler extends Function {
		}
		export class DataRowCollection extends System.Data.InternalDataCollectionBase {
			get Count(): number;
			Add(row: System.Data.DataRow): void;
			Add(values: any): System.Data.DataRow;
			InsertAt(row: System.Data.DataRow, pos: number): void;
			IndexOf(row: System.Data.DataRow): number;
			Find(key: any): System.Data.DataRow;
			Find(keys: any): System.Data.DataRow;
			Clear(): void;
			Contains(key: any): boolean;
			Contains(keys: any): boolean;
			/**inherited method */
			CopyTo(ar: System.Array, index: number): void;
			CopyTo(array: System.Data.DataRow[], index: number): void;
			Remove(row: System.Data.DataRow): void;
			RemoveAt(index: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum DataRowState { Detached = 1, Unchanged = 2, Added = 4, Deleted = 8, Modified = 16, }
		export enum DataRowVersion { Original = 256, Current = 512, Proposed = 1024, Default = 1536, }
		export class DataRowView extends System.Object {
			get DataView(): System.Data.DataView;
			get RowVersion(): System.Data.DataRowVersion;
			get Row(): System.Data.DataRow;
			get IsNew(): boolean;
			get IsEdit(): boolean;
			CreateChildView(relation: System.Data.DataRelation, followParent: boolean): System.Data.DataView;
			CreateChildView(relation: System.Data.DataRelation): System.Data.DataView;
			CreateChildView(relationName: string, followParent: boolean): System.Data.DataView;
			CreateChildView(relationName: string): System.Data.DataView;
			BeginEdit(): void;
			CancelEdit(): void;
			EndEdit(): void;
			Delete(): void;
			add_PropertyChanged(value: Function): void;
			remove_PropertyChanged(value: Function): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum SerializationFormat { Xml = 0, Binary = 1, }
		export class DataSet {
			get RemotingFormat(): System.Data.SerializationFormat;
			set RemotingFormat(value: System.Data.SerializationFormat);
			get SchemaSerializationMode(): System.Data.SchemaSerializationMode;
			set SchemaSerializationMode(value: System.Data.SchemaSerializationMode);
			get CaseSensitive(): boolean;
			set CaseSensitive(value: boolean);
			get DefaultViewManager(): System.Data.DataViewManager;
			get EnforceConstraints(): boolean;
			set EnforceConstraints(value: boolean);
			get DataSetName(): string;
			set DataSetName(value: string);
			get Namespace(): string;
			set Namespace(value: string);
			get Prefix(): string;
			set Prefix(value: string);
			get ExtendedProperties(): System.Data.PropertyCollection;
			get HasErrors(): boolean;
			get IsInitialized(): boolean;
			get Locale(): any;
			set Locale(value: any);
			get Site(): any;
			set Site(value: any);
			get Relations(): System.Data.DataRelationCollection;
			get Tables(): System.Data.DataTableCollection;
			constructor();
			constructor(dataSetName: string);
			static GetDataSetSchema(schemaSet: any): any;
			GetObjectData(info: any, context: any): void;
			AcceptChanges(): void;
			add_MergeFailed(value: System.Data.MergeFailedEventHandler): void;
			remove_MergeFailed(value: System.Data.MergeFailedEventHandler): void;
			add_Initialized(value: System.EventHandler): void;
			remove_Initialized(value: System.EventHandler): void;
			BeginInit(): void;
			EndInit(): void;
			Clear(): void;
			Clone(): System.Data.DataSet;
			Copy(): System.Data.DataSet;
			GetChanges(): System.Data.DataSet;
			GetChanges(rowStates: System.Data.DataRowState): System.Data.DataSet;
			GetXml(): string;
			GetXmlSchema(): string;
			HasChanges(): boolean;
			HasChanges(rowStates: System.Data.DataRowState): boolean;
			InferXmlSchema(reader: any, nsArray: string[]): void;
			InferXmlSchema(stream: System.IO.Stream, nsArray: string[]): void;
			InferXmlSchema(reader: System.IO.TextReader, nsArray: string[]): void;
			InferXmlSchema(fileName: string, nsArray: string[]): void;
			ReadXmlSchema(reader: any): void;
			ReadXmlSchema(stream: System.IO.Stream): void;
			ReadXmlSchema(reader: System.IO.TextReader): void;
			ReadXmlSchema(fileName: string): void;
			WriteXmlSchema(stream: System.IO.Stream): void;
			WriteXmlSchema(stream: System.IO.Stream, multipleTargetConverter: System.Converter$2): void;
			WriteXmlSchema(fileName: string): void;
			WriteXmlSchema(fileName: string, multipleTargetConverter: System.Converter$2): void;
			WriteXmlSchema(writer: System.IO.TextWriter): void;
			WriteXmlSchema(writer: System.IO.TextWriter, multipleTargetConverter: System.Converter$2): void;
			WriteXmlSchema(writer: any): void;
			WriteXmlSchema(writer: any, multipleTargetConverter: System.Converter$2): void;
			ReadXml(reader: any): System.Data.XmlReadMode;
			ReadXml(stream: System.IO.Stream): System.Data.XmlReadMode;
			ReadXml(reader: System.IO.TextReader): System.Data.XmlReadMode;
			ReadXml(fileName: string): System.Data.XmlReadMode;
			ReadXml(reader: any, mode: System.Data.XmlReadMode): System.Data.XmlReadMode;
			ReadXml(stream: System.IO.Stream, mode: System.Data.XmlReadMode): System.Data.XmlReadMode;
			ReadXml(reader: System.IO.TextReader, mode: System.Data.XmlReadMode): System.Data.XmlReadMode;
			ReadXml(fileName: string, mode: System.Data.XmlReadMode): System.Data.XmlReadMode;
			WriteXml(stream: System.IO.Stream): void;
			WriteXml(writer: System.IO.TextWriter): void;
			WriteXml(writer: any): void;
			WriteXml(fileName: string): void;
			WriteXml(stream: System.IO.Stream, mode: System.Data.XmlWriteMode): void;
			WriteXml(writer: System.IO.TextWriter, mode: System.Data.XmlWriteMode): void;
			WriteXml(writer: any, mode: System.Data.XmlWriteMode): void;
			WriteXml(fileName: string, mode: System.Data.XmlWriteMode): void;
			Merge(dataSet: System.Data.DataSet): void;
			Merge(dataSet: System.Data.DataSet, preserveChanges: boolean): void;
			Merge(dataSet: System.Data.DataSet, preserveChanges: boolean, missingSchemaAction: System.Data.MissingSchemaAction): void;
			Merge(table: System.Data.DataTable): void;
			Merge(table: System.Data.DataTable, preserveChanges: boolean, missingSchemaAction: System.Data.MissingSchemaAction): void;
			Merge(rows: System.Data.DataRow[]): void;
			Merge(rows: System.Data.DataRow[], preserveChanges: boolean, missingSchemaAction: System.Data.MissingSchemaAction): void;
			RejectChanges(): void;
			Reset(): void;
			Load(reader: System.Data.IDataReader, loadOption: System.Data.LoadOption, errorHandler: System.Data.FillErrorEventHandler, tables: System.Data.DataTable[]): void;
			Load(reader: System.Data.IDataReader, loadOption: System.Data.LoadOption, tables: System.Data.DataTable[]): void;
			Load(reader: System.Data.IDataReader, loadOption: System.Data.LoadOption, tables: string[]): void;
			CreateDataReader(): System.Data.DataTableReader;
			CreateDataReader(dataTables: System.Data.DataTable[]): System.Data.DataTableReader;
			/**inherited method */
			add_Disposed(value: System.EventHandler): void;
			/**inherited method */
			remove_Disposed(value: System.EventHandler): void;
			/**inherited method */
			Dispose(): void;
			/**inherited method */
			GetService(service: System.Type): any;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum DataSetDateTime { Local = 1, Unspecified = 2, UnspecifiedLocal = 3, Utc = 4, }
		export class DataSysDescriptionAttribute {
			get Description(): string;
			constructor(description: string);
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			IsDefaultAttribute(): boolean;
			/**inherited method */
			Match(obj: any): boolean;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataTable {
			get CaseSensitive(): boolean;
			set CaseSensitive(value: boolean);
			get IsInitialized(): boolean;
			get RemotingFormat(): System.Data.SerializationFormat;
			set RemotingFormat(value: System.Data.SerializationFormat);
			get ChildRelations(): System.Data.DataRelationCollection;
			get Columns(): System.Data.DataColumnCollection;
			get Constraints(): System.Data.ConstraintCollection;
			get DataSet(): System.Data.DataSet;
			get DefaultView(): System.Data.DataView;
			get DisplayExpression(): string;
			set DisplayExpression(value: string);
			get ExtendedProperties(): System.Data.PropertyCollection;
			get HasErrors(): boolean;
			get Locale(): any;
			set Locale(value: any);
			get MinimumCapacity(): number;
			set MinimumCapacity(value: number);
			get ParentRelations(): System.Data.DataRelationCollection;
			get PrimaryKey(): System.Data.DataColumn[];
			set PrimaryKey(value: System.Data.DataColumn[]);
			get Rows(): System.Data.DataRowCollection;
			get TableName(): string;
			set TableName(value: string);
			get Namespace(): string;
			set Namespace(value: string);
			get Prefix(): string;
			set Prefix(value: string);
			get Site(): any;
			set Site(value: any);
			constructor();
			constructor(tableName: string);
			constructor(tableName: string, tableNamespace: string);
			static GetDataTableSchema(schemaSet: any): any;
			GetObjectData(info: any, context: any): void;
			BeginInit(): void;
			EndInit(): void;
			AcceptChanges(): void;
			Clone(): System.Data.DataTable;
			Copy(): System.Data.DataTable;
			add_ColumnChanging(value: System.Data.DataColumnChangeEventHandler): void;
			remove_ColumnChanging(value: System.Data.DataColumnChangeEventHandler): void;
			add_ColumnChanged(value: System.Data.DataColumnChangeEventHandler): void;
			remove_ColumnChanged(value: System.Data.DataColumnChangeEventHandler): void;
			add_Initialized(value: System.EventHandler): void;
			remove_Initialized(value: System.EventHandler): void;
			add_RowChanged(value: System.Data.DataRowChangeEventHandler): void;
			remove_RowChanged(value: System.Data.DataRowChangeEventHandler): void;
			add_RowChanging(value: System.Data.DataRowChangeEventHandler): void;
			remove_RowChanging(value: System.Data.DataRowChangeEventHandler): void;
			add_RowDeleting(value: System.Data.DataRowChangeEventHandler): void;
			remove_RowDeleting(value: System.Data.DataRowChangeEventHandler): void;
			add_RowDeleted(value: System.Data.DataRowChangeEventHandler): void;
			remove_RowDeleted(value: System.Data.DataRowChangeEventHandler): void;
			add_TableClearing(value: System.Data.DataTableClearEventHandler): void;
			remove_TableClearing(value: System.Data.DataTableClearEventHandler): void;
			add_TableCleared(value: System.Data.DataTableClearEventHandler): void;
			remove_TableCleared(value: System.Data.DataTableClearEventHandler): void;
			add_TableNewRow(value: System.Data.DataTableNewRowEventHandler): void;
			remove_TableNewRow(value: System.Data.DataTableNewRowEventHandler): void;
			Clear(): void;
			Compute(expression: string, filter: string): any;
			GetChanges(): System.Data.DataTable;
			GetChanges(rowStates: System.Data.DataRowState): System.Data.DataTable;
			GetErrors(): System.Data.DataRow[];
			ImportRow(row: System.Data.DataRow): void;
			NewRow(): System.Data.DataRow;
			RejectChanges(): void;
			Reset(): void;
			Select(): System.Data.DataRow[];
			Select(filterExpression: string): System.Data.DataRow[];
			Select(filterExpression: string, sort: string): System.Data.DataRow[];
			Select(filterExpression: string, sort: string, recordStates: System.Data.DataViewRowState): System.Data.DataRow[];
			/**inherited method */
			ToString(): string;
			BeginLoadData(): void;
			EndLoadData(): void;
			LoadDataRow(values: any, fAcceptChanges: boolean): System.Data.DataRow;
			LoadDataRow(values: any, loadOption: System.Data.LoadOption): System.Data.DataRow;
			Merge(table: System.Data.DataTable): void;
			Merge(table: System.Data.DataTable, preserveChanges: boolean): void;
			Merge(table: System.Data.DataTable, preserveChanges: boolean, missingSchemaAction: System.Data.MissingSchemaAction): void;
			Load(reader: System.Data.IDataReader): void;
			Load(reader: System.Data.IDataReader, loadOption: System.Data.LoadOption): void;
			Load(reader: System.Data.IDataReader, loadOption: System.Data.LoadOption, errorHandler: System.Data.FillErrorEventHandler): void;
			CreateDataReader(): System.Data.DataTableReader;
			WriteXml(stream: System.IO.Stream): void;
			WriteXml(stream: System.IO.Stream, writeHierarchy: boolean): void;
			WriteXml(writer: System.IO.TextWriter): void;
			WriteXml(writer: System.IO.TextWriter, writeHierarchy: boolean): void;
			WriteXml(writer: any): void;
			WriteXml(writer: any, writeHierarchy: boolean): void;
			WriteXml(fileName: string): void;
			WriteXml(fileName: string, writeHierarchy: boolean): void;
			WriteXml(stream: System.IO.Stream, mode: System.Data.XmlWriteMode): void;
			WriteXml(stream: System.IO.Stream, mode: System.Data.XmlWriteMode, writeHierarchy: boolean): void;
			WriteXml(writer: System.IO.TextWriter, mode: System.Data.XmlWriteMode): void;
			WriteXml(writer: System.IO.TextWriter, mode: System.Data.XmlWriteMode, writeHierarchy: boolean): void;
			WriteXml(writer: any, mode: System.Data.XmlWriteMode): void;
			WriteXml(writer: any, mode: System.Data.XmlWriteMode, writeHierarchy: boolean): void;
			WriteXml(fileName: string, mode: System.Data.XmlWriteMode): void;
			WriteXml(fileName: string, mode: System.Data.XmlWriteMode, writeHierarchy: boolean): void;
			WriteXmlSchema(stream: System.IO.Stream): void;
			WriteXmlSchema(stream: System.IO.Stream, writeHierarchy: boolean): void;
			WriteXmlSchema(writer: System.IO.TextWriter): void;
			WriteXmlSchema(writer: System.IO.TextWriter, writeHierarchy: boolean): void;
			WriteXmlSchema(writer: any): void;
			WriteXmlSchema(writer: any, writeHierarchy: boolean): void;
			WriteXmlSchema(fileName: string): void;
			WriteXmlSchema(fileName: string, writeHierarchy: boolean): void;
			ReadXml(stream: System.IO.Stream): System.Data.XmlReadMode;
			ReadXml(reader: System.IO.TextReader): System.Data.XmlReadMode;
			ReadXml(fileName: string): System.Data.XmlReadMode;
			ReadXml(reader: any): System.Data.XmlReadMode;
			ReadXmlSchema(stream: System.IO.Stream): void;
			ReadXmlSchema(reader: System.IO.TextReader): void;
			ReadXmlSchema(fileName: string): void;
			ReadXmlSchema(reader: any): void;
			/**inherited method */
			add_Disposed(value: System.EventHandler): void;
			/**inherited method */
			remove_Disposed(value: System.EventHandler): void;
			/**inherited method */
			Dispose(): void;
			/**inherited method */
			GetService(service: System.Type): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataTableClearEventArgs extends System.EventArgs {
			get Table(): System.Data.DataTable;
			get TableName(): string;
			get TableNamespace(): string;
			constructor(dataTable: System.Data.DataTable);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataTableClearEventHandler extends Function {
		}
		export class DataTableCollection extends System.Data.InternalDataCollectionBase {
			Add(table: System.Data.DataTable): void;
			Add(name: string): System.Data.DataTable;
			Add(name: string, tableNamespace: string): System.Data.DataTable;
			Add(): System.Data.DataTable;
			AddRange(tables: System.Data.DataTable[]): void;
			add_CollectionChanged(value: Function): void;
			remove_CollectionChanged(value: Function): void;
			add_CollectionChanging(value: Function): void;
			remove_CollectionChanging(value: Function): void;
			CanRemove(table: System.Data.DataTable): boolean;
			Clear(): void;
			Contains(name: string): boolean;
			Contains(name: string, tableNamespace: string): boolean;
			CopyTo(array: System.Data.DataTable[], index: number): void;
			/**inherited method */
			CopyTo(ar: System.Array, index: number): void;
			IndexOf(table: System.Data.DataTable): number;
			IndexOf(tableName: string): number;
			IndexOf(tableName: string, tableNamespace: string): number;
			Remove(table: System.Data.DataTable): void;
			Remove(name: string): void;
			Remove(name: string, tableNamespace: string): void;
			RemoveAt(index: number): void;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataTableNewRowEventArgs extends System.EventArgs {
			get Row(): System.Data.DataRow;
			constructor(dataRow: System.Data.DataRow);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataTableNewRowEventHandler extends Function {
		}
		export class DataTableReader {
			get Depth(): number;
			get IsClosed(): boolean;
			get RecordsAffected(): number;
			get HasRows(): boolean;
			get FieldCount(): number;
			constructor(dataTable: System.Data.DataTable);
			constructor(dataTables: System.Data.DataTable[]);
			/**inherited method */
			Close(): void;
			/**inherited method */
			GetSchemaTable(): System.Data.DataTable;
			/**inherited method */
			NextResult(): boolean;
			/**inherited method */
			Read(): boolean;
			/**inherited method */
			GetProviderSpecificFieldType(ordinal: number): System.Type;
			/**inherited method */
			GetProviderSpecificValue(ordinal: number): any;
			/**inherited method */
			GetProviderSpecificValues(values: any): number;
			/**inherited method */
			GetBoolean(ordinal: number): boolean;
			/**inherited method */
			GetByte(ordinal: number): number;
			/**inherited method */
			GetBytes(ordinal: number, dataIndex: number, buffer: Uint8Array, bufferIndex: number, length: number): number;
			/**inherited method */
			GetChar(ordinal: number): string;
			/**inherited method */
			GetChars(ordinal: number, dataIndex: number, buffer: string[], bufferIndex: number, length: number): number;
			/**inherited method */
			GetDataTypeName(ordinal: number): string;
			/**inherited method */
			GetDateTime(ordinal: number): System.DateTime;
			/**inherited method */
			GetDecimal(ordinal: number): System.Decimal;
			/**inherited method */
			GetDouble(ordinal: number): number;
			/**inherited method */
			GetFieldType(ordinal: number): System.Type;
			/**inherited method */
			GetFloat(ordinal: number): number;
			/**inherited method */
			GetGuid(ordinal: number): System.Guid;
			/**inherited method */
			GetInt16(ordinal: number): number;
			/**inherited method */
			GetInt32(ordinal: number): number;
			/**inherited method */
			GetInt64(ordinal: number): number;
			/**inherited method */
			GetName(ordinal: number): string;
			/**inherited method */
			GetOrdinal(name: string): number;
			/**inherited method */
			GetString(ordinal: number): string;
			/**inherited method */
			GetValue(ordinal: number): any;
			/**inherited method */
			GetValues(values: any): number;
			/**inherited method */
			IsDBNull(ordinal: number): boolean;
			/**inherited method */
			GetEnumerator(): any;
			/**inherited method */
			Dispose(): void;
			/**inherited method */
			GetData(ordinal: number): any;
			/**inherited method */
			GetStream(ordinal: number): System.IO.Stream;
			/**inherited method */
			GetTextReader(ordinal: number): System.IO.TextReader;
			/**inherited method */
			IsDBNullAsync(ordinal: number): any;
			/**inherited method */
			IsDBNullAsync(ordinal: number, cancellationToken: any): any;
			/**inherited method */
			ReadAsync(): any;
			/**inherited method */
			ReadAsync(cancellationToken: any): any;
			/**inherited method */
			NextResultAsync(): any;
			/**inherited method */
			NextResultAsync(cancellationToken: any): any;
			/**inherited method */
			CreateObjRef(requestedType: System.Type): any;
			/**inherited method */
			GetLifetimeService(): any;
			/**inherited method */
			InitializeLifetimeService(): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataView {
			get AllowDelete(): boolean;
			set AllowDelete(value: boolean);
			get ApplyDefaultSort(): boolean;
			set ApplyDefaultSort(value: boolean);
			get AllowEdit(): boolean;
			set AllowEdit(value: boolean);
			get AllowNew(): boolean;
			set AllowNew(value: boolean);
			get Count(): number;
			get DataViewManager(): System.Data.DataViewManager;
			get IsInitialized(): boolean;
			get RowFilter(): string;
			set RowFilter(value: string);
			get RowStateFilter(): System.Data.DataViewRowState;
			set RowStateFilter(value: System.Data.DataViewRowState);
			get Sort(): string;
			set Sort(value: string);
			get Table(): System.Data.DataTable;
			set Table(value: System.Data.DataTable);
			constructor();
			constructor(table: System.Data.DataTable);
			constructor(table: System.Data.DataTable, RowFilter: string, Sort: string, RowState: System.Data.DataViewRowState);
			AddNew(): System.Data.DataRowView;
			BeginInit(): void;
			EndInit(): void;
			CopyTo(array: System.Array, index: number): void;
			Delete(index: number): void;
			Find(key: any): number;
			Find(key: any): number;
			FindRows(key: any): System.Data.DataRowView[];
			FindRows(key: any): System.Data.DataRowView[];
			GetEnumerator(): any;
			add_ListChanged(value: Function): void;
			remove_ListChanged(value: Function): void;
			add_Initialized(value: System.EventHandler): void;
			remove_Initialized(value: System.EventHandler): void;
			ToTable(): System.Data.DataTable;
			ToTable(tableName: string): System.Data.DataTable;
			ToTable(distinct: boolean, columnNames: string[]): System.Data.DataTable;
			ToTable(tableName: string, distinct: boolean, columnNames: string[]): System.Data.DataTable;
			Equals(view: System.Data.DataView): boolean;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			add_Disposed(value: System.EventHandler): void;
			/**inherited method */
			remove_Disposed(value: System.EventHandler): void;
			/**inherited method */
			Dispose(): void;
			/**inherited method */
			GetService(service: System.Type): any;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataViewManager {
			get DataSet(): System.Data.DataSet;
			set DataSet(value: System.Data.DataSet);
			get DataViewSettings(): System.Data.DataViewSettingCollection;
			get DataViewSettingCollectionString(): string;
			set DataViewSettingCollectionString(value: string);
			constructor();
			constructor(dataSet: System.Data.DataSet);
			add_ListChanged(value: Function): void;
			remove_ListChanged(value: Function): void;
			CreateDataView(table: System.Data.DataTable): System.Data.DataView;
			/**inherited method */
			add_Disposed(value: System.EventHandler): void;
			/**inherited method */
			remove_Disposed(value: System.EventHandler): void;
			/**inherited method */
			Dispose(): void;
			/**inherited method */
			GetService(service: System.Type): any;
			/**inherited method */
			ToString(): string;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum DataViewRowState { None = 0, Unchanged = 2, Added = 4, Deleted = 8, ModifiedCurrent = 16, ModifiedOriginal = 32, OriginalRows = 42, CurrentRows = 22, }
		export class DataViewSetting extends System.Object {
			get ApplyDefaultSort(): boolean;
			set ApplyDefaultSort(value: boolean);
			get DataViewManager(): System.Data.DataViewManager;
			get Table(): System.Data.DataTable;
			get RowFilter(): string;
			set RowFilter(value: string);
			get RowStateFilter(): System.Data.DataViewRowState;
			set RowStateFilter(value: System.Data.DataViewRowState);
			get Sort(): string;
			set Sort(value: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataViewSettingCollection extends System.Object {
			get Count(): number;
			get IsReadOnly(): boolean;
			get IsSynchronized(): boolean;
			get SyncRoot(): any;
			CopyTo(ar: System.Array, index: number): void;
			CopyTo(ar: System.Data.DataViewSetting[], index: number): void;
			GetEnumerator(): any;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum DbType { AnsiString = 0, Binary = 1, Byte = 2, Boolean = 3, Currency = 4, Date = 5, DateTime = 6, Decimal = 7, Double = 8, Guid = 9, Int16 = 10, Int32 = 11, Int64 = 12, Object = 13, SByte = 14, Single = 15, String = 16, Time = 17, UInt16 = 18, UInt32 = 19, UInt64 = 20, VarNumeric = 21, AnsiStringFixedLength = 22, StringFixedLength = 23, Xml = 25, DateTime2 = 26, DateTimeOffset = 27, }
		export class FillErrorEventArgs extends System.EventArgs {
			get Continue(): boolean;
			set Continue(value: boolean);
			get DataTable(): System.Data.DataTable;
			get Errors(): any;
			set Errors(value: any);
			get Values(): any;
			constructor(dataTable: System.Data.DataTable, values: any);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class FillErrorEventHandler extends Function {
		}
		export class ForeignKeyConstraint extends System.Data.Constraint {
			get Columns(): System.Data.DataColumn[];
			get Table(): System.Data.DataTable;
			get AcceptRejectRule(): System.Data.AcceptRejectRule;
			set AcceptRejectRule(value: System.Data.AcceptRejectRule);
			get DeleteRule(): System.Data.Rule;
			set DeleteRule(value: System.Data.Rule);
			get RelatedColumns(): System.Data.DataColumn[];
			get RelatedTable(): System.Data.DataTable;
			get UpdateRule(): System.Data.Rule;
			set UpdateRule(value: System.Data.Rule);
			constructor(parentColumn: System.Data.DataColumn, childColumn: System.Data.DataColumn);
			constructor(constraintName: string, parentColumn: System.Data.DataColumn, childColumn: System.Data.DataColumn);
			constructor(parentColumns: System.Data.DataColumn[], childColumns: System.Data.DataColumn[]);
			constructor(constraintName: string, parentColumns: System.Data.DataColumn[], childColumns: System.Data.DataColumn[]);
			constructor(constraintName: string, parentTableName: string, parentColumnNames: string[], childColumnNames: string[], acceptRejectRule: System.Data.AcceptRejectRule, deleteRule: System.Data.Rule, updateRule: System.Data.Rule);
			constructor(constraintName: string, parentTableName: string, parentTableNamespace: string, parentColumnNames: string[], childColumnNames: string[], acceptRejectRule: System.Data.AcceptRejectRule, deleteRule: System.Data.Rule, updateRule: System.Data.Rule);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export interface IColumnMapping {
		}
		export interface IColumnMappingCollection {
			Add(sourceColumnName: string, dataSetColumnName: string): System.Data.IColumnMapping;
			Contains(sourceColumnName: string): boolean;
			GetByDataSetColumn(dataSetColumnName: string): System.Data.IColumnMapping;
			IndexOf(sourceColumnName: string): number;
			RemoveAt(sourceColumnName: string): void;
		}
		export interface IDataAdapter {
			FillSchema(dataSet: System.Data.DataSet, schemaType: System.Data.SchemaType): System.Data.DataTable[];
			Fill(dataSet: System.Data.DataSet): number;
			GetFillParameters(): System.Data.IDataParameter[];
			Update(dataSet: System.Data.DataSet): number;
		}
		export interface IDataParameter {
		}
		export interface IDataParameterCollection {
			Contains(parameterName: string): boolean;
			IndexOf(parameterName: string): number;
			RemoveAt(parameterName: string): void;
		}
		export interface IDataReader {
			Close(): void;
			GetSchemaTable(): System.Data.DataTable;
			NextResult(): boolean;
			Read(): boolean;
		}
		export interface IDataRecord {
			GetName(i: number): string;
			GetDataTypeName(i: number): string;
			GetFieldType(i: number): System.Type;
			GetValue(i: number): any;
			GetValues(values: any): number;
			GetOrdinal(name: string): number;
			GetBoolean(i: number): boolean;
			GetByte(i: number): number;
			GetBytes(i: number, fieldOffset: number, buffer: Uint8Array, bufferoffset: number, length: number): number;
			GetChar(i: number): string;
			GetChars(i: number, fieldoffset: number, buffer: string[], bufferoffset: number, length: number): number;
			GetGuid(i: number): System.Guid;
			GetInt16(i: number): number;
			GetInt32(i: number): number;
			GetInt64(i: number): number;
			GetFloat(i: number): number;
			GetDouble(i: number): number;
			GetString(i: number): string;
			GetDecimal(i: number): System.Decimal;
			GetDateTime(i: number): System.DateTime;
			GetData(i: number): System.Data.IDataReader;
			IsDBNull(i: number): boolean;
		}
		export interface IDbCommand {
			Prepare(): void;
			Cancel(): void;
			CreateParameter(): System.Data.IDbDataParameter;
			ExecuteNonQuery(): number;
			ExecuteReader(): System.Data.IDataReader;
			ExecuteReader(behavior: System.Data.CommandBehavior): System.Data.IDataReader;
			ExecuteScalar(): any;
		}
		export interface IDbConnection {
			BeginTransaction(): System.Data.IDbTransaction;
			BeginTransaction(il: System.Data.IsolationLevel): System.Data.IDbTransaction;
			Close(): void;
			ChangeDatabase(databaseName: string): void;
			CreateCommand(): System.Data.IDbCommand;
			Open(): void;
		}
		export interface IDbDataAdapter {
		}
		export interface IDbDataParameter {
		}
		export interface IDbTransaction {
			Commit(): void;
			Rollback(): void;
		}
		export interface ITableMapping {
		}
		export interface ITableMappingCollection {
			Add(sourceTableName: string, dataSetTableName: string): System.Data.ITableMapping;
			Contains(sourceTableName: string): boolean;
			GetByDataSetTable(dataSetTableName: string): System.Data.ITableMapping;
			IndexOf(sourceTableName: string): number;
			RemoveAt(sourceTableName: string): void;
		}
		export enum IsolationLevel { Unspecified = -1, Chaos = 16, ReadUncommitted = 256, ReadCommitted = 4096, RepeatableRead = 65536, Serializable = 1048576, Snapshot = 16777216, }
		export enum KeyRestrictionBehavior { AllowOnly = 0, PreventUsage = 1, }
		export enum LoadOption { OverwriteChanges = 1, PreserveChanges = 2, Upsert = 3, }
		export enum MappingType { Element = 1, Attribute = 2, SimpleContent = 3, Hidden = 4, }
		export class MergeFailedEventArgs extends System.EventArgs {
			get Table(): System.Data.DataTable;
			get Conflict(): string;
			constructor(table: System.Data.DataTable, conflict: string);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class MergeFailedEventHandler extends Function {
		}
		export enum MissingMappingAction { Passthrough = 1, Ignore = 2, Error = 3, }
		export enum MissingSchemaAction { Add = 1, Ignore = 2, Error = 3, AddWithKey = 4, }
		export enum ParameterDirection { Input = 1, Output = 2, InputOutput = 3, ReturnValue = 6, }
		export class PropertyCollection {
			constructor();
			/**inherited method */
			Clone(): any;
			/**inherited method */
			Add(key: any, value: any): void;
			/**inherited method */
			Clear(): void;
			/**inherited method */
			Contains(key: any): boolean;
			/**inherited method */
			ContainsKey(key: any): boolean;
			/**inherited method */
			ContainsValue(value: any): boolean;
			/**inherited method */
			CopyTo(array: System.Array, arrayIndex: number): void;
			/**inherited method */
			GetEnumerator(): any;
			/**inherited method */
			Remove(key: any): void;
			/**inherited method */
			GetObjectData(info: any, context: any): void;
			/**inherited method */
			OnDeserialization(sender: any): void;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum Rule { None = 0, Cascade = 1, SetNull = 2, SetDefault = 3, }
		export enum SchemaSerializationMode { IncludeSchema = 1, ExcludeSchema = 2, }
		export enum SchemaType { Source = 1, Mapped = 2, }
		export enum SqlDbType { BigInt = 0, Binary = 1, Bit = 2, Char = 3, DateTime = 4, Decimal = 5, Float = 6, Image = 7, Int = 8, Money = 9, NChar = 10, NText = 11, NVarChar = 12, Real = 13, UniqueIdentifier = 14, SmallDateTime = 15, SmallInt = 16, SmallMoney = 17, Text = 18, Timestamp = 19, TinyInt = 20, VarBinary = 21, VarChar = 22, Variant = 23, Xml = 25, Udt = 29, Structured = 30, Date = 31, Time = 32, DateTime2 = 33, DateTimeOffset = 34, }
		export class StateChangeEventArgs extends System.EventArgs {
			get CurrentState(): System.Data.ConnectionState;
			get OriginalState(): System.Data.ConnectionState;
			constructor(originalState: System.Data.ConnectionState, currentState: System.Data.ConnectionState);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StateChangeEventHandler extends Function {
		}
		export class StatementCompletedEventArgs extends System.EventArgs {
			get RecordCount(): number;
			constructor(recordCount: number);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class StatementCompletedEventHandler extends Function {
		}
		export enum StatementType { Select = 0, Insert = 1, Update = 2, Delete = 3, Batch = 4, }
		export class UniqueConstraint extends System.Data.Constraint {
			get Columns(): System.Data.DataColumn[];
			get IsPrimaryKey(): boolean;
			get Table(): System.Data.DataTable;
			constructor(name: string, column: System.Data.DataColumn);
			constructor(column: System.Data.DataColumn);
			constructor(name: string, columns: System.Data.DataColumn[]);
			constructor(columns: System.Data.DataColumn[]);
			constructor(name: string, columnNames: string[], isPrimaryKey: boolean);
			constructor(name: string, column: System.Data.DataColumn, isPrimaryKey: boolean);
			constructor(column: System.Data.DataColumn, isPrimaryKey: boolean);
			constructor(name: string, columns: System.Data.DataColumn[], isPrimaryKey: boolean);
			constructor(columns: System.Data.DataColumn[], isPrimaryKey: boolean);
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum UpdateRowSource { None = 0, OutputParameters = 1, FirstReturnedRecord = 2, Both = 3, }
		export enum XmlReadMode { Auto = 0, ReadSchema = 1, IgnoreSchema = 2, InferSchema = 3, DiffGram = 4, Fragment = 5, InferTypedSchema = 6, }
		export enum XmlWriteMode { WriteSchema = 0, IgnoreSchema = 1, DiffGram = 2, }
		export enum UpdateStatus { Continue = 0, ErrorsOccurred = 1, SkipCurrentRow = 2, SkipAllRemainingRows = 3, }
		export class TypedDataSetGenerator extends System.Object {
			constructor();
			static Generate(dataSet: System.Data.DataSet, codeNamespace: any, codeGen: any): void;
			static GenerateIdName(name: string, codeGen: any): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export class DataSetSchemaImporterExtension {
			constructor();
			/**inherited method */
			ImportSchemaType(name: string, schemaNamespace: string, context: any, schemas: any, importer: any, compileUnit: any, mainNamespace: any, options: any, codeProvider: any): string;
			/**inherited method */
			ImportSchemaType(type: any, context: any, schemas: any, importer: any, compileUnit: any, mainNamespace: any, options: any, codeProvider: any): string;
			/**inherited method */
			ImportAnyElement(any: any, mixed: boolean, schemas: any, importer: any, compileUnit: any, mainNamespace: any, options: any, codeProvider: any): string;
			/**inherited method */
			ImportDefaultValue(value: string, type: string): any;
			/**inherited method */
			Equals(obj: any): boolean;
			/**inherited method */
			GetHashCode(): number;
			/**inherited method */
			GetType(): System.Type;
			/**inherited method */
			ToString(): string;
			Equals(x: any): boolean;
			GetType(): System.Type;
			GetHashCode(): number;
			ToString(): string;
		}
		export enum PropertyAttributes { NotSupported = 0, Required = 1, Optional = 2, Read = 512, Write = 1024, }

	}
	export class $Ref<T>{ }
	export class $Task<T>{ }
}
